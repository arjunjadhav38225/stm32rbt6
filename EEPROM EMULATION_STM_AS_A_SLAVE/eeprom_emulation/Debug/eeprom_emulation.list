
eeprom_emulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004804  08004804  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004804  08004804  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004804  08004804  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800480c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  08004874  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004874  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007964  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a13  00000000  00000000  00027a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000642  00000000  00000000  00029c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c0b  00000000  00000000  0002a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad88  00000000  00000000  00041edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000840a9  00000000  00000000  0004cc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002858  00000000  00000000  000d0d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000d3568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800476c 	.word	0x0800476c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800476c 	.word	0x0800476c

0800014c <process_data>:
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t bytesTransd = 0;

int process_data (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
	int startREG = RxData[0];  // get the register address
 8000152:	4b23      	ldr	r3, [pc, #140]	; (80001e0 <process_data+0x94>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	617b      	str	r3, [r7, #20]
	int numREG = bytesRrecvd;  // Get the number of registers
 8000158:	4b22      	ldr	r3, [pc, #136]	; (80001e4 <process_data+0x98>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	607b      	str	r3, [r7, #4]
	int endREG = startREG + numREG -1;  // calculate the end register
 800015e:	697a      	ldr	r2, [r7, #20]
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	3b01      	subs	r3, #1
 8000166:	603b      	str	r3, [r7, #0]
	if (endREG>99)  // There are a total of 100 registers (0-99)
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	2b63      	cmp	r3, #99	; 0x63
 800016c:	dd09      	ble.n	8000182 <process_data+0x36>
	{
		// clear everything and return
		memset(RxData,'\0',RxSIZE);
 800016e:	2264      	movs	r2, #100	; 0x64
 8000170:	2100      	movs	r1, #0
 8000172:	481b      	ldr	r0, [pc, #108]	; (80001e0 <process_data+0x94>)
 8000174:	f003 fd68 	bl	8003c48 <memset>
		rxcount =0;
 8000178:	4b1b      	ldr	r3, [pc, #108]	; (80001e8 <process_data+0x9c>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
		return 0;
 800017e:	2300      	movs	r3, #0
 8000180:	e02a      	b.n	80001d8 <process_data+0x8c>
	}
	 for (int i = 0; i < 100; i++)
 8000182:	2300      	movs	r3, #0
 8000184:	613b      	str	r3, [r7, #16]
 8000186:	e00a      	b.n	800019e <process_data+0x52>
			        {
			            printf("0x%02X \n", RxData[i]);
 8000188:	4a15      	ldr	r2, [pc, #84]	; (80001e0 <process_data+0x94>)
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	4413      	add	r3, r2
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	4619      	mov	r1, r3
 8000192:	4816      	ldr	r0, [pc, #88]	; (80001ec <process_data+0xa0>)
 8000194:	f003 fc12 	bl	80039bc <iprintf>
	 for (int i = 0; i < 100; i++)
 8000198:	693b      	ldr	r3, [r7, #16]
 800019a:	3301      	adds	r3, #1
 800019c:	613b      	str	r3, [r7, #16]
 800019e:	693b      	ldr	r3, [r7, #16]
 80001a0:	2b63      	cmp	r3, #99	; 0x63
 80001a2:	ddf1      	ble.n	8000188 <process_data+0x3c>
			        }
	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 80001a4:	2301      	movs	r3, #1
 80001a6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<numREG; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	60bb      	str	r3, [r7, #8]
 80001ac:	e00c      	b.n	80001c8 <process_data+0x7c>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 80001ae:	68fa      	ldr	r2, [r7, #12]
 80001b0:	1c53      	adds	r3, r2, #1
 80001b2:	60fb      	str	r3, [r7, #12]
 80001b4:	697b      	ldr	r3, [r7, #20]
 80001b6:	1c59      	adds	r1, r3, #1
 80001b8:	6179      	str	r1, [r7, #20]
 80001ba:	4909      	ldr	r1, [pc, #36]	; (80001e0 <process_data+0x94>)
 80001bc:	5c89      	ldrb	r1, [r1, r2]
 80001be:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <process_data+0xa4>)
 80001c0:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	3301      	adds	r3, #1
 80001c6:	60bb      	str	r3, [r7, #8]
 80001c8:	68ba      	ldr	r2, [r7, #8]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	dbee      	blt.n	80001ae <process_data+0x62>
	}
	rcvd_cmpltd=1;
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <process_data+0xa8>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]
	return 1;  // success
 80001d6:	2301      	movs	r3, #1
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200000ec 	.word	0x200000ec
 80001e4:	20000153 	.word	0x20000153
 80001e8:	20000150 	.word	0x20000150
 80001ec:	08004784 	.word	0x08004784
 80001f0:	20000084 	.word	0x20000084
 80001f4:	200000e8 	.word	0x200000e8

080001f8 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 fa3c 	bl	800167e <HAL_I2C_EnableListen_IT>
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	70fb      	strb	r3, [r7, #3]
 800021c:	4613      	mov	r3, r2
 800021e:	803b      	strh	r3, [r7, #0]


	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d110      	bne.n	8000248 <HAL_I2C_AddrCallback+0x38>
	{
		RxData[0] = 0;  // reset the RxData[0] to clear any residue address from previous call
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <HAL_I2C_AddrCallback+0x70>)
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
		rxcount =0;
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <HAL_I2C_AddrCallback+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <HAL_I2C_AddrCallback+0x74>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <HAL_I2C_AddrCallback+0x70>)
 800023a:	18d1      	adds	r1, r2, r3
 800023c:	2301      	movs	r3, #1
 800023e:	2201      	movs	r2, #1
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f001 f9aa 	bl	800159a <HAL_I2C_Slave_Seq_Receive_IT>
		txcount = 0;
		startPosition = RxData[0];
		RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
	}
}
 8000246:	e016      	b.n	8000276 <HAL_I2C_AddrCallback+0x66>
		txcount = 0;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <HAL_I2C_AddrCallback+0x78>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <HAL_I2C_AddrCallback+0x70>)
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <HAL_I2C_AddrCallback+0x7c>)
 8000254:	701a      	strb	r2, [r3, #0]
		RxData[0] = 0;  // Reset the start register as we have already copied it
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <HAL_I2C_AddrCallback+0x70>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <HAL_I2C_AddrCallback+0x7c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	461a      	mov	r2, r3
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <HAL_I2C_AddrCallback+0x78>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4413      	add	r3, r2
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <HAL_I2C_AddrCallback+0x80>)
 800026a:	1899      	adds	r1, r3, r2
 800026c:	2301      	movs	r3, #1
 800026e:	2201      	movs	r2, #1
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f001 f920 	bl	80014b6 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200000ec 	.word	0x200000ec
 8000284:	20000150 	.word	0x20000150
 8000288:	20000151 	.word	0x20000151
 800028c:	20000152 	.word	0x20000152
 8000290:	20000084 	.word	0x20000084

08000294 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	txcount++;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80002a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 80002b6:	1899      	adds	r1, r3, r2
 80002b8:	2304      	movs	r3, #4
 80002ba:	2201      	movs	r2, #1
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f001 f8fa 	bl	80014b6 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000151 	.word	0x20000151
 80002d0:	20000152 	.word	0x20000152
 80002d4:	20000084 	.word	0x20000084

080002d8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	rxcount++;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80002ea:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b63      	cmp	r3, #99	; 0x63
 80002f2:	d818      	bhi.n	8000326 <HAL_I2C_SlaveRxCpltCallback+0x4e>
	{
		if (rxcount == RxSIZE-1)
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b63      	cmp	r3, #99	; 0x63
 80002fa:	d10a      	bne.n	8000312 <HAL_I2C_SlaveRxCpltCallback+0x3a>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000304:	18d1      	adds	r1, r2, r3
 8000306:	2320      	movs	r3, #32
 8000308:	2201      	movs	r2, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 f945 	bl	800159a <HAL_I2C_Slave_Seq_Receive_IT>
 8000310:	e009      	b.n	8000326 <HAL_I2C_SlaveRxCpltCallback+0x4e>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800031a:	18d1      	adds	r1, r2, r3
 800031c:	2304      	movs	r3, #4
 800031e:	2201      	movs	r2, #1
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f001 f93a 	bl	800159a <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b64      	cmp	r3, #100	; 0x64
 800032c:	d101      	bne.n	8000332 <HAL_I2C_SlaveRxCpltCallback+0x5a>
	{
		process_data();
 800032e:	f7ff ff0d 	bl	800014c <process_data>
	}
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000150 	.word	0x20000150
 8000340:	200000ec 	.word	0x200000ec

08000344 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f001 fbf2 	bl	8001b36 <HAL_I2C_GetError>
 8000352:	60f8      	str	r0, [r7, #12]

	if (errorcode == 4)  // AF error
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b04      	cmp	r3, #4
 8000358:	d119      	bne.n	800038e <HAL_I2C_ErrorCallback+0x4a>
	{
		if (txcount == 0)  // error is while slave is receiving
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <HAL_I2C_ErrorCallback+0x7c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d10b      	bne.n	800037a <HAL_I2C_ErrorCallback+0x36>
		{
			bytesRrecvd = rxcount-1;  // the first byte is the register address
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <HAL_I2C_ErrorCallback+0x80>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <HAL_I2C_ErrorCallback+0x84>)
 800036c:	701a      	strb	r2, [r3, #0]
			rxcount = 0;  // Reset the rxcount for the next operation
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_I2C_ErrorCallback+0x80>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
			process_data();
 8000374:	f7ff feea 	bl	800014c <process_data>
 8000378:	e01a      	b.n	80003b0 <HAL_I2C_ErrorCallback+0x6c>
		}
		else // error while slave is transmitting
		{
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <HAL_I2C_ErrorCallback+0x7c>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	3b01      	subs	r3, #1
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_I2C_ErrorCallback+0x88>)
 8000384:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <HAL_I2C_ErrorCallback+0x7c>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e010      	b.n	80003b0 <HAL_I2C_ErrorCallback+0x6c>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	else if (errorcode == 1)  // BERR Error
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d10d      	bne.n	80003b0 <HAL_I2C_ErrorCallback+0x6c>
	{
		HAL_I2C_DeInit(hi2c);
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f001 f84b 	bl	8001430 <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 ff04 	bl	80011a8 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 80003a0:	2264      	movs	r2, #100	; 0x64
 80003a2:	2100      	movs	r1, #0
 80003a4:	480a      	ldr	r0, [pc, #40]	; (80003d0 <HAL_I2C_ErrorCallback+0x8c>)
 80003a6:	f003 fc4f 	bl	8003c48 <memset>
		rxcount =0;  // reset the count
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_I2C_ErrorCallback+0x80>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_EnableListen_IT(hi2c);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f001 f964 	bl	800167e <HAL_I2C_EnableListen_IT>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000151 	.word	0x20000151
 80003c4:	20000150 	.word	0x20000150
 80003c8:	20000153 	.word	0x20000153
 80003cc:	20000154 	.word	0x20000154
 80003d0:	200000ec 	.word	0x200000ec

080003d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d013      	beq.n	8000414 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00b      	beq.n	8000414 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003fc:	e000      	b.n	8000400 <ITM_SendChar+0x2c>
    {
      __NOP();
 80003fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000400:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f9      	beq.n	80003fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800040a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <_write>:
extern uint8_t rcvd_cmpltd;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	e009      	b.n	8000446 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	60ba      	str	r2, [r7, #8]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffca 	bl	80003d4 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	3301      	adds	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	697a      	ldr	r2, [r7, #20]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	429a      	cmp	r2, r3
 800044c:	dbf1      	blt.n	8000432 <_write+0x12>
	}
	return len;
 800044e:	687b      	ldr	r3, [r7, #4]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Entering main code\n");
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <main+0x2c>)
 800045e:	f003 fb13 	bl	8003a88 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000462:	f000 fa39 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000466:	f000 f811 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046a:	f000 f879 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 800046e:	f000 f849 	bl	8000504 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 8000472:	4805      	ldr	r0, [pc, #20]	; (8000488 <main+0x30>)
 8000474:	f001 f903 	bl	800167e <HAL_I2C_EnableListen_IT>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <main+0x2a>
		Error_Handler();
 800047e:	f000 f891 	bl	80005a4 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000482:	e7fe      	b.n	8000482 <main+0x2a>
 8000484:	08004790 	.word	0x08004790
 8000488:	20000158 	.word	0x20000158

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b090      	sub	sp, #64	; 0x40
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2228      	movs	r2, #40	; 0x28
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fbd4 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	2310      	movs	r3, #16
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 fdbc 	bl	8003040 <HAL_RCC_OscConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004ce:	f000 f869 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	230f      	movs	r3, #15
 80004d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 f82a 	bl	8003544 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f855 	bl	80005a4 <Error_Handler>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3740      	adds	r7, #64	; 0x40
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_I2C1_Init+0x50>)
 800050a:	4a13      	ldr	r2, [pc, #76]	; (8000558 <MX_I2C1_Init+0x54>)
 800050c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_I2C1_Init+0x50>)
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <MX_I2C1_Init+0x58>)
 8000512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_I2C1_Init+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 5;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_I2C1_Init+0x50>)
 800051c:	2205      	movs	r2, #5
 800051e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_I2C1_Init+0x50>)
 8000522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_I2C1_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_I2C1_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <MX_I2C1_Init+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_I2C1_Init+0x50>)
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_I2C1_Init+0x50>)
 8000542:	f000 fe31 	bl	80011a8 <HAL_I2C_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800054c:	f000 f82a 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000158 	.word	0x20000158
 8000558:	40005400 	.word	0x40005400
 800055c:	000186a0 	.word	0x000186a0

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_GPIO_Init+0x40>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <MX_GPIO_Init+0x40>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_GPIO_Init+0x40>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_GPIO_Init+0x40>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <MX_GPIO_Init+0x40>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <MX_GPIO_Init+0x40>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_MspInit+0x5c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x5c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x60>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x60>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <HAL_I2C_MspInit+0x90>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d133      	bne.n	800069c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800064c:	23c0      	movs	r3, #192	; 0xc0
 800064e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000650:	2312      	movs	r3, #18
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4813      	ldr	r0, [pc, #76]	; (80006ac <HAL_I2C_MspInit+0x98>)
 8000660:	f000 fb62 	bl	8000d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 800066a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066e:	61d3      	str	r3, [r2, #28]
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_I2C_MspInit+0x94>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	201f      	movs	r0, #31
 8000682:	f000 fa86 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000686:	201f      	movs	r0, #31
 8000688:	f000 fa9f 	bl	8000bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2020      	movs	r0, #32
 8000692:	f000 fa7e 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000696:	2020      	movs	r0, #32
 8000698:	f000 fa97 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40005400 	.word	0x40005400
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <HAL_I2C_MspDeInit+0x44>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d113      	bne.n	80006ea <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_I2C_MspDeInit+0x48>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <HAL_I2C_MspDeInit+0x48>)
 80006c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80006cc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <HAL_I2C_MspDeInit+0x4c>)
 80006d2:	f000 fcad 	bl	8001030 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <HAL_I2C_MspDeInit+0x4c>)
 80006da:	f000 fca9 	bl	8001030 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80006de:	201f      	movs	r0, #31
 80006e0:	f000 fa81 	bl	8000be6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80006e4:	2020      	movs	r0, #32
 80006e6:	f000 fa7e 	bl	8000be6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40005400 	.word	0x40005400
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010c00 	.word	0x40010c00

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000746:	f000 f90d 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <I2C1_EV_IRQHandler+0x10>)
 8000756:	f000 ffc7 	bl	80016e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000158 	.word	0x20000158

08000764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <I2C1_ER_IRQHandler+0x10>)
 800076a:	f001 f910 	bl	800198e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000158 	.word	0x20000158

08000778 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e00a      	b.n	80007a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800078a:	f3af 8000 	nop.w
 800078e:	4601      	mov	r1, r0
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dbf0      	blt.n	800078a <_read+0x12>
  }

  return len;
 80007a8:	687b      	ldr	r3, [r7, #4]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d8:	605a      	str	r2, [r3, #4]
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_isatty>:

int _isatty(int file)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b085      	sub	sp, #20
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
	...

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f003 fa4e 	bl	8003ce4 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20005000 	.word	0x20005000
 8000874:	00000400 	.word	0x00000400
 8000878:	200001ac 	.word	0x200001ac
 800087c:	20000300 	.word	0x20000300

08000880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800088c:	f7ff fff8 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000892:	490c      	ldr	r1, [pc, #48]	; (80008c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a09      	ldr	r2, [pc, #36]	; (80008cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008a8:	4c09      	ldr	r4, [pc, #36]	; (80008d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f003 fa1b 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fdcd 	bl	8000458 <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008c8:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 80008cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008d0:	20000300 	.word	0x20000300

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f947 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	200f      	movs	r0, #15
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fe5c 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f96d 	bl	8000c02 <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f000 f927 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	200001b0 	.word	0x200001b0

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	200001b0 	.word	0x200001b0

0800099c <__NVIC_SetPriorityGrouping>:
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_DisableIRQ>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db12      	blt.n	8000a70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <__NVIC_DisableIRQ+0x44>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	3320      	adds	r3, #32
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
}
 8000a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6a:	f3bf 8f6f 	isb	sy
}
 8000a6e:	bf00      	nop
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Config>:
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff90 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff09 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff1e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff11 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff1f 	bl	8000a38 <__NVIC_DisableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff94 	bl	8000b38 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d005      	beq.n	8000c40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2204      	movs	r2, #4
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e051      	b.n	8000ce4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 020e 	bic.w	r2, r2, #14
 8000c4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0201 	bic.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_DMA_Abort_IT+0xd4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d029      	beq.n	8000cbe <HAL_DMA_Abort_IT+0xa2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_DMA_Abort_IT+0xd8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d022      	beq.n	8000cba <HAL_DMA_Abort_IT+0x9e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <HAL_DMA_Abort_IT+0xdc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d01a      	beq.n	8000cb4 <HAL_DMA_Abort_IT+0x98>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <HAL_DMA_Abort_IT+0xe0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d012      	beq.n	8000cae <HAL_DMA_Abort_IT+0x92>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_DMA_Abort_IT+0xe4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00a      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x8c>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_DMA_Abort_IT+0xe8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d102      	bne.n	8000ca2 <HAL_DMA_Abort_IT+0x86>
 8000c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ca0:	e00e      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ca6:	e00b      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	e008      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	e005      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb8:	e002      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000cba:	2310      	movs	r3, #16
 8000cbc:	e000      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xa4>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_DMA_Abort_IT+0xec>)
 8000cc2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	4798      	blx	r3
    } 
  }
  return status;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40020008 	.word	0x40020008
 8000cf4:	4002001c 	.word	0x4002001c
 8000cf8:	40020030 	.word	0x40020030
 8000cfc:	40020044 	.word	0x40020044
 8000d00:	40020058 	.word	0x40020058
 8000d04:	4002006c 	.word	0x4002006c
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d1a:	b2db      	uxtb	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e169      	b.n	8001010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8158 	bne.w	800100a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4a9a      	ldr	r2, [pc, #616]	; (8000fc8 <HAL_GPIO_Init+0x2a0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d05e      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
 8000d64:	4a98      	ldr	r2, [pc, #608]	; (8000fc8 <HAL_GPIO_Init+0x2a0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d875      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000d6a:	4a98      	ldr	r2, [pc, #608]	; (8000fcc <HAL_GPIO_Init+0x2a4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d058      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
 8000d70:	4a96      	ldr	r2, [pc, #600]	; (8000fcc <HAL_GPIO_Init+0x2a4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d86f      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000d76:	4a96      	ldr	r2, [pc, #600]	; (8000fd0 <HAL_GPIO_Init+0x2a8>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d052      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
 8000d7c:	4a94      	ldr	r2, [pc, #592]	; (8000fd0 <HAL_GPIO_Init+0x2a8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d869      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000d82:	4a94      	ldr	r2, [pc, #592]	; (8000fd4 <HAL_GPIO_Init+0x2ac>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d04c      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
 8000d88:	4a92      	ldr	r2, [pc, #584]	; (8000fd4 <HAL_GPIO_Init+0x2ac>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d863      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000d8e:	4a92      	ldr	r2, [pc, #584]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d046      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
 8000d94:	4a90      	ldr	r2, [pc, #576]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d85d      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000d9a:	2b12      	cmp	r3, #18
 8000d9c:	d82a      	bhi.n	8000df4 <HAL_GPIO_Init+0xcc>
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d859      	bhi.n	8000e56 <HAL_GPIO_Init+0x12e>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <HAL_GPIO_Init+0x80>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000e23 	.word	0x08000e23
 8000dac:	08000dfd 	.word	0x08000dfd
 8000db0:	08000e0f 	.word	0x08000e0f
 8000db4:	08000e51 	.word	0x08000e51
 8000db8:	08000e57 	.word	0x08000e57
 8000dbc:	08000e57 	.word	0x08000e57
 8000dc0:	08000e57 	.word	0x08000e57
 8000dc4:	08000e57 	.word	0x08000e57
 8000dc8:	08000e57 	.word	0x08000e57
 8000dcc:	08000e57 	.word	0x08000e57
 8000dd0:	08000e57 	.word	0x08000e57
 8000dd4:	08000e57 	.word	0x08000e57
 8000dd8:	08000e57 	.word	0x08000e57
 8000ddc:	08000e57 	.word	0x08000e57
 8000de0:	08000e57 	.word	0x08000e57
 8000de4:	08000e57 	.word	0x08000e57
 8000de8:	08000e57 	.word	0x08000e57
 8000dec:	08000e05 	.word	0x08000e05
 8000df0:	08000e19 	.word	0x08000e19
 8000df4:	4a79      	ldr	r2, [pc, #484]	; (8000fdc <HAL_GPIO_Init+0x2b4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dfa:	e02c      	b.n	8000e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e029      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e024      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	3308      	adds	r3, #8
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e01f      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e01a      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	623b      	str	r3, [r7, #32]
          break;
 8000e2e:	e013      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d105      	bne.n	8000e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	611a      	str	r2, [r3, #16]
          break;
 8000e42:	e009      	b.n	8000e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e44:	2308      	movs	r3, #8
 8000e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	615a      	str	r2, [r3, #20]
          break;
 8000e4e:	e003      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
          break;
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x130>
          break;
 8000e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d801      	bhi.n	8000e62 <HAL_GPIO_Init+0x13a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	e001      	b.n	8000e66 <HAL_GPIO_Init+0x13e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3304      	adds	r3, #4
 8000e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d802      	bhi.n	8000e74 <HAL_GPIO_Init+0x14c>
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x152>
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3b08      	subs	r3, #8
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	210f      	movs	r1, #15
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	6a39      	ldr	r1, [r7, #32]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	431a      	orrs	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80b1 	beq.w	800100a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea8:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <HAL_GPIO_Init+0x2b8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x2b8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <HAL_GPIO_Init+0x2bc>)
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a40      	ldr	r2, [pc, #256]	; (8000fe8 <HAL_GPIO_Init+0x2c0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d013      	beq.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <HAL_GPIO_Init+0x2c4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d00d      	beq.n	8000f10 <HAL_GPIO_Init+0x1e8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3e      	ldr	r2, [pc, #248]	; (8000ff0 <HAL_GPIO_Init+0x2c8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x1e4>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3d      	ldr	r2, [pc, #244]	; (8000ff4 <HAL_GPIO_Init+0x2cc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_GPIO_Init+0x1e0>
 8000f04:	2303      	movs	r3, #3
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f08:	2304      	movs	r3, #4
 8000f0a:	e004      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_GPIO_Init+0x1ee>
 8000f14:	2300      	movs	r3, #0
 8000f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f18:	f002 0203 	and.w	r2, r2, #3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f26:	492f      	ldr	r1, [pc, #188]	; (8000fe4 <HAL_GPIO_Init+0x2bc>)
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	492c      	ldr	r1, [pc, #176]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4928      	ldr	r1, [pc, #160]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	4922      	ldr	r1, [pc, #136]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60cb      	str	r3, [r1, #12]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f76:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	491e      	ldr	r1, [pc, #120]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4918      	ldr	r1, [pc, #96]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d021      	beq.n	8000ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	600b      	str	r3, [r1, #0]
 8000fc4:	e021      	b.n	800100a <HAL_GPIO_Init+0x2e2>
 8000fc6:	bf00      	nop
 8000fc8:	10320000 	.word	0x10320000
 8000fcc:	10310000 	.word	0x10310000
 8000fd0:	10220000 	.word	0x10220000
 8000fd4:	10210000 	.word	0x10210000
 8000fd8:	10120000 	.word	0x10120000
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40011400 	.word	0x40011400
 8000ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_GPIO_Init+0x304>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	4909      	ldr	r1, [pc, #36]	; (800102c <HAL_GPIO_Init+0x304>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae8e 	bne.w	8000d3c <HAL_GPIO_Init+0x14>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800103e:	e09a      	b.n	8001176 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 808d 	beq.w	8001170 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001056:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_DeInit+0x160>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_GPIO_DeInit+0x164>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d013      	beq.n	80010a8 <HAL_GPIO_DeInit+0x78>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_GPIO_DeInit+0x168>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_DeInit+0x74>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_GPIO_DeInit+0x16c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_DeInit+0x70>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a43      	ldr	r2, [pc, #268]	; (80011a0 <HAL_GPIO_DeInit+0x170>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_DeInit+0x6c>
 8001098:	2303      	movs	r3, #3
 800109a:	e006      	b.n	80010aa <HAL_GPIO_DeInit+0x7a>
 800109c:	2304      	movs	r3, #4
 800109e:	e004      	b.n	80010aa <HAL_GPIO_DeInit+0x7a>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_DeInit+0x7a>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_GPIO_DeInit+0x7a>
 80010a8:	2300      	movs	r3, #0
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4093      	lsls	r3, r2
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d132      	bne.n	8001120 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4938      	ldr	r1, [pc, #224]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4934      	ldr	r1, [pc, #208]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4931      	ldr	r1, [pc, #196]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	492d      	ldr	r1, [pc, #180]	; (80011a4 <HAL_GPIO_DeInit+0x174>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_GPIO_DeInit+0x160>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	43da      	mvns	r2, r3
 8001112:	481f      	ldr	r0, [pc, #124]	; (8001190 <HAL_GPIO_DeInit+0x160>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	400a      	ands	r2, r1
 800111a:	3302      	adds	r3, #2
 800111c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d801      	bhi.n	800112a <HAL_GPIO_DeInit+0xfa>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e001      	b.n	800112e <HAL_GPIO_DeInit+0xfe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d802      	bhi.n	800113c <HAL_GPIO_DeInit+0x10c>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_DeInit+0x112>
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	3b08      	subs	r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	210f      	movs	r1, #15
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	2104      	movs	r1, #4
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	3301      	adds	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	fa22 f303 	lsr.w	r3, r2, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	f47f af5e 	bne.w	8001040 <HAL_GPIO_DeInit+0x10>
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40010000 	.word	0x40010000
 8001194:	40010800 	.word	0x40010800
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e12b      	b.n	8001412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fa20 	bl	8000614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800120a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800120c:	f002 fae2 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a81      	ldr	r2, [pc, #516]	; (800141c <HAL_I2C_Init+0x274>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d807      	bhi.n	800122c <HAL_I2C_Init+0x84>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a80      	ldr	r2, [pc, #512]	; (8001420 <HAL_I2C_Init+0x278>)
 8001220:	4293      	cmp	r3, r2
 8001222:	bf94      	ite	ls
 8001224:	2301      	movls	r3, #1
 8001226:	2300      	movhi	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	e006      	b.n	800123a <HAL_I2C_Init+0x92>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4a7d      	ldr	r2, [pc, #500]	; (8001424 <HAL_I2C_Init+0x27c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	bf94      	ite	ls
 8001234:	2301      	movls	r3, #1
 8001236:	2300      	movhi	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0e7      	b.n	8001412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a78      	ldr	r2, [pc, #480]	; (8001428 <HAL_I2C_Init+0x280>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	430a      	orrs	r2, r1
 8001260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a6a      	ldr	r2, [pc, #424]	; (800141c <HAL_I2C_Init+0x274>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d802      	bhi.n	800127c <HAL_I2C_Init+0xd4>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	e009      	b.n	8001290 <HAL_I2C_Init+0xe8>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	4a69      	ldr	r2, [pc, #420]	; (800142c <HAL_I2C_Init+0x284>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	099b      	lsrs	r3, r3, #6
 800128e:	3301      	adds	r3, #1
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	430b      	orrs	r3, r1
 8001296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	495c      	ldr	r1, [pc, #368]	; (800141c <HAL_I2C_Init+0x274>)
 80012ac:	428b      	cmp	r3, r1
 80012ae:	d819      	bhi.n	80012e4 <HAL_I2C_Init+0x13c>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e59      	subs	r1, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012c4:	400b      	ands	r3, r1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <HAL_I2C_Init+0x138>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1e59      	subs	r1, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	e051      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 80012e0:	2304      	movs	r3, #4
 80012e2:	e04f      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d111      	bne.n	8001310 <HAL_I2C_Init+0x168>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1e58      	subs	r0, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	440b      	add	r3, r1
 80012fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e012      	b.n	8001336 <HAL_I2C_Init+0x18e>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	0099      	lsls	r1, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	fbb0 f3f3 	udiv	r3, r0, r3
 8001326:	3301      	adds	r3, #1
 8001328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_I2C_Init+0x196>
 800133a:	2301      	movs	r3, #1
 800133c:	e022      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10e      	bne.n	8001364 <HAL_I2C_Init+0x1bc>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1e58      	subs	r0, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6859      	ldr	r1, [r3, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	fbb0 f3f3 	udiv	r3, r0, r3
 8001358:	3301      	adds	r3, #1
 800135a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001362:	e00f      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	0099      	lsls	r1, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	3301      	adds	r3, #1
 800137c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	6809      	ldr	r1, [r1, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6911      	ldr	r1, [r2, #16]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68d2      	ldr	r2, [r2, #12]
 80013be:	4311      	orrs	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	000186a0 	.word	0x000186a0
 8001420:	001e847f 	.word	0x001e847f
 8001424:	003d08ff 	.word	0x003d08ff
 8001428:	431bde83 	.word	0x431bde83
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e021      	b.n	8001486 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2224      	movs	r2, #36	; 0x24
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f928 	bl	80006b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	d103      	bne.n	80014ac <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  }
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80014d2:	2b28      	cmp	r3, #40	; 0x28
 80014d4:	d15b      	bne.n	800158e <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e054      	b.n	8001590 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e04d      	b.n	8001590 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d007      	beq.n	800151a <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001528:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2229      	movs	r2, #41	; 0x29
 800152e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001588:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800158e:	2302      	movs	r3, #2
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800159a:	b480      	push	{r7}
 800159c:	b087      	sub	sp, #28
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80015b6:	2b28      	cmp	r3, #40	; 0x28
 80015b8:	d15b      	bne.n	8001672 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e054      	b.n	8001674 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e04d      	b.n	8001674 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d007      	beq.n	80015fe <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800160c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	222a      	movs	r2, #42	; 0x2a
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800166c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b20      	cmp	r3, #32
 8001690:	d124      	bne.n	80016dc <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2228      	movs	r2, #40	; 0x28
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d007      	beq.n	80016b8 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c6:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016d6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80016dc:	2302      	movs	r3, #2
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001708:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b10      	cmp	r3, #16
 8001716:	d003      	beq.n	8001720 <HAL_I2C_EV_IRQHandler+0x38>
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	f040 80b1 	bne.w	8001882 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_I2C_EV_IRQHandler+0x6e>
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001740:	d003      	beq.n	800174a <HAL_I2C_EV_IRQHandler+0x62>
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001748:	d101      	bne.n	800174e <HAL_I2C_EV_IRQHandler+0x66>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_I2C_EV_IRQHandler+0x68>
 800174e:	2300      	movs	r3, #0
 8001750:	2b01      	cmp	r3, #1
 8001752:	f000 8114 	beq.w	800197e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_I2C_EV_IRQHandler+0x90>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f001 fc4e 	bl	800300c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fd4e 	bl	8002212 <I2C_Master_SB>
 8001776:	e083      	b.n	8001880 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_I2C_EV_IRQHandler+0xac>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fdc5 	bl	800231c <I2C_Master_ADD10>
 8001792:	e075      	b.n	8001880 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0xc8>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fde0 	bl	800236e <I2C_Master_ADDR>
 80017ae:	e067      	b.n	8001880 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d036      	beq.n	8001828 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c8:	f000 80db 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00d      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f9ae 	bl	8001b4c <I2C_MasterTransmit_TXE>
 80017f0:	e046      	b.n	8001880 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80c2 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80bc 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	2b21      	cmp	r3, #33	; 0x21
 800180e:	d103      	bne.n	8001818 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fa37 	bl	8001c84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001816:	e0b4      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	f040 80b1 	bne.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 faa5 	bl	8001d70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001826:	e0ac      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001836:	f000 80a4 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <HAL_I2C_EV_IRQHandler+0x178>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_I2C_EV_IRQHandler+0x178>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fb21 	bl	8001ea0 <I2C_MasterReceive_RXNE>
 800185e:	e00f      	b.n	8001880 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 808b 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8085 	beq.w	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fbd9 	bl	8002030 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800187e:	e080      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
 8001880:	e07f      	b.n	8001982 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e007      	b.n	80018a4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d011      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80018c8:	69b9      	ldr	r1, [r7, #24]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 ffa6 	bl	800281c <I2C_Slave_ADDR>
 80018d0:	e05a      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_I2C_EV_IRQHandler+0x206>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 ffe0 	bl	80028ac <I2C_Slave_STOPF>
 80018ec:	e04c      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	2b21      	cmp	r3, #33	; 0x21
 80018f2:	d002      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x212>
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	2b29      	cmp	r3, #41	; 0x29
 80018f8:	d120      	bne.n	800193c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_I2C_EV_IRQHandler+0x238>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_I2C_EV_IRQHandler+0x238>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fec3 	bl	80026a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800191e:	e032      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02d      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x29e>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001930:	2b00      	cmp	r3, #0
 8001932:	d028      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fef2 	bl	800271e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800193a:	e024      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00d      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x27a>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x27a>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 feff 	bl	800275e <I2C_SlaveReceive_RXNE>
 8001960:	e012      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00d      	beq.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 ff2f 	bl	80027da <I2C_SlaveReceive_BTF>
 800197c:	e004      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800197e:	bf00      	nop
 8001980:	e002      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001986:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b08a      	sub	sp, #40	; 0x28
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <HAL_I2C_ER_IRQHandler+0x5a>
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80019d6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x80>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001a0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03e      	beq.n	8001a96 <HAL_I2C_ER_IRQHandler+0x108>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d039      	beq.n	8001a96 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001a22:	7efb      	ldrb	r3, [r7, #27]
 8001a24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001a3c:	7ebb      	ldrb	r3, [r7, #26]
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d112      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xda>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xda>
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b21      	cmp	r3, #33	; 0x21
 8001a4c:	d008      	beq.n	8001a60 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001a4e:	7cfb      	ldrb	r3, [r7, #19]
 8001a50:	2b29      	cmp	r3, #41	; 0x29
 8001a52:	d005      	beq.n	8001a60 <HAL_I2C_ER_IRQHandler+0xd2>
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	2b28      	cmp	r3, #40	; 0x28
 8001a58:	d106      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b21      	cmp	r3, #33	; 0x21
 8001a5e:	d103      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 f853 	bl	8002b0c <I2C_Slave_AF>
 8001a66:	e016      	b.n	8001a96 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a7a:	7efb      	ldrb	r3, [r7, #27]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d002      	beq.n	8001a86 <HAL_I2C_ER_IRQHandler+0xf8>
 8001a80:	7efb      	ldrb	r3, [r7, #27]
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d107      	bne.n	8001a96 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_I2C_ER_IRQHandler+0x12e>
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001aba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f001 f890 	bl	8002bf4 <I2C_ITError>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d150      	bne.n	8001c14 <I2C_MasterTransmit_TXE+0xc8>
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b21      	cmp	r3, #33	; 0x21
 8001b76:	d14d      	bne.n	8001c14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d01d      	beq.n	8001bba <I2C_MasterTransmit_TXE+0x6e>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d01a      	beq.n	8001bba <I2C_MasterTransmit_TXE+0x6e>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b8a:	d016      	beq.n	8001bba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2211      	movs	r2, #17
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff92 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bb8:	e060      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d107      	bne.n	8001c04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff7f 	bl	8001b00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c02:	e03b      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff65 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c12:	e033      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b21      	cmp	r3, #33	; 0x21
 8001c18:	d005      	beq.n	8001c26 <I2C_MasterTransmit_TXE+0xda>
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d12d      	bne.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b22      	cmp	r3, #34	; 0x22
 8001c24:	d12a      	bne.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d108      	bne.n	8001c42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c40:	e01c      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d103      	bne.n	8001c56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f88e 	bl	8001d70 <I2C_MemoryTransmit_TXE_BTF>
}
 8001c54:	e012      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c7a:	e7ff      	b.n	8001c7c <I2C_MasterTransmit_TXE+0x130>
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b21      	cmp	r3, #33	; 0x21
 8001c9c:	d164      	bne.n	8001d68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001ccc:	e04c      	b.n	8001d68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d01d      	beq.n	8001d10 <I2C_MasterTransmit_BTF+0x8c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d01a      	beq.n	8001d10 <I2C_MasterTransmit_BTF+0x8c>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ce0:	d016      	beq.n	8001d10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cf0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2211      	movs	r2, #17
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fee7 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
}
 8001d0e:	e02b      	b.n	8001d68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d107      	bne.n	8001d5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fed4 	bl	8001b00 <HAL_I2C_MemTxCpltCallback>
}
 8001d58:	e006      	b.n	8001d68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff feba 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11d      	bne.n	8001dc4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d10b      	bne.n	8001da8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	1c9a      	adds	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001da6:	e077      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	121b      	asrs	r3, r3, #8
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dc2:	e069      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10b      	bne.n	8001de4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001de2:	e059      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d152      	bne.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b22      	cmp	r3, #34	; 0x22
 8001df0:	d10d      	bne.n	8001e0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e0c:	e044      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b21      	cmp	r3, #33	; 0x21
 8001e1c:	d112      	bne.n	8001e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e42:	e029      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d124      	bne.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b21      	cmp	r3, #33	; 0x21
 8001e52:	d121      	bne.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe38 	bl	8001b00 <HAL_I2C_MemTxCpltCallback>
}
 8001e90:	e002      	b.n	8001e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fafb 	bl	800148e <I2C_Flush_DR>
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b22      	cmp	r3, #34	; 0x22
 8001eb2:	f040 80b9 	bne.w	8002028 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d921      	bls.n	8001f0e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	f040 8096 	bne.w	8002028 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001f0c:	e08c      	b.n	8002028 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d07f      	beq.n	8002016 <I2C_MasterReceive_RXNE+0x176>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d002      	beq.n	8001f22 <I2C_MasterReceive_RXNE+0x82>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d179      	bne.n	8002016 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 f840 	bl	8002fa8 <I2C_WaitOnSTOPRequestThroughIT>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d14c      	bne.n	8001fc8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d10a      	bne.n	8001f9e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fdbb 	bl	8001b12 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f9c:	e044      	b.n	8002028 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d002      	beq.n	8001fb2 <I2C_MasterReceive_RXNE+0x112>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d103      	bne.n	8001fba <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb8:	e002      	b.n	8001fc0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2212      	movs	r2, #18
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fd94 	bl	8001aee <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fc6:	e02f      	b.n	8002028 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe f998 	bl	8000344 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002014:	e008      	b.n	8002028 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	605a      	str	r2, [r3, #4]
}
 8002026:	e7ff      	b.n	8002028 <I2C_MasterReceive_RXNE+0x188>
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b04      	cmp	r3, #4
 8002046:	d11b      	bne.n	8002080 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800207e:	e0c4      	b.n	800220a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b03      	cmp	r3, #3
 8002088:	d129      	bne.n	80020de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002098:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d00a      	beq.n	80020b6 <I2C_MasterReceive_BTF+0x86>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d007      	beq.n	80020b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020dc:	e095      	b.n	800220a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d17d      	bne.n	80021e4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <I2C_MasterReceive_BTF+0xc4>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d108      	bne.n	8002106 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e016      	b.n	8002134 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d002      	beq.n	8002112 <I2C_MasterReceive_BTF+0xe2>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d108      	bne.n	8002124 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800218e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d10a      	bne.n	80021ba <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fcad 	bl	8001b12 <HAL_I2C_MemRxCpltCallback>
}
 80021b8:	e027      	b.n	800220a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d002      	beq.n	80021ce <I2C_MasterReceive_BTF+0x19e>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d103      	bne.n	80021d6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	e002      	b.n	80021dc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2212      	movs	r2, #18
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fc86 	bl	8001aee <HAL_I2C_MasterRxCpltCallback>
}
 80021e2:	e012      	b.n	800220a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d117      	bne.n	8002256 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800223e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002240:	e067      	b.n	8002312 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
}
 8002254:	e05d      	b.n	8002312 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800225e:	d133      	bne.n	80022c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b21      	cmp	r3, #33	; 0x21
 800226a:	d109      	bne.n	8002280 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	e008      	b.n	8002292 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <I2C_Master_SB+0x92>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d108      	bne.n	80022b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d032      	beq.n	8002312 <I2C_Master_SB+0x100>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02d      	beq.n	8002312 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c4:	605a      	str	r2, [r3, #4]
}
 80022c6:	e024      	b.n	8002312 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10e      	bne.n	80022ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	11db      	asrs	r3, r3, #7
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 0306 	and.w	r3, r3, #6
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f063 030f 	orn	r3, r3, #15
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
}
 80022ec:	e011      	b.n	8002312 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10d      	bne.n	8002312 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	11db      	asrs	r3, r3, #7
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 0306 	and.w	r3, r3, #6
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f063 030e 	orn	r3, r3, #14
 800230a:	b2da      	uxtb	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	b2da      	uxtb	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <I2C_Master_ADD10+0x26>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <I2C_Master_ADD10+0x48>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
  }
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800236e:	b480      	push	{r7}
 8002370:	b091      	sub	sp, #68	; 0x44
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b22      	cmp	r3, #34	; 0x22
 8002396:	f040 8174 	bne.w	8002682 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <I2C_Master_ADDR+0x54>
 80023a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d10b      	bne.n	80023c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023aa:	2300      	movs	r3, #0
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	e16b      	b.n	800269a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11d      	bne.n	8002406 <I2C_Master_ADDR+0x98>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023d2:	d118      	bne.n	8002406 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
 8002404:	e149      	b.n	800269a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d113      	bne.n	8002438 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e120      	b.n	800267a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 808a 	bne.w	8002558 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800244a:	d137      	bne.n	80024bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246a:	d113      	bne.n	8002494 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	e0f2      	b.n	800267a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e0de      	b.n	800267a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d02e      	beq.n	8002520 <I2C_Master_ADDR+0x1b2>
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d02b      	beq.n	8002520 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d102      	bne.n	80024d4 <I2C_Master_ADDR+0x166>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d125      	bne.n	8002520 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00e      	beq.n	80024f8 <I2C_Master_ADDR+0x18a>
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d00b      	beq.n	80024f8 <I2C_Master_ADDR+0x18a>
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d008      	beq.n	80024f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e007      	b.n	8002508 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002506:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	e0ac      	b.n	800267a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e090      	b.n	800267a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d158      	bne.n	8002614 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	2b04      	cmp	r3, #4
 8002566:	d021      	beq.n	80025ac <I2C_Master_ADDR+0x23e>
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	2b02      	cmp	r3, #2
 800256c:	d01e      	beq.n	80025ac <I2C_Master_ADDR+0x23e>
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	2b10      	cmp	r3, #16
 8002572:	d01b      	beq.n	80025ac <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002582:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e012      	b.n	80025d2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e0:	d14b      	bne.n	800267a <I2C_Master_ADDR+0x30c>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e8:	d00b      	beq.n	8002602 <I2C_Master_ADDR+0x294>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d008      	beq.n	8002602 <I2C_Master_ADDR+0x294>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d005      	beq.n	8002602 <I2C_Master_ADDR+0x294>
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d002      	beq.n	8002602 <I2C_Master_ADDR+0x294>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d13b      	bne.n	800267a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e032      	b.n	800267a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002622:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002632:	d117      	bne.n	8002664 <I2C_Master_ADDR+0x2f6>
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800263a:	d00b      	beq.n	8002654 <I2C_Master_ADDR+0x2e6>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	2b01      	cmp	r3, #1
 8002640:	d008      	beq.n	8002654 <I2C_Master_ADDR+0x2e6>
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	2b08      	cmp	r3, #8
 8002646:	d005      	beq.n	8002654 <I2C_Master_ADDR+0x2e6>
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	2b10      	cmp	r3, #16
 800264c:	d002      	beq.n	8002654 <I2C_Master_ADDR+0x2e6>
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	2b20      	cmp	r3, #32
 8002652:	d107      	bne.n	8002664 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002662:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002680:	e00b      	b.n	800269a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
}
 8002698:	e7ff      	b.n	800269a <I2C_Master_ADDR+0x32c>
 800269a:	bf00      	nop
 800269c:	3744      	adds	r7, #68	; 0x44
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d02b      	beq.n	8002716 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d114      	bne.n	8002716 <I2C_SlaveTransmit_TXE+0x72>
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b29      	cmp	r3, #41	; 0x29
 80026f0:	d111      	bne.n	8002716 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2228      	movs	r2, #40	; 0x28
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fd fdbf 	bl	8000294 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d011      	beq.n	8002754 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02c      	beq.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b2a      	cmp	r3, #42	; 0x2a
 80027ac:	d111      	bne.n	80027d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2222      	movs	r2, #34	; 0x22
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2228      	movs	r2, #40	; 0x28
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fd fd83 	bl	80002d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002836:	2b28      	cmp	r3, #40	; 0x28
 8002838:	d125      	bne.n	8002886 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	81bb      	strh	r3, [r7, #12]
 8002868:	e002      	b.n	8002870 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002878:	89ba      	ldrh	r2, [r7, #12]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd fcc6 	bl	8000210 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002884:	e00e      	b.n	80028a4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	d172      	bne.n	80029f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b22      	cmp	r3, #34	; 0x22
 800290e:	d002      	beq.n	8002916 <I2C_Slave_STOPF+0x6a>
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b2a      	cmp	r3, #42	; 0x2a
 8002914:	d135      	bne.n	8002982 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0204 	orr.w	r2, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f9dc 	bl	8000d0c <HAL_DMA_GetState>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d049      	beq.n	80029ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <I2C_Slave_STOPF+0x258>)
 8002960:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe f958 	bl	8000c1c <HAL_DMA_Abort_IT>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03d      	beq.n	80029ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800297c:	4610      	mov	r0, r2
 800297e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002980:	e035      	b.n	80029ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9a6 	bl	8000d0c <HAL_DMA_GetState>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d014      	beq.n	80029f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	4a4e      	ldr	r2, [pc, #312]	; (8002b04 <I2C_Slave_STOPF+0x258>)
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f922 	bl	8000c1c <HAL_DMA_Abort_IT>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e8:	4610      	mov	r0, r2
 80029ea:	4798      	blx	r3
 80029ec:	e000      	b.n	80029f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03e      	beq.n	8002a78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d112      	bne.n	8002a2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d112      	bne.n	8002a62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8b7 	bl	8002bf4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a86:	e039      	b.n	8002afc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8c:	d109      	bne.n	8002aa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2228      	movs	r2, #40	; 0x28
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fd fc1b 	bl	80002d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b28      	cmp	r3, #40	; 0x28
 8002aac:	d111      	bne.n	8002ad2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <I2C_Slave_STOPF+0x25c>)
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fd fb94 	bl	80001f8 <HAL_I2C_ListenCpltCallback>
}
 8002ad0:	e014      	b.n	8002afc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	2b22      	cmp	r3, #34	; 0x22
 8002ad8:	d002      	beq.n	8002ae0 <I2C_Slave_STOPF+0x234>
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b22      	cmp	r3, #34	; 0x22
 8002ade:	d10d      	bne.n	8002afc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fbee 	bl	80002d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	08002e59 	.word	0x08002e59
 8002b08:	ffff0000 	.word	0xffff0000

08002b0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d002      	beq.n	8002b2e <I2C_Slave_AF+0x22>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d129      	bne.n	8002b82 <I2C_Slave_AF+0x76>
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b28      	cmp	r3, #40	; 0x28
 8002b32:	d126      	bne.n	8002b82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <I2C_Slave_AF+0xe4>)
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd fb3c 	bl	80001f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002b80:	e031      	b.n	8002be6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b21      	cmp	r3, #33	; 0x21
 8002b86:	d129      	bne.n	8002bdc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <I2C_Slave_AF+0xe4>)
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bbc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bcc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fc5d 	bl	800148e <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fd fb5d 	bl	8000294 <HAL_I2C_SlaveTxCpltCallback>
}
 8002bda:	e004      	b.n	8002be6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be4:	615a      	str	r2, [r3, #20]
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d002      	beq.n	8002c18 <I2C_ITError+0x24>
 8002c12:	7bbb      	ldrb	r3, [r7, #14]
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d10a      	bne.n	8002c2e <I2C_ITError+0x3a>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b22      	cmp	r3, #34	; 0x22
 8002c1c:	d107      	bne.n	8002c2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c34:	2b28      	cmp	r3, #40	; 0x28
 8002c36:	d107      	bne.n	8002c48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2228      	movs	r2, #40	; 0x28
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c46:	e015      	b.n	8002c74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c56:	d00a      	beq.n	8002c6e <I2C_ITError+0x7a>
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b60      	cmp	r3, #96	; 0x60
 8002c5c:	d007      	beq.n	8002c6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c82:	d162      	bne.n	8002d4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d020      	beq.n	8002ce4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <I2C_ITError+0x25c>)
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd ffb4 	bl	8000c1c <HAL_DMA_Abort_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8089 	beq.w	8002dce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4798      	blx	r3
 8002ce2:	e074      	b.n	8002dce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	4a59      	ldr	r2, [pc, #356]	; (8002e50 <I2C_ITError+0x25c>)
 8002cea:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd ff93 	bl	8000c1c <HAL_DMA_Abort_IT>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d068      	beq.n	8002dce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d10b      	bne.n	8002d22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d44:	4610      	mov	r0, r2
 8002d46:	4798      	blx	r3
 8002d48:	e041      	b.n	8002dce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b60      	cmp	r3, #96	; 0x60
 8002d54:	d125      	bne.n	8002da2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d10b      	bne.n	8002d8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fec2 	bl	8001b24 <HAL_I2C_AbortCpltCallback>
 8002da0:	e015      	b.n	8002dce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d10b      	bne.n	8002dc8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fabb 	bl	8000344 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10e      	bne.n	8002dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d113      	bne.n	8002e48 <I2C_ITError+0x254>
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b28      	cmp	r3, #40	; 0x28
 8002e24:	d110      	bne.n	8002e48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <I2C_ITError+0x260>)
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd f9d8 	bl	80001f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	08002e59 	.word	0x08002e59
 8002e54:	ffff0000 	.word	0xffff0000

08002e58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e72:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <I2C_DMAAbort+0x148>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	08db      	lsrs	r3, r3, #3
 8002e78:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <I2C_DMAAbort+0x14c>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0a1a      	lsrs	r2, r3, #8
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00da      	lsls	r2, r3, #3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e9e:	e00a      	b.n	8002eb6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d0ea      	beq.n	8002e8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2200      	movs	r2, #0
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b60      	cmp	r3, #96	; 0x60
 8002f26:	d10e      	bne.n	8002f46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7fe fdf0 	bl	8001b24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f44:	e027      	b.n	8002f96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f4c:	2b28      	cmp	r3, #40	; 0x28
 8002f4e:	d117      	bne.n	8002f80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2228      	movs	r2, #40	; 0x28
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f7e:	e007      	b.n	8002f90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f7fd f9d7 	bl	8000344 <HAL_I2C_ErrorCallback>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	14f8b589 	.word	0x14f8b589

08002fa8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0a1a      	lsrs	r2, r3, #8
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e008      	b.n	8002ff8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d0e9      	beq.n	8002fca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000
 8003008:	14f8b589 	.word	0x14f8b589

0800300c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800301c:	d103      	bne.n	8003026 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003024:	e007      	b.n	8003036 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800302e:	d102      	bne.n	8003036 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2208      	movs	r2, #8
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e272      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800306c:	4b8f      	ldr	r3, [pc, #572]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
 8003078:	4b8c      	ldr	r3, [pc, #560]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x12c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e24c      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x76>
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b7b      	ldr	r3, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b78      	ldr	r3, [pc, #480]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a77      	ldr	r2, [pc, #476]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xbc>
 80030e2:	4b72      	ldr	r3, [pc, #456]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a71      	ldr	r2, [pc, #452]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a67      	ldr	r2, [pc, #412]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fd fc34 	bl	8000988 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fd fc30 	bl	8000988 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e200      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe4>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd fc20 	bl	8000988 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fd fc1c 	bl	8000988 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1ec      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x10c>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
 8003192:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c0      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd fbd5 	bl	8000988 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e2:	f7fd fbd1 	bl	8000988 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4927      	ldr	r1, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fbb4 	bl	8000988 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fd fbb0 	bl	8000988 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e180      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03a      	beq.n	80032c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fd fb94 	bl	8000988 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fd fb90 	bl	8000988 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e160      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 faba 	bl	80037fc <RCC_Delay>
 8003288:	e01c      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fd fb7a 	bl	8000988 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fb76 	bl	8000988 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e146      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	42420000 	.word	0x42420000
 80032b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b92      	ldr	r3, [pc, #584]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e9      	bne.n	8003298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a6 	beq.w	800341e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a87      	ldr	r2, [pc, #540]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fd fb37 	bl	8000988 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fd fb33 	bl	8000988 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e103      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b75      	ldr	r3, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x312>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e02d      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x334>
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a69      	ldr	r2, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a66      	ldr	r2, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x356>
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b58      	ldr	r3, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a57      	ldr	r2, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fd fae7 	bl	8000988 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fd fae3 	bl	8000988 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0b1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x37e>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fd fad1 	bl	8000988 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd facd 	bl	8000988 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e09b      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d061      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d146      	bne.n	80034ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd faa1 	bl	8000988 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fd fa9d 	bl	8000988 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e06d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4921      	ldr	r1, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a19      	ldr	r1, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	491b      	ldr	r1, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fd fa71 	bl	8000988 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fd fa6d 	bl	8000988 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x46a>
 80034c8:	e035      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fd fa5a 	bl	8000988 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fd fa56 	bl	8000988 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e026      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x498>
 80034f6:	e01e      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e019      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x500>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d0      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4965      	ldr	r1, [pc, #404]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d040      	beq.n	8003664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e073      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4936      	ldr	r1, [pc, #216]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7fd f9a8 	bl	8000988 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fd f9a4 	bl	8000988 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e053      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d210      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4922      	ldr	r1, [pc, #136]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd f906 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	080047a4 	.word	0x080047a4
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x30>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x36>
 8003746:	e027      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	613b      	str	r3, [r7, #16]
      break;
 800374c:	e027      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003758:	5cd3      	ldrb	r3, [r2, r3]
 800375a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0c5b      	lsrs	r3, r3, #17
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800377a:	fb03 f202 	mul.w	r2, r3, r2
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e004      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	613b      	str	r3, [r7, #16]
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	693b      	ldr	r3, [r7, #16]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	007a1200 	.word	0x007a1200
 80037b4:	080047bc 	.word	0x080047bc
 80037b8:	080047cc 	.word	0x080047cc
 80037bc:	003d0900 	.word	0x003d0900

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080047b4 	.word	0x080047b4

080037fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <RCC_Delay+0x34>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <RCC_Delay+0x38>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003818:	bf00      	nop
  }
  while (Delay --);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	60fa      	str	r2, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f9      	bne.n	8003818 <RCC_Delay+0x1c>
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	20000000 	.word	0x20000000
 8003834:	10624dd3 	.word	0x10624dd3

08003838 <std>:
 8003838:	2300      	movs	r3, #0
 800383a:	b510      	push	{r4, lr}
 800383c:	4604      	mov	r4, r0
 800383e:	e9c0 3300 	strd	r3, r3, [r0]
 8003842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003846:	6083      	str	r3, [r0, #8]
 8003848:	8181      	strh	r1, [r0, #12]
 800384a:	6643      	str	r3, [r0, #100]	; 0x64
 800384c:	81c2      	strh	r2, [r0, #14]
 800384e:	6183      	str	r3, [r0, #24]
 8003850:	4619      	mov	r1, r3
 8003852:	2208      	movs	r2, #8
 8003854:	305c      	adds	r0, #92	; 0x5c
 8003856:	f000 f9f7 	bl	8003c48 <memset>
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <std+0x58>)
 800385c:	6224      	str	r4, [r4, #32]
 800385e:	6263      	str	r3, [r4, #36]	; 0x24
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <std+0x5c>)
 8003862:	62a3      	str	r3, [r4, #40]	; 0x28
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <std+0x60>)
 8003866:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <std+0x64>)
 800386a:	6323      	str	r3, [r4, #48]	; 0x30
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <std+0x68>)
 800386e:	429c      	cmp	r4, r3
 8003870:	d006      	beq.n	8003880 <std+0x48>
 8003872:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003876:	4294      	cmp	r4, r2
 8003878:	d002      	beq.n	8003880 <std+0x48>
 800387a:	33d0      	adds	r3, #208	; 0xd0
 800387c:	429c      	cmp	r4, r3
 800387e:	d105      	bne.n	800388c <std+0x54>
 8003880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003888:	f000 ba56 	b.w	8003d38 <__retarget_lock_init_recursive>
 800388c:	bd10      	pop	{r4, pc}
 800388e:	bf00      	nop
 8003890:	08003a99 	.word	0x08003a99
 8003894:	08003abb 	.word	0x08003abb
 8003898:	08003af3 	.word	0x08003af3
 800389c:	08003b17 	.word	0x08003b17
 80038a0:	200001b4 	.word	0x200001b4

080038a4 <stdio_exit_handler>:
 80038a4:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <stdio_exit_handler+0xc>)
 80038a6:	4903      	ldr	r1, [pc, #12]	; (80038b4 <stdio_exit_handler+0x10>)
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <stdio_exit_handler+0x14>)
 80038aa:	f000 b869 	b.w	8003980 <_fwalk_sglue>
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	080045d9 	.word	0x080045d9
 80038b8:	20000018 	.word	0x20000018

080038bc <cleanup_stdio>:
 80038bc:	6841      	ldr	r1, [r0, #4]
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <cleanup_stdio+0x34>)
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4299      	cmp	r1, r3
 80038c4:	4604      	mov	r4, r0
 80038c6:	d001      	beq.n	80038cc <cleanup_stdio+0x10>
 80038c8:	f000 fe86 	bl	80045d8 <_fflush_r>
 80038cc:	68a1      	ldr	r1, [r4, #8]
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <cleanup_stdio+0x38>)
 80038d0:	4299      	cmp	r1, r3
 80038d2:	d002      	beq.n	80038da <cleanup_stdio+0x1e>
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 fe7f 	bl	80045d8 <_fflush_r>
 80038da:	68e1      	ldr	r1, [r4, #12]
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <cleanup_stdio+0x3c>)
 80038de:	4299      	cmp	r1, r3
 80038e0:	d004      	beq.n	80038ec <cleanup_stdio+0x30>
 80038e2:	4620      	mov	r0, r4
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f000 be76 	b.w	80045d8 <_fflush_r>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	200001b4 	.word	0x200001b4
 80038f4:	2000021c 	.word	0x2000021c
 80038f8:	20000284 	.word	0x20000284

080038fc <global_stdio_init.part.0>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <global_stdio_init.part.0+0x30>)
 8003900:	4c0b      	ldr	r4, [pc, #44]	; (8003930 <global_stdio_init.part.0+0x34>)
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <global_stdio_init.part.0+0x38>)
 8003904:	4620      	mov	r0, r4
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	2104      	movs	r1, #4
 800390a:	2200      	movs	r2, #0
 800390c:	f7ff ff94 	bl	8003838 <std>
 8003910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003914:	2201      	movs	r2, #1
 8003916:	2109      	movs	r1, #9
 8003918:	f7ff ff8e 	bl	8003838 <std>
 800391c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003920:	2202      	movs	r2, #2
 8003922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003926:	2112      	movs	r1, #18
 8003928:	f7ff bf86 	b.w	8003838 <std>
 800392c:	200002ec 	.word	0x200002ec
 8003930:	200001b4 	.word	0x200001b4
 8003934:	080038a5 	.word	0x080038a5

08003938 <__sfp_lock_acquire>:
 8003938:	4801      	ldr	r0, [pc, #4]	; (8003940 <__sfp_lock_acquire+0x8>)
 800393a:	f000 b9fe 	b.w	8003d3a <__retarget_lock_acquire_recursive>
 800393e:	bf00      	nop
 8003940:	200002f5 	.word	0x200002f5

08003944 <__sfp_lock_release>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__sfp_lock_release+0x8>)
 8003946:	f000 b9f9 	b.w	8003d3c <__retarget_lock_release_recursive>
 800394a:	bf00      	nop
 800394c:	200002f5 	.word	0x200002f5

08003950 <__sinit>:
 8003950:	b510      	push	{r4, lr}
 8003952:	4604      	mov	r4, r0
 8003954:	f7ff fff0 	bl	8003938 <__sfp_lock_acquire>
 8003958:	6a23      	ldr	r3, [r4, #32]
 800395a:	b11b      	cbz	r3, 8003964 <__sinit+0x14>
 800395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003960:	f7ff bff0 	b.w	8003944 <__sfp_lock_release>
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__sinit+0x28>)
 8003966:	6223      	str	r3, [r4, #32]
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <__sinit+0x2c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f5      	bne.n	800395c <__sinit+0xc>
 8003970:	f7ff ffc4 	bl	80038fc <global_stdio_init.part.0>
 8003974:	e7f2      	b.n	800395c <__sinit+0xc>
 8003976:	bf00      	nop
 8003978:	080038bd 	.word	0x080038bd
 800397c:	200002ec 	.word	0x200002ec

08003980 <_fwalk_sglue>:
 8003980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003984:	4607      	mov	r7, r0
 8003986:	4688      	mov	r8, r1
 8003988:	4614      	mov	r4, r2
 800398a:	2600      	movs	r6, #0
 800398c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003990:	f1b9 0901 	subs.w	r9, r9, #1
 8003994:	d505      	bpl.n	80039a2 <_fwalk_sglue+0x22>
 8003996:	6824      	ldr	r4, [r4, #0]
 8003998:	2c00      	cmp	r4, #0
 800399a:	d1f7      	bne.n	800398c <_fwalk_sglue+0xc>
 800399c:	4630      	mov	r0, r6
 800399e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d907      	bls.n	80039b8 <_fwalk_sglue+0x38>
 80039a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039ac:	3301      	adds	r3, #1
 80039ae:	d003      	beq.n	80039b8 <_fwalk_sglue+0x38>
 80039b0:	4629      	mov	r1, r5
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	4306      	orrs	r6, r0
 80039b8:	3568      	adds	r5, #104	; 0x68
 80039ba:	e7e9      	b.n	8003990 <_fwalk_sglue+0x10>

080039bc <iprintf>:
 80039bc:	b40f      	push	{r0, r1, r2, r3}
 80039be:	b507      	push	{r0, r1, r2, lr}
 80039c0:	4906      	ldr	r1, [pc, #24]	; (80039dc <iprintf+0x20>)
 80039c2:	ab04      	add	r3, sp, #16
 80039c4:	6808      	ldr	r0, [r1, #0]
 80039c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ca:	6881      	ldr	r1, [r0, #8]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f000 fad3 	bl	8003f78 <_vfiprintf_r>
 80039d2:	b003      	add	sp, #12
 80039d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d8:	b004      	add	sp, #16
 80039da:	4770      	bx	lr
 80039dc:	20000064 	.word	0x20000064

080039e0 <_puts_r>:
 80039e0:	6a03      	ldr	r3, [r0, #32]
 80039e2:	b570      	push	{r4, r5, r6, lr}
 80039e4:	4605      	mov	r5, r0
 80039e6:	460e      	mov	r6, r1
 80039e8:	6884      	ldr	r4, [r0, #8]
 80039ea:	b90b      	cbnz	r3, 80039f0 <_puts_r+0x10>
 80039ec:	f7ff ffb0 	bl	8003950 <__sinit>
 80039f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039f2:	07db      	lsls	r3, r3, #31
 80039f4:	d405      	bmi.n	8003a02 <_puts_r+0x22>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	0598      	lsls	r0, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_puts_r+0x22>
 80039fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039fe:	f000 f99c 	bl	8003d3a <__retarget_lock_acquire_recursive>
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	0719      	lsls	r1, r3, #28
 8003a06:	d513      	bpl.n	8003a30 <_puts_r+0x50>
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	b18b      	cbz	r3, 8003a30 <_puts_r+0x50>
 8003a0c:	3e01      	subs	r6, #1
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60a3      	str	r3, [r4, #8]
 8003a18:	b9e9      	cbnz	r1, 8003a56 <_puts_r+0x76>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da2e      	bge.n	8003a7c <_puts_r+0x9c>
 8003a1e:	4622      	mov	r2, r4
 8003a20:	210a      	movs	r1, #10
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 f87b 	bl	8003b1e <__swbuf_r>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d007      	beq.n	8003a3c <_puts_r+0x5c>
 8003a2c:	250a      	movs	r5, #10
 8003a2e:	e007      	b.n	8003a40 <_puts_r+0x60>
 8003a30:	4621      	mov	r1, r4
 8003a32:	4628      	mov	r0, r5
 8003a34:	f000 f8b0 	bl	8003b98 <__swsetup_r>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d0e7      	beq.n	8003a0c <_puts_r+0x2c>
 8003a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8003a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a42:	07da      	lsls	r2, r3, #31
 8003a44:	d405      	bmi.n	8003a52 <_puts_r+0x72>
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	059b      	lsls	r3, r3, #22
 8003a4a:	d402      	bmi.n	8003a52 <_puts_r+0x72>
 8003a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a4e:	f000 f975 	bl	8003d3c <__retarget_lock_release_recursive>
 8003a52:	4628      	mov	r0, r5
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da04      	bge.n	8003a64 <_puts_r+0x84>
 8003a5a:	69a2      	ldr	r2, [r4, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dc06      	bgt.n	8003a6e <_puts_r+0x8e>
 8003a60:	290a      	cmp	r1, #10
 8003a62:	d004      	beq.n	8003a6e <_puts_r+0x8e>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	6022      	str	r2, [r4, #0]
 8003a6a:	7019      	strb	r1, [r3, #0]
 8003a6c:	e7cf      	b.n	8003a0e <_puts_r+0x2e>
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4628      	mov	r0, r5
 8003a72:	f000 f854 	bl	8003b1e <__swbuf_r>
 8003a76:	3001      	adds	r0, #1
 8003a78:	d1c9      	bne.n	8003a0e <_puts_r+0x2e>
 8003a7a:	e7df      	b.n	8003a3c <_puts_r+0x5c>
 8003a7c:	250a      	movs	r5, #10
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	701d      	strb	r5, [r3, #0]
 8003a86:	e7db      	b.n	8003a40 <_puts_r+0x60>

08003a88 <puts>:
 8003a88:	4b02      	ldr	r3, [pc, #8]	; (8003a94 <puts+0xc>)
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	f7ff bfa7 	b.w	80039e0 <_puts_r>
 8003a92:	bf00      	nop
 8003a94:	20000064 	.word	0x20000064

08003a98 <__sread>:
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa0:	f000 f8fc 	bl	8003c9c <_read_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	bfab      	itete	ge
 8003aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8003aac:	181b      	addge	r3, r3, r0
 8003aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ab2:	bfac      	ite	ge
 8003ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ab6:	81a3      	strhlt	r3, [r4, #12]
 8003ab8:	bd10      	pop	{r4, pc}

08003aba <__swrite>:
 8003aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abe:	461f      	mov	r7, r3
 8003ac0:	898b      	ldrh	r3, [r1, #12]
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	05db      	lsls	r3, r3, #23
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	4616      	mov	r6, r2
 8003aca:	d505      	bpl.n	8003ad8 <__swrite+0x1e>
 8003acc:	2302      	movs	r3, #2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad4:	f000 f8d0 	bl	8003c78 <_lseek_r>
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	4632      	mov	r2, r6
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aee:	f000 b8e7 	b.w	8003cc0 <_write_r>

08003af2 <__sseek>:
 8003af2:	b510      	push	{r4, lr}
 8003af4:	460c      	mov	r4, r1
 8003af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afa:	f000 f8bd 	bl	8003c78 <_lseek_r>
 8003afe:	1c43      	adds	r3, r0, #1
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	bf15      	itete	ne
 8003b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b0e:	81a3      	strheq	r3, [r4, #12]
 8003b10:	bf18      	it	ne
 8003b12:	81a3      	strhne	r3, [r4, #12]
 8003b14:	bd10      	pop	{r4, pc}

08003b16 <__sclose>:
 8003b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1a:	f000 b89d 	b.w	8003c58 <_close_r>

08003b1e <__swbuf_r>:
 8003b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b20:	460e      	mov	r6, r1
 8003b22:	4614      	mov	r4, r2
 8003b24:	4605      	mov	r5, r0
 8003b26:	b118      	cbz	r0, 8003b30 <__swbuf_r+0x12>
 8003b28:	6a03      	ldr	r3, [r0, #32]
 8003b2a:	b90b      	cbnz	r3, 8003b30 <__swbuf_r+0x12>
 8003b2c:	f7ff ff10 	bl	8003950 <__sinit>
 8003b30:	69a3      	ldr	r3, [r4, #24]
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	071a      	lsls	r2, r3, #28
 8003b38:	d525      	bpl.n	8003b86 <__swbuf_r+0x68>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	b31b      	cbz	r3, 8003b86 <__swbuf_r+0x68>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	6922      	ldr	r2, [r4, #16]
 8003b42:	b2f6      	uxtb	r6, r6
 8003b44:	1a98      	subs	r0, r3, r2
 8003b46:	6963      	ldr	r3, [r4, #20]
 8003b48:	4637      	mov	r7, r6
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	dc04      	bgt.n	8003b58 <__swbuf_r+0x3a>
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 fd41 	bl	80045d8 <_fflush_r>
 8003b56:	b9e0      	cbnz	r0, 8003b92 <__swbuf_r+0x74>
 8003b58:	68a3      	ldr	r3, [r4, #8]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	6022      	str	r2, [r4, #0]
 8003b64:	701e      	strb	r6, [r3, #0]
 8003b66:	6962      	ldr	r2, [r4, #20]
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d004      	beq.n	8003b78 <__swbuf_r+0x5a>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	07db      	lsls	r3, r3, #31
 8003b72:	d506      	bpl.n	8003b82 <__swbuf_r+0x64>
 8003b74:	2e0a      	cmp	r6, #10
 8003b76:	d104      	bne.n	8003b82 <__swbuf_r+0x64>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fd2c 	bl	80045d8 <_fflush_r>
 8003b80:	b938      	cbnz	r0, 8003b92 <__swbuf_r+0x74>
 8003b82:	4638      	mov	r0, r7
 8003b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b86:	4621      	mov	r1, r4
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f000 f805 	bl	8003b98 <__swsetup_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0d5      	beq.n	8003b3e <__swbuf_r+0x20>
 8003b92:	f04f 37ff 	mov.w	r7, #4294967295
 8003b96:	e7f4      	b.n	8003b82 <__swbuf_r+0x64>

08003b98 <__swsetup_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <__swsetup_r+0xac>)
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	b118      	cbz	r0, 8003bac <__swsetup_r+0x14>
 8003ba4:	6a03      	ldr	r3, [r0, #32]
 8003ba6:	b90b      	cbnz	r3, 8003bac <__swsetup_r+0x14>
 8003ba8:	f7ff fed2 	bl	8003950 <__sinit>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bb2:	0718      	lsls	r0, r3, #28
 8003bb4:	d422      	bmi.n	8003bfc <__swsetup_r+0x64>
 8003bb6:	06d9      	lsls	r1, r3, #27
 8003bb8:	d407      	bmi.n	8003bca <__swsetup_r+0x32>
 8003bba:	2309      	movs	r3, #9
 8003bbc:	602b      	str	r3, [r5, #0]
 8003bbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	e034      	b.n	8003c34 <__swsetup_r+0x9c>
 8003bca:	0758      	lsls	r0, r3, #29
 8003bcc:	d512      	bpl.n	8003bf4 <__swsetup_r+0x5c>
 8003bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bd0:	b141      	cbz	r1, 8003be4 <__swsetup_r+0x4c>
 8003bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bd6:	4299      	cmp	r1, r3
 8003bd8:	d002      	beq.n	8003be0 <__swsetup_r+0x48>
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f8b0 	bl	8003d40 <_free_r>
 8003be0:	2300      	movs	r3, #0
 8003be2:	6363      	str	r3, [r4, #52]	; 0x34
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	2300      	movs	r3, #0
 8003bee:	6063      	str	r3, [r4, #4]
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	6023      	str	r3, [r4, #0]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f043 0308 	orr.w	r3, r3, #8
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	b94b      	cbnz	r3, 8003c14 <__swsetup_r+0x7c>
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d003      	beq.n	8003c14 <__swsetup_r+0x7c>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f000 fd2f 	bl	8004672 <__smakebuf_r>
 8003c14:	89a0      	ldrh	r0, [r4, #12]
 8003c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c1a:	f010 0301 	ands.w	r3, r0, #1
 8003c1e:	d00a      	beq.n	8003c36 <__swsetup_r+0x9e>
 8003c20:	2300      	movs	r3, #0
 8003c22:	60a3      	str	r3, [r4, #8]
 8003c24:	6963      	ldr	r3, [r4, #20]
 8003c26:	425b      	negs	r3, r3
 8003c28:	61a3      	str	r3, [r4, #24]
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	b943      	cbnz	r3, 8003c40 <__swsetup_r+0xa8>
 8003c2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c32:	d1c4      	bne.n	8003bbe <__swsetup_r+0x26>
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
 8003c36:	0781      	lsls	r1, r0, #30
 8003c38:	bf58      	it	pl
 8003c3a:	6963      	ldrpl	r3, [r4, #20]
 8003c3c:	60a3      	str	r3, [r4, #8]
 8003c3e:	e7f4      	b.n	8003c2a <__swsetup_r+0x92>
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7f7      	b.n	8003c34 <__swsetup_r+0x9c>
 8003c44:	20000064 	.word	0x20000064

08003c48 <memset>:
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4402      	add	r2, r0
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	f803 1b01 	strb.w	r1, [r3], #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <_close_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4d05      	ldr	r5, [pc, #20]	; (8003c74 <_close_r+0x1c>)
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	f7fc fda5 	bl	80007b2 <_close>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_close_r+0x1a>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_close_r+0x1a>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200002f0 	.word	0x200002f0

08003c78 <_lseek_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	2200      	movs	r2, #0
 8003c82:	4d05      	ldr	r5, [pc, #20]	; (8003c98 <_lseek_r+0x20>)
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7fc fdb7 	bl	80007fa <_lseek>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_lseek_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_lseek_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	200002f0 	.word	0x200002f0

08003c9c <_read_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4d05      	ldr	r5, [pc, #20]	; (8003cbc <_read_r+0x20>)
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7fc fd64 	bl	8000778 <_read>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_read_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_read_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	200002f0 	.word	0x200002f0

08003cc0 <_write_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_write_r+0x20>)
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fc fba6 	bl	8000420 <_write>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_write_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_write_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200002f0 	.word	0x200002f0

08003ce4 <__errno>:
 8003ce4:	4b01      	ldr	r3, [pc, #4]	; (8003cec <__errno+0x8>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000064 	.word	0x20000064

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	4d0c      	ldr	r5, [pc, #48]	; (8003d28 <__libc_init_array+0x38>)
 8003cf6:	4c0d      	ldr	r4, [pc, #52]	; (8003d2c <__libc_init_array+0x3c>)
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	f000 fd34 	bl	800476c <_init>
 8003d04:	2600      	movs	r6, #0
 8003d06:	4d0a      	ldr	r5, [pc, #40]	; (8003d30 <__libc_init_array+0x40>)
 8003d08:	4c0a      	ldr	r4, [pc, #40]	; (8003d34 <__libc_init_array+0x44>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08004804 	.word	0x08004804
 8003d2c:	08004804 	.word	0x08004804
 8003d30:	08004804 	.word	0x08004804
 8003d34:	08004808 	.word	0x08004808

08003d38 <__retarget_lock_init_recursive>:
 8003d38:	4770      	bx	lr

08003d3a <__retarget_lock_acquire_recursive>:
 8003d3a:	4770      	bx	lr

08003d3c <__retarget_lock_release_recursive>:
 8003d3c:	4770      	bx	lr
	...

08003d40 <_free_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4605      	mov	r5, r0
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d040      	beq.n	8003dca <_free_r+0x8a>
 8003d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4c:	1f0c      	subs	r4, r1, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfb8      	it	lt
 8003d52:	18e4      	addlt	r4, r4, r3
 8003d54:	f000 f8dc 	bl	8003f10 <__malloc_lock>
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <_free_r+0x8c>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	b933      	cbnz	r3, 8003d6c <_free_r+0x2c>
 8003d5e:	6063      	str	r3, [r4, #4]
 8003d60:	6014      	str	r4, [r2, #0]
 8003d62:	4628      	mov	r0, r5
 8003d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d68:	f000 b8d8 	b.w	8003f1c <__malloc_unlock>
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d908      	bls.n	8003d82 <_free_r+0x42>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	1821      	adds	r1, r4, r0
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf01      	itttt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	1809      	addeq	r1, r1, r0
 8003d7e:	6021      	streq	r1, [r4, #0]
 8003d80:	e7ed      	b.n	8003d5e <_free_r+0x1e>
 8003d82:	461a      	mov	r2, r3
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b10b      	cbz	r3, 8003d8c <_free_r+0x4c>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d9fa      	bls.n	8003d82 <_free_r+0x42>
 8003d8c:	6811      	ldr	r1, [r2, #0]
 8003d8e:	1850      	adds	r0, r2, r1
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d10b      	bne.n	8003dac <_free_r+0x6c>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	4401      	add	r1, r0
 8003d98:	1850      	adds	r0, r2, r1
 8003d9a:	4283      	cmp	r3, r0
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	d1e0      	bne.n	8003d62 <_free_r+0x22>
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4408      	add	r0, r1
 8003da6:	6010      	str	r0, [r2, #0]
 8003da8:	6053      	str	r3, [r2, #4]
 8003daa:	e7da      	b.n	8003d62 <_free_r+0x22>
 8003dac:	d902      	bls.n	8003db4 <_free_r+0x74>
 8003dae:	230c      	movs	r3, #12
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	e7d6      	b.n	8003d62 <_free_r+0x22>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	1821      	adds	r1, r4, r0
 8003db8:	428b      	cmp	r3, r1
 8003dba:	bf01      	itttt	eq
 8003dbc:	6819      	ldreq	r1, [r3, #0]
 8003dbe:	685b      	ldreq	r3, [r3, #4]
 8003dc0:	1809      	addeq	r1, r1, r0
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	6054      	str	r4, [r2, #4]
 8003dc8:	e7cb      	b.n	8003d62 <_free_r+0x22>
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	200002f8 	.word	0x200002f8

08003dd0 <sbrk_aligned>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4e0e      	ldr	r6, [pc, #56]	; (8003e0c <sbrk_aligned+0x3c>)
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	6831      	ldr	r1, [r6, #0]
 8003dd8:	4605      	mov	r5, r0
 8003dda:	b911      	cbnz	r1, 8003de2 <sbrk_aligned+0x12>
 8003ddc:	f000 fca8 	bl	8004730 <_sbrk_r>
 8003de0:	6030      	str	r0, [r6, #0]
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 fca3 	bl	8004730 <_sbrk_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	d00a      	beq.n	8003e04 <sbrk_aligned+0x34>
 8003dee:	1cc4      	adds	r4, r0, #3
 8003df0:	f024 0403 	bic.w	r4, r4, #3
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d007      	beq.n	8003e08 <sbrk_aligned+0x38>
 8003df8:	1a21      	subs	r1, r4, r0
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 fc98 	bl	8004730 <_sbrk_r>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d101      	bne.n	8003e08 <sbrk_aligned+0x38>
 8003e04:	f04f 34ff 	mov.w	r4, #4294967295
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	200002fc 	.word	0x200002fc

08003e10 <_malloc_r>:
 8003e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e14:	1ccd      	adds	r5, r1, #3
 8003e16:	f025 0503 	bic.w	r5, r5, #3
 8003e1a:	3508      	adds	r5, #8
 8003e1c:	2d0c      	cmp	r5, #12
 8003e1e:	bf38      	it	cc
 8003e20:	250c      	movcc	r5, #12
 8003e22:	2d00      	cmp	r5, #0
 8003e24:	4607      	mov	r7, r0
 8003e26:	db01      	blt.n	8003e2c <_malloc_r+0x1c>
 8003e28:	42a9      	cmp	r1, r5
 8003e2a:	d905      	bls.n	8003e38 <_malloc_r+0x28>
 8003e2c:	230c      	movs	r3, #12
 8003e2e:	2600      	movs	r6, #0
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4630      	mov	r0, r6
 8003e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f0c <_malloc_r+0xfc>
 8003e3c:	f000 f868 	bl	8003f10 <__malloc_lock>
 8003e40:	f8d8 3000 	ldr.w	r3, [r8]
 8003e44:	461c      	mov	r4, r3
 8003e46:	bb5c      	cbnz	r4, 8003ea0 <_malloc_r+0x90>
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	f7ff ffc0 	bl	8003dd0 <sbrk_aligned>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	4604      	mov	r4, r0
 8003e54:	d155      	bne.n	8003f02 <_malloc_r+0xf2>
 8003e56:	f8d8 4000 	ldr.w	r4, [r8]
 8003e5a:	4626      	mov	r6, r4
 8003e5c:	2e00      	cmp	r6, #0
 8003e5e:	d145      	bne.n	8003eec <_malloc_r+0xdc>
 8003e60:	2c00      	cmp	r4, #0
 8003e62:	d048      	beq.n	8003ef6 <_malloc_r+0xe6>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	4631      	mov	r1, r6
 8003e68:	4638      	mov	r0, r7
 8003e6a:	eb04 0903 	add.w	r9, r4, r3
 8003e6e:	f000 fc5f 	bl	8004730 <_sbrk_r>
 8003e72:	4581      	cmp	r9, r0
 8003e74:	d13f      	bne.n	8003ef6 <_malloc_r+0xe6>
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	4638      	mov	r0, r7
 8003e7a:	1a6d      	subs	r5, r5, r1
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f7ff ffa7 	bl	8003dd0 <sbrk_aligned>
 8003e82:	3001      	adds	r0, #1
 8003e84:	d037      	beq.n	8003ef6 <_malloc_r+0xe6>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	442b      	add	r3, r5
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d038      	beq.n	8003f06 <_malloc_r+0xf6>
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	42a2      	cmp	r2, r4
 8003e98:	d12b      	bne.n	8003ef2 <_malloc_r+0xe2>
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e00f      	b.n	8003ec0 <_malloc_r+0xb0>
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	1b52      	subs	r2, r2, r5
 8003ea4:	d41f      	bmi.n	8003ee6 <_malloc_r+0xd6>
 8003ea6:	2a0b      	cmp	r2, #11
 8003ea8:	d917      	bls.n	8003eda <_malloc_r+0xca>
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	6025      	str	r5, [r4, #0]
 8003eb0:	bf18      	it	ne
 8003eb2:	6059      	strne	r1, [r3, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	bf08      	it	eq
 8003eb8:	f8c8 1000 	streq.w	r1, [r8]
 8003ebc:	5162      	str	r2, [r4, r5]
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	f104 060b 	add.w	r6, r4, #11
 8003ec6:	f000 f829 	bl	8003f1c <__malloc_unlock>
 8003eca:	f026 0607 	bic.w	r6, r6, #7
 8003ece:	1d23      	adds	r3, r4, #4
 8003ed0:	1af2      	subs	r2, r6, r3
 8003ed2:	d0ae      	beq.n	8003e32 <_malloc_r+0x22>
 8003ed4:	1b9b      	subs	r3, r3, r6
 8003ed6:	50a3      	str	r3, [r4, r2]
 8003ed8:	e7ab      	b.n	8003e32 <_malloc_r+0x22>
 8003eda:	42a3      	cmp	r3, r4
 8003edc:	6862      	ldr	r2, [r4, #4]
 8003ede:	d1dd      	bne.n	8003e9c <_malloc_r+0x8c>
 8003ee0:	f8c8 2000 	str.w	r2, [r8]
 8003ee4:	e7ec      	b.n	8003ec0 <_malloc_r+0xb0>
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	6864      	ldr	r4, [r4, #4]
 8003eea:	e7ac      	b.n	8003e46 <_malloc_r+0x36>
 8003eec:	4634      	mov	r4, r6
 8003eee:	6876      	ldr	r6, [r6, #4]
 8003ef0:	e7b4      	b.n	8003e5c <_malloc_r+0x4c>
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	e7cc      	b.n	8003e90 <_malloc_r+0x80>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	4638      	mov	r0, r7
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	f000 f80e 	bl	8003f1c <__malloc_unlock>
 8003f00:	e797      	b.n	8003e32 <_malloc_r+0x22>
 8003f02:	6025      	str	r5, [r4, #0]
 8003f04:	e7dc      	b.n	8003ec0 <_malloc_r+0xb0>
 8003f06:	605b      	str	r3, [r3, #4]
 8003f08:	deff      	udf	#255	; 0xff
 8003f0a:	bf00      	nop
 8003f0c:	200002f8 	.word	0x200002f8

08003f10 <__malloc_lock>:
 8003f10:	4801      	ldr	r0, [pc, #4]	; (8003f18 <__malloc_lock+0x8>)
 8003f12:	f7ff bf12 	b.w	8003d3a <__retarget_lock_acquire_recursive>
 8003f16:	bf00      	nop
 8003f18:	200002f4 	.word	0x200002f4

08003f1c <__malloc_unlock>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	; (8003f24 <__malloc_unlock+0x8>)
 8003f1e:	f7ff bf0d 	b.w	8003d3c <__retarget_lock_release_recursive>
 8003f22:	bf00      	nop
 8003f24:	200002f4 	.word	0x200002f4

08003f28 <__sfputc_r>:
 8003f28:	6893      	ldr	r3, [r2, #8]
 8003f2a:	b410      	push	{r4}
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	6093      	str	r3, [r2, #8]
 8003f32:	da07      	bge.n	8003f44 <__sfputc_r+0x1c>
 8003f34:	6994      	ldr	r4, [r2, #24]
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	db01      	blt.n	8003f3e <__sfputc_r+0x16>
 8003f3a:	290a      	cmp	r1, #10
 8003f3c:	d102      	bne.n	8003f44 <__sfputc_r+0x1c>
 8003f3e:	bc10      	pop	{r4}
 8003f40:	f7ff bded 	b.w	8003b1e <__swbuf_r>
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	1c58      	adds	r0, r3, #1
 8003f48:	6010      	str	r0, [r2, #0]
 8003f4a:	7019      	strb	r1, [r3, #0]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	bc10      	pop	{r4}
 8003f50:	4770      	bx	lr

08003f52 <__sfputs_r>:
 8003f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f54:	4606      	mov	r6, r0
 8003f56:	460f      	mov	r7, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	18d5      	adds	r5, r2, r3
 8003f5c:	42ac      	cmp	r4, r5
 8003f5e:	d101      	bne.n	8003f64 <__sfputs_r+0x12>
 8003f60:	2000      	movs	r0, #0
 8003f62:	e007      	b.n	8003f74 <__sfputs_r+0x22>
 8003f64:	463a      	mov	r2, r7
 8003f66:	4630      	mov	r0, r6
 8003f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6c:	f7ff ffdc 	bl	8003f28 <__sfputc_r>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d1f3      	bne.n	8003f5c <__sfputs_r+0xa>
 8003f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f78 <_vfiprintf_r>:
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	4614      	mov	r4, r2
 8003f80:	4698      	mov	r8, r3
 8003f82:	4606      	mov	r6, r0
 8003f84:	b09d      	sub	sp, #116	; 0x74
 8003f86:	b118      	cbz	r0, 8003f90 <_vfiprintf_r+0x18>
 8003f88:	6a03      	ldr	r3, [r0, #32]
 8003f8a:	b90b      	cbnz	r3, 8003f90 <_vfiprintf_r+0x18>
 8003f8c:	f7ff fce0 	bl	8003950 <__sinit>
 8003f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_vfiprintf_r+0x2a>
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_vfiprintf_r+0x2a>
 8003f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f9e:	f7ff fecc 	bl	8003d3a <__retarget_lock_acquire_recursive>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	d501      	bpl.n	8003fac <_vfiprintf_r+0x34>
 8003fa8:	692b      	ldr	r3, [r5, #16]
 8003faa:	b99b      	cbnz	r3, 8003fd4 <_vfiprintf_r+0x5c>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff fdf2 	bl	8003b98 <__swsetup_r>
 8003fb4:	b170      	cbz	r0, 8003fd4 <_vfiprintf_r+0x5c>
 8003fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb8:	07dc      	lsls	r4, r3, #31
 8003fba:	d504      	bpl.n	8003fc6 <_vfiprintf_r+0x4e>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	b01d      	add	sp, #116	; 0x74
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	89ab      	ldrh	r3, [r5, #12]
 8003fc8:	0598      	lsls	r0, r3, #22
 8003fca:	d4f7      	bmi.n	8003fbc <_vfiprintf_r+0x44>
 8003fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fce:	f7ff feb5 	bl	8003d3c <__retarget_lock_release_recursive>
 8003fd2:	e7f3      	b.n	8003fbc <_vfiprintf_r+0x44>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fde:	2330      	movs	r3, #48	; 0x30
 8003fe0:	f04f 0901 	mov.w	r9, #1
 8003fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004198 <_vfiprintf_r+0x220>
 8003fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	469a      	mov	sl, r3
 8003ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff8:	b10a      	cbz	r2, 8003ffe <_vfiprintf_r+0x86>
 8003ffa:	2a25      	cmp	r2, #37	; 0x25
 8003ffc:	d1f9      	bne.n	8003ff2 <_vfiprintf_r+0x7a>
 8003ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8004002:	d00b      	beq.n	800401c <_vfiprintf_r+0xa4>
 8004004:	465b      	mov	r3, fp
 8004006:	4622      	mov	r2, r4
 8004008:	4629      	mov	r1, r5
 800400a:	4630      	mov	r0, r6
 800400c:	f7ff ffa1 	bl	8003f52 <__sfputs_r>
 8004010:	3001      	adds	r0, #1
 8004012:	f000 80a9 	beq.w	8004168 <_vfiprintf_r+0x1f0>
 8004016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004018:	445a      	add	r2, fp
 800401a:	9209      	str	r2, [sp, #36]	; 0x24
 800401c:	f89a 3000 	ldrb.w	r3, [sl]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a1 	beq.w	8004168 <_vfiprintf_r+0x1f0>
 8004026:	2300      	movs	r3, #0
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004030:	f10a 0a01 	add.w	sl, sl, #1
 8004034:	9304      	str	r3, [sp, #16]
 8004036:	9307      	str	r3, [sp, #28]
 8004038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800403c:	931a      	str	r3, [sp, #104]	; 0x68
 800403e:	4654      	mov	r4, sl
 8004040:	2205      	movs	r2, #5
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	4854      	ldr	r0, [pc, #336]	; (8004198 <_vfiprintf_r+0x220>)
 8004048:	f000 fb82 	bl	8004750 <memchr>
 800404c:	9a04      	ldr	r2, [sp, #16]
 800404e:	b9d8      	cbnz	r0, 8004088 <_vfiprintf_r+0x110>
 8004050:	06d1      	lsls	r1, r2, #27
 8004052:	bf44      	itt	mi
 8004054:	2320      	movmi	r3, #32
 8004056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800405a:	0713      	lsls	r3, r2, #28
 800405c:	bf44      	itt	mi
 800405e:	232b      	movmi	r3, #43	; 0x2b
 8004060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004064:	f89a 3000 	ldrb.w	r3, [sl]
 8004068:	2b2a      	cmp	r3, #42	; 0x2a
 800406a:	d015      	beq.n	8004098 <_vfiprintf_r+0x120>
 800406c:	4654      	mov	r4, sl
 800406e:	2000      	movs	r0, #0
 8004070:	f04f 0c0a 	mov.w	ip, #10
 8004074:	9a07      	ldr	r2, [sp, #28]
 8004076:	4621      	mov	r1, r4
 8004078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800407c:	3b30      	subs	r3, #48	; 0x30
 800407e:	2b09      	cmp	r3, #9
 8004080:	d94d      	bls.n	800411e <_vfiprintf_r+0x1a6>
 8004082:	b1b0      	cbz	r0, 80040b2 <_vfiprintf_r+0x13a>
 8004084:	9207      	str	r2, [sp, #28]
 8004086:	e014      	b.n	80040b2 <_vfiprintf_r+0x13a>
 8004088:	eba0 0308 	sub.w	r3, r0, r8
 800408c:	fa09 f303 	lsl.w	r3, r9, r3
 8004090:	4313      	orrs	r3, r2
 8004092:	46a2      	mov	sl, r4
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	e7d2      	b.n	800403e <_vfiprintf_r+0xc6>
 8004098:	9b03      	ldr	r3, [sp, #12]
 800409a:	1d19      	adds	r1, r3, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	9103      	str	r1, [sp, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfbb      	ittet	lt
 80040a4:	425b      	neglt	r3, r3
 80040a6:	f042 0202 	orrlt.w	r2, r2, #2
 80040aa:	9307      	strge	r3, [sp, #28]
 80040ac:	9307      	strlt	r3, [sp, #28]
 80040ae:	bfb8      	it	lt
 80040b0:	9204      	strlt	r2, [sp, #16]
 80040b2:	7823      	ldrb	r3, [r4, #0]
 80040b4:	2b2e      	cmp	r3, #46	; 0x2e
 80040b6:	d10c      	bne.n	80040d2 <_vfiprintf_r+0x15a>
 80040b8:	7863      	ldrb	r3, [r4, #1]
 80040ba:	2b2a      	cmp	r3, #42	; 0x2a
 80040bc:	d134      	bne.n	8004128 <_vfiprintf_r+0x1b0>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	3402      	adds	r4, #2
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9203      	str	r2, [sp, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bfb8      	it	lt
 80040cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80040d0:	9305      	str	r3, [sp, #20]
 80040d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800419c <_vfiprintf_r+0x224>
 80040d6:	2203      	movs	r2, #3
 80040d8:	4650      	mov	r0, sl
 80040da:	7821      	ldrb	r1, [r4, #0]
 80040dc:	f000 fb38 	bl	8004750 <memchr>
 80040e0:	b138      	cbz	r0, 80040f2 <_vfiprintf_r+0x17a>
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	9b04      	ldr	r3, [sp, #16]
 80040e6:	eba0 000a 	sub.w	r0, r0, sl
 80040ea:	4082      	lsls	r2, r0
 80040ec:	4313      	orrs	r3, r2
 80040ee:	3401      	adds	r4, #1
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f6:	2206      	movs	r2, #6
 80040f8:	4829      	ldr	r0, [pc, #164]	; (80041a0 <_vfiprintf_r+0x228>)
 80040fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040fe:	f000 fb27 	bl	8004750 <memchr>
 8004102:	2800      	cmp	r0, #0
 8004104:	d03f      	beq.n	8004186 <_vfiprintf_r+0x20e>
 8004106:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <_vfiprintf_r+0x22c>)
 8004108:	bb1b      	cbnz	r3, 8004152 <_vfiprintf_r+0x1da>
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	3307      	adds	r3, #7
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	3308      	adds	r3, #8
 8004114:	9303      	str	r3, [sp, #12]
 8004116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004118:	443b      	add	r3, r7
 800411a:	9309      	str	r3, [sp, #36]	; 0x24
 800411c:	e768      	b.n	8003ff0 <_vfiprintf_r+0x78>
 800411e:	460c      	mov	r4, r1
 8004120:	2001      	movs	r0, #1
 8004122:	fb0c 3202 	mla	r2, ip, r2, r3
 8004126:	e7a6      	b.n	8004076 <_vfiprintf_r+0xfe>
 8004128:	2300      	movs	r3, #0
 800412a:	f04f 0c0a 	mov.w	ip, #10
 800412e:	4619      	mov	r1, r3
 8004130:	3401      	adds	r4, #1
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	4620      	mov	r0, r4
 8004136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800413a:	3a30      	subs	r2, #48	; 0x30
 800413c:	2a09      	cmp	r2, #9
 800413e:	d903      	bls.n	8004148 <_vfiprintf_r+0x1d0>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0c6      	beq.n	80040d2 <_vfiprintf_r+0x15a>
 8004144:	9105      	str	r1, [sp, #20]
 8004146:	e7c4      	b.n	80040d2 <_vfiprintf_r+0x15a>
 8004148:	4604      	mov	r4, r0
 800414a:	2301      	movs	r3, #1
 800414c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004150:	e7f0      	b.n	8004134 <_vfiprintf_r+0x1bc>
 8004152:	ab03      	add	r3, sp, #12
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	462a      	mov	r2, r5
 8004158:	4630      	mov	r0, r6
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <_vfiprintf_r+0x230>)
 800415c:	a904      	add	r1, sp, #16
 800415e:	f3af 8000 	nop.w
 8004162:	4607      	mov	r7, r0
 8004164:	1c78      	adds	r0, r7, #1
 8004166:	d1d6      	bne.n	8004116 <_vfiprintf_r+0x19e>
 8004168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800416a:	07d9      	lsls	r1, r3, #31
 800416c:	d405      	bmi.n	800417a <_vfiprintf_r+0x202>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	059a      	lsls	r2, r3, #22
 8004172:	d402      	bmi.n	800417a <_vfiprintf_r+0x202>
 8004174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004176:	f7ff fde1 	bl	8003d3c <__retarget_lock_release_recursive>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	065b      	lsls	r3, r3, #25
 800417e:	f53f af1d 	bmi.w	8003fbc <_vfiprintf_r+0x44>
 8004182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004184:	e71c      	b.n	8003fc0 <_vfiprintf_r+0x48>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4630      	mov	r0, r6
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <_vfiprintf_r+0x230>)
 8004190:	a904      	add	r1, sp, #16
 8004192:	f000 f87d 	bl	8004290 <_printf_i>
 8004196:	e7e4      	b.n	8004162 <_vfiprintf_r+0x1ea>
 8004198:	080047ce 	.word	0x080047ce
 800419c:	080047d4 	.word	0x080047d4
 80041a0:	080047d8 	.word	0x080047d8
 80041a4:	00000000 	.word	0x00000000
 80041a8:	08003f53 	.word	0x08003f53

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4616      	mov	r6, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	4607      	mov	r7, r0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfb8      	it	lt
 80041be:	4613      	movlt	r3, r2
 80041c0:	6033      	str	r3, [r6, #0]
 80041c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c6:	460c      	mov	r4, r1
 80041c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041cc:	b10a      	cbz	r2, 80041d2 <_printf_common+0x26>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	0699      	lsls	r1, r3, #26
 80041d6:	bf42      	ittt	mi
 80041d8:	6833      	ldrmi	r3, [r6, #0]
 80041da:	3302      	addmi	r3, #2
 80041dc:	6033      	strmi	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	f015 0506 	ands.w	r5, r5, #6
 80041e4:	d106      	bne.n	80041f4 <_printf_common+0x48>
 80041e6:	f104 0a19 	add.w	sl, r4, #25
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	6832      	ldr	r2, [r6, #0]
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dc2b      	bgt.n	800424c <_printf_common+0xa0>
 80041f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f8:	1e13      	subs	r3, r2, #0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	bf18      	it	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	0692      	lsls	r2, r2, #26
 8004202:	d430      	bmi.n	8004266 <_printf_common+0xba>
 8004204:	4649      	mov	r1, r9
 8004206:	4638      	mov	r0, r7
 8004208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d023      	beq.n	800425a <_printf_common+0xae>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	6922      	ldr	r2, [r4, #16]
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf14      	ite	ne
 800421e:	2500      	movne	r5, #0
 8004220:	6833      	ldreq	r3, [r6, #0]
 8004222:	f04f 0600 	mov.w	r6, #0
 8004226:	bf08      	it	eq
 8004228:	68e5      	ldreq	r5, [r4, #12]
 800422a:	f104 041a 	add.w	r4, r4, #26
 800422e:	bf08      	it	eq
 8004230:	1aed      	subeq	r5, r5, r3
 8004232:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004236:	bf08      	it	eq
 8004238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800423c:	4293      	cmp	r3, r2
 800423e:	bfc4      	itt	gt
 8004240:	1a9b      	subgt	r3, r3, r2
 8004242:	18ed      	addgt	r5, r5, r3
 8004244:	42b5      	cmp	r5, r6
 8004246:	d11a      	bne.n	800427e <_printf_common+0xd2>
 8004248:	2000      	movs	r0, #0
 800424a:	e008      	b.n	800425e <_printf_common+0xb2>
 800424c:	2301      	movs	r3, #1
 800424e:	4652      	mov	r2, sl
 8004250:	4649      	mov	r1, r9
 8004252:	4638      	mov	r0, r7
 8004254:	47c0      	blx	r8
 8004256:	3001      	adds	r0, #1
 8004258:	d103      	bne.n	8004262 <_printf_common+0xb6>
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004262:	3501      	adds	r5, #1
 8004264:	e7c1      	b.n	80041ea <_printf_common+0x3e>
 8004266:	2030      	movs	r0, #48	; 0x30
 8004268:	18e1      	adds	r1, r4, r3
 800426a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004274:	4422      	add	r2, r4
 8004276:	3302      	adds	r3, #2
 8004278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800427c:	e7c2      	b.n	8004204 <_printf_common+0x58>
 800427e:	2301      	movs	r3, #1
 8004280:	4622      	mov	r2, r4
 8004282:	4649      	mov	r1, r9
 8004284:	4638      	mov	r0, r7
 8004286:	47c0      	blx	r8
 8004288:	3001      	adds	r0, #1
 800428a:	d0e6      	beq.n	800425a <_printf_common+0xae>
 800428c:	3601      	adds	r6, #1
 800428e:	e7d9      	b.n	8004244 <_printf_common+0x98>

08004290 <_printf_i>:
 8004290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004294:	7e0f      	ldrb	r7, [r1, #24]
 8004296:	4691      	mov	r9, r2
 8004298:	2f78      	cmp	r7, #120	; 0x78
 800429a:	4680      	mov	r8, r0
 800429c:	460c      	mov	r4, r1
 800429e:	469a      	mov	sl, r3
 80042a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042a6:	d807      	bhi.n	80042b8 <_printf_i+0x28>
 80042a8:	2f62      	cmp	r7, #98	; 0x62
 80042aa:	d80a      	bhi.n	80042c2 <_printf_i+0x32>
 80042ac:	2f00      	cmp	r7, #0
 80042ae:	f000 80d5 	beq.w	800445c <_printf_i+0x1cc>
 80042b2:	2f58      	cmp	r7, #88	; 0x58
 80042b4:	f000 80c1 	beq.w	800443a <_printf_i+0x1aa>
 80042b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c0:	e03a      	b.n	8004338 <_printf_i+0xa8>
 80042c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c6:	2b15      	cmp	r3, #21
 80042c8:	d8f6      	bhi.n	80042b8 <_printf_i+0x28>
 80042ca:	a101      	add	r1, pc, #4	; (adr r1, 80042d0 <_printf_i+0x40>)
 80042cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d0:	08004329 	.word	0x08004329
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080042b9 	.word	0x080042b9
 80042dc:	080042b9 	.word	0x080042b9
 80042e0:	080042b9 	.word	0x080042b9
 80042e4:	080042b9 	.word	0x080042b9
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	080042b9 	.word	0x080042b9
 80042f0:	080042b9 	.word	0x080042b9
 80042f4:	080042b9 	.word	0x080042b9
 80042f8:	080042b9 	.word	0x080042b9
 80042fc:	08004443 	.word	0x08004443
 8004300:	08004369 	.word	0x08004369
 8004304:	080043fd 	.word	0x080043fd
 8004308:	080042b9 	.word	0x080042b9
 800430c:	080042b9 	.word	0x080042b9
 8004310:	08004465 	.word	0x08004465
 8004314:	080042b9 	.word	0x080042b9
 8004318:	08004369 	.word	0x08004369
 800431c:	080042b9 	.word	0x080042b9
 8004320:	080042b9 	.word	0x080042b9
 8004324:	08004405 	.word	0x08004405
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e0a0      	b.n	800447e <_printf_i+0x1ee>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	682b      	ldr	r3, [r5, #0]
 8004340:	0607      	lsls	r7, r0, #24
 8004342:	f103 0104 	add.w	r1, r3, #4
 8004346:	6029      	str	r1, [r5, #0]
 8004348:	d501      	bpl.n	800434e <_printf_i+0xbe>
 800434a:	681e      	ldr	r6, [r3, #0]
 800434c:	e003      	b.n	8004356 <_printf_i+0xc6>
 800434e:	0646      	lsls	r6, r0, #25
 8004350:	d5fb      	bpl.n	800434a <_printf_i+0xba>
 8004352:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004356:	2e00      	cmp	r6, #0
 8004358:	da03      	bge.n	8004362 <_printf_i+0xd2>
 800435a:	232d      	movs	r3, #45	; 0x2d
 800435c:	4276      	negs	r6, r6
 800435e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004362:	230a      	movs	r3, #10
 8004364:	4859      	ldr	r0, [pc, #356]	; (80044cc <_printf_i+0x23c>)
 8004366:	e012      	b.n	800438e <_printf_i+0xfe>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	6029      	str	r1, [r5, #0]
 8004370:	0605      	lsls	r5, r0, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xe8>
 8004374:	681e      	ldr	r6, [r3, #0]
 8004376:	e002      	b.n	800437e <_printf_i+0xee>
 8004378:	0641      	lsls	r1, r0, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xe4>
 800437c:	881e      	ldrh	r6, [r3, #0]
 800437e:	2f6f      	cmp	r7, #111	; 0x6f
 8004380:	bf0c      	ite	eq
 8004382:	2308      	moveq	r3, #8
 8004384:	230a      	movne	r3, #10
 8004386:	4851      	ldr	r0, [pc, #324]	; (80044cc <_printf_i+0x23c>)
 8004388:	2100      	movs	r1, #0
 800438a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438e:	6865      	ldr	r5, [r4, #4]
 8004390:	2d00      	cmp	r5, #0
 8004392:	bfa8      	it	ge
 8004394:	6821      	ldrge	r1, [r4, #0]
 8004396:	60a5      	str	r5, [r4, #8]
 8004398:	bfa4      	itt	ge
 800439a:	f021 0104 	bicge.w	r1, r1, #4
 800439e:	6021      	strge	r1, [r4, #0]
 80043a0:	b90e      	cbnz	r6, 80043a6 <_printf_i+0x116>
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	d04b      	beq.n	800443e <_printf_i+0x1ae>
 80043a6:	4615      	mov	r5, r2
 80043a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ac:	fb03 6711 	mls	r7, r3, r1, r6
 80043b0:	5dc7      	ldrb	r7, [r0, r7]
 80043b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b6:	4637      	mov	r7, r6
 80043b8:	42bb      	cmp	r3, r7
 80043ba:	460e      	mov	r6, r1
 80043bc:	d9f4      	bls.n	80043a8 <_printf_i+0x118>
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d10b      	bne.n	80043da <_printf_i+0x14a>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07de      	lsls	r6, r3, #31
 80043c6:	d508      	bpl.n	80043da <_printf_i+0x14a>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	6861      	ldr	r1, [r4, #4]
 80043cc:	4299      	cmp	r1, r3
 80043ce:	bfde      	ittt	le
 80043d0:	2330      	movle	r3, #48	; 0x30
 80043d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043da:	1b52      	subs	r2, r2, r5
 80043dc:	6122      	str	r2, [r4, #16]
 80043de:	464b      	mov	r3, r9
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f8cd a000 	str.w	sl, [sp]
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	f7ff fedf 	bl	80041ac <_printf_common>
 80043ee:	3001      	adds	r0, #1
 80043f0:	d14a      	bne.n	8004488 <_printf_i+0x1f8>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	b004      	add	sp, #16
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	f043 0320 	orr.w	r3, r3, #32
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	2778      	movs	r7, #120	; 0x78
 8004406:	4832      	ldr	r0, [pc, #200]	; (80044d0 <_printf_i+0x240>)
 8004408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	6829      	ldr	r1, [r5, #0]
 8004410:	061f      	lsls	r7, r3, #24
 8004412:	f851 6b04 	ldr.w	r6, [r1], #4
 8004416:	d402      	bmi.n	800441e <_printf_i+0x18e>
 8004418:	065f      	lsls	r7, r3, #25
 800441a:	bf48      	it	mi
 800441c:	b2b6      	uxthmi	r6, r6
 800441e:	07df      	lsls	r7, r3, #31
 8004420:	bf48      	it	mi
 8004422:	f043 0320 	orrmi.w	r3, r3, #32
 8004426:	6029      	str	r1, [r5, #0]
 8004428:	bf48      	it	mi
 800442a:	6023      	strmi	r3, [r4, #0]
 800442c:	b91e      	cbnz	r6, 8004436 <_printf_i+0x1a6>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f023 0320 	bic.w	r3, r3, #32
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	2310      	movs	r3, #16
 8004438:	e7a6      	b.n	8004388 <_printf_i+0xf8>
 800443a:	4824      	ldr	r0, [pc, #144]	; (80044cc <_printf_i+0x23c>)
 800443c:	e7e4      	b.n	8004408 <_printf_i+0x178>
 800443e:	4615      	mov	r5, r2
 8004440:	e7bd      	b.n	80043be <_printf_i+0x12e>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	6826      	ldr	r6, [r4, #0]
 8004446:	1d18      	adds	r0, r3, #4
 8004448:	6961      	ldr	r1, [r4, #20]
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	0635      	lsls	r5, r6, #24
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	d501      	bpl.n	8004456 <_printf_i+0x1c6>
 8004452:	6019      	str	r1, [r3, #0]
 8004454:	e002      	b.n	800445c <_printf_i+0x1cc>
 8004456:	0670      	lsls	r0, r6, #25
 8004458:	d5fb      	bpl.n	8004452 <_printf_i+0x1c2>
 800445a:	8019      	strh	r1, [r3, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	4615      	mov	r5, r2
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	e7bc      	b.n	80043de <_printf_i+0x14e>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	2100      	movs	r1, #0
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	602a      	str	r2, [r5, #0]
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	6862      	ldr	r2, [r4, #4]
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f96d 	bl	8004750 <memchr>
 8004476:	b108      	cbz	r0, 800447c <_printf_i+0x1ec>
 8004478:	1b40      	subs	r0, r0, r5
 800447a:	6060      	str	r0, [r4, #4]
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	2300      	movs	r3, #0
 8004482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004486:	e7aa      	b.n	80043de <_printf_i+0x14e>
 8004488:	462a      	mov	r2, r5
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	47d0      	blx	sl
 8004492:	3001      	adds	r0, #1
 8004494:	d0ad      	beq.n	80043f2 <_printf_i+0x162>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	079b      	lsls	r3, r3, #30
 800449a:	d413      	bmi.n	80044c4 <_printf_i+0x234>
 800449c:	68e0      	ldr	r0, [r4, #12]
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	4298      	cmp	r0, r3
 80044a2:	bfb8      	it	lt
 80044a4:	4618      	movlt	r0, r3
 80044a6:	e7a6      	b.n	80043f6 <_printf_i+0x166>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4632      	mov	r2, r6
 80044ac:	4649      	mov	r1, r9
 80044ae:	4640      	mov	r0, r8
 80044b0:	47d0      	blx	sl
 80044b2:	3001      	adds	r0, #1
 80044b4:	d09d      	beq.n	80043f2 <_printf_i+0x162>
 80044b6:	3501      	adds	r5, #1
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	1a5b      	subs	r3, r3, r1
 80044be:	42ab      	cmp	r3, r5
 80044c0:	dcf2      	bgt.n	80044a8 <_printf_i+0x218>
 80044c2:	e7eb      	b.n	800449c <_printf_i+0x20c>
 80044c4:	2500      	movs	r5, #0
 80044c6:	f104 0619 	add.w	r6, r4, #25
 80044ca:	e7f5      	b.n	80044b8 <_printf_i+0x228>
 80044cc:	080047df 	.word	0x080047df
 80044d0:	080047f0 	.word	0x080047f0

080044d4 <__sflush_r>:
 80044d4:	898a      	ldrh	r2, [r1, #12]
 80044d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d8:	4605      	mov	r5, r0
 80044da:	0710      	lsls	r0, r2, #28
 80044dc:	460c      	mov	r4, r1
 80044de:	d457      	bmi.n	8004590 <__sflush_r+0xbc>
 80044e0:	684b      	ldr	r3, [r1, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dc04      	bgt.n	80044f0 <__sflush_r+0x1c>
 80044e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc01      	bgt.n	80044f0 <__sflush_r+0x1c>
 80044ec:	2000      	movs	r0, #0
 80044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d0fa      	beq.n	80044ec <__sflush_r+0x18>
 80044f6:	2300      	movs	r3, #0
 80044f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044fc:	682f      	ldr	r7, [r5, #0]
 80044fe:	6a21      	ldr	r1, [r4, #32]
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	d032      	beq.n	800456a <__sflush_r+0x96>
 8004504:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	075a      	lsls	r2, r3, #29
 800450a:	d505      	bpl.n	8004518 <__sflush_r+0x44>
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	1ac0      	subs	r0, r0, r3
 8004510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004512:	b10b      	cbz	r3, 8004518 <__sflush_r+0x44>
 8004514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004516:	1ac0      	subs	r0, r0, r3
 8004518:	2300      	movs	r3, #0
 800451a:	4602      	mov	r2, r0
 800451c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800451e:	4628      	mov	r0, r5
 8004520:	6a21      	ldr	r1, [r4, #32]
 8004522:	47b0      	blx	r6
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	d106      	bne.n	8004538 <__sflush_r+0x64>
 800452a:	6829      	ldr	r1, [r5, #0]
 800452c:	291d      	cmp	r1, #29
 800452e:	d82b      	bhi.n	8004588 <__sflush_r+0xb4>
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <__sflush_r+0x100>)
 8004532:	410a      	asrs	r2, r1
 8004534:	07d6      	lsls	r6, r2, #31
 8004536:	d427      	bmi.n	8004588 <__sflush_r+0xb4>
 8004538:	2200      	movs	r2, #0
 800453a:	6062      	str	r2, [r4, #4]
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	04d9      	lsls	r1, r3, #19
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	d504      	bpl.n	800454e <__sflush_r+0x7a>
 8004544:	1c42      	adds	r2, r0, #1
 8004546:	d101      	bne.n	800454c <__sflush_r+0x78>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b903      	cbnz	r3, 800454e <__sflush_r+0x7a>
 800454c:	6560      	str	r0, [r4, #84]	; 0x54
 800454e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004550:	602f      	str	r7, [r5, #0]
 8004552:	2900      	cmp	r1, #0
 8004554:	d0ca      	beq.n	80044ec <__sflush_r+0x18>
 8004556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800455a:	4299      	cmp	r1, r3
 800455c:	d002      	beq.n	8004564 <__sflush_r+0x90>
 800455e:	4628      	mov	r0, r5
 8004560:	f7ff fbee 	bl	8003d40 <_free_r>
 8004564:	2000      	movs	r0, #0
 8004566:	6360      	str	r0, [r4, #52]	; 0x34
 8004568:	e7c1      	b.n	80044ee <__sflush_r+0x1a>
 800456a:	2301      	movs	r3, #1
 800456c:	4628      	mov	r0, r5
 800456e:	47b0      	blx	r6
 8004570:	1c41      	adds	r1, r0, #1
 8004572:	d1c8      	bne.n	8004506 <__sflush_r+0x32>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0c5      	beq.n	8004506 <__sflush_r+0x32>
 800457a:	2b1d      	cmp	r3, #29
 800457c:	d001      	beq.n	8004582 <__sflush_r+0xae>
 800457e:	2b16      	cmp	r3, #22
 8004580:	d101      	bne.n	8004586 <__sflush_r+0xb2>
 8004582:	602f      	str	r7, [r5, #0]
 8004584:	e7b2      	b.n	80044ec <__sflush_r+0x18>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	e7ae      	b.n	80044ee <__sflush_r+0x1a>
 8004590:	690f      	ldr	r7, [r1, #16]
 8004592:	2f00      	cmp	r7, #0
 8004594:	d0aa      	beq.n	80044ec <__sflush_r+0x18>
 8004596:	0793      	lsls	r3, r2, #30
 8004598:	bf18      	it	ne
 800459a:	2300      	movne	r3, #0
 800459c:	680e      	ldr	r6, [r1, #0]
 800459e:	bf08      	it	eq
 80045a0:	694b      	ldreq	r3, [r1, #20]
 80045a2:	1bf6      	subs	r6, r6, r7
 80045a4:	600f      	str	r7, [r1, #0]
 80045a6:	608b      	str	r3, [r1, #8]
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	dd9f      	ble.n	80044ec <__sflush_r+0x18>
 80045ac:	4633      	mov	r3, r6
 80045ae:	463a      	mov	r2, r7
 80045b0:	4628      	mov	r0, r5
 80045b2:	6a21      	ldr	r1, [r4, #32]
 80045b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80045b8:	47e0      	blx	ip
 80045ba:	2800      	cmp	r0, #0
 80045bc:	dc06      	bgt.n	80045cc <__sflush_r+0xf8>
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	e790      	b.n	80044ee <__sflush_r+0x1a>
 80045cc:	4407      	add	r7, r0
 80045ce:	1a36      	subs	r6, r6, r0
 80045d0:	e7ea      	b.n	80045a8 <__sflush_r+0xd4>
 80045d2:	bf00      	nop
 80045d4:	dfbffffe 	.word	0xdfbffffe

080045d8 <_fflush_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	4605      	mov	r5, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	b913      	cbnz	r3, 80045e8 <_fflush_r+0x10>
 80045e2:	2500      	movs	r5, #0
 80045e4:	4628      	mov	r0, r5
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	b118      	cbz	r0, 80045f2 <_fflush_r+0x1a>
 80045ea:	6a03      	ldr	r3, [r0, #32]
 80045ec:	b90b      	cbnz	r3, 80045f2 <_fflush_r+0x1a>
 80045ee:	f7ff f9af 	bl	8003950 <__sinit>
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f3      	beq.n	80045e2 <_fflush_r+0xa>
 80045fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045fc:	07d0      	lsls	r0, r2, #31
 80045fe:	d404      	bmi.n	800460a <_fflush_r+0x32>
 8004600:	0599      	lsls	r1, r3, #22
 8004602:	d402      	bmi.n	800460a <_fflush_r+0x32>
 8004604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004606:	f7ff fb98 	bl	8003d3a <__retarget_lock_acquire_recursive>
 800460a:	4628      	mov	r0, r5
 800460c:	4621      	mov	r1, r4
 800460e:	f7ff ff61 	bl	80044d4 <__sflush_r>
 8004612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004614:	4605      	mov	r5, r0
 8004616:	07da      	lsls	r2, r3, #31
 8004618:	d4e4      	bmi.n	80045e4 <_fflush_r+0xc>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	059b      	lsls	r3, r3, #22
 800461e:	d4e1      	bmi.n	80045e4 <_fflush_r+0xc>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f7ff fb8b 	bl	8003d3c <__retarget_lock_release_recursive>
 8004626:	e7dd      	b.n	80045e4 <_fflush_r+0xc>

08004628 <__swhatbuf_r>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	460c      	mov	r4, r1
 800462c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004630:	4615      	mov	r5, r2
 8004632:	2900      	cmp	r1, #0
 8004634:	461e      	mov	r6, r3
 8004636:	b096      	sub	sp, #88	; 0x58
 8004638:	da0c      	bge.n	8004654 <__swhatbuf_r+0x2c>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	2100      	movs	r1, #0
 800463e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004642:	bf0c      	ite	eq
 8004644:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004648:	2340      	movne	r3, #64	; 0x40
 800464a:	2000      	movs	r0, #0
 800464c:	6031      	str	r1, [r6, #0]
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	b016      	add	sp, #88	; 0x58
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	466a      	mov	r2, sp
 8004656:	f000 f849 	bl	80046ec <_fstat_r>
 800465a:	2800      	cmp	r0, #0
 800465c:	dbed      	blt.n	800463a <__swhatbuf_r+0x12>
 800465e:	9901      	ldr	r1, [sp, #4]
 8004660:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004664:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004668:	4259      	negs	r1, r3
 800466a:	4159      	adcs	r1, r3
 800466c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004670:	e7eb      	b.n	800464a <__swhatbuf_r+0x22>

08004672 <__smakebuf_r>:
 8004672:	898b      	ldrh	r3, [r1, #12]
 8004674:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004676:	079d      	lsls	r5, r3, #30
 8004678:	4606      	mov	r6, r0
 800467a:	460c      	mov	r4, r1
 800467c:	d507      	bpl.n	800468e <__smakebuf_r+0x1c>
 800467e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	2301      	movs	r3, #1
 8004688:	6163      	str	r3, [r4, #20]
 800468a:	b002      	add	sp, #8
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	466a      	mov	r2, sp
 8004690:	ab01      	add	r3, sp, #4
 8004692:	f7ff ffc9 	bl	8004628 <__swhatbuf_r>
 8004696:	9900      	ldr	r1, [sp, #0]
 8004698:	4605      	mov	r5, r0
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff fbb8 	bl	8003e10 <_malloc_r>
 80046a0:	b948      	cbnz	r0, 80046b6 <__smakebuf_r+0x44>
 80046a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a6:	059a      	lsls	r2, r3, #22
 80046a8:	d4ef      	bmi.n	800468a <__smakebuf_r+0x18>
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	f043 0302 	orr.w	r3, r3, #2
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	e7e3      	b.n	800467e <__smakebuf_r+0xc>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	6020      	str	r0, [r4, #0]
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	9b00      	ldr	r3, [sp, #0]
 80046c2:	6120      	str	r0, [r4, #16]
 80046c4:	6163      	str	r3, [r4, #20]
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	b15b      	cbz	r3, 80046e2 <__smakebuf_r+0x70>
 80046ca:	4630      	mov	r0, r6
 80046cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d0:	f000 f81e 	bl	8004710 <_isatty_r>
 80046d4:	b128      	cbz	r0, 80046e2 <__smakebuf_r+0x70>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	f023 0303 	bic.w	r3, r3, #3
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	431d      	orrs	r5, r3
 80046e6:	81a5      	strh	r5, [r4, #12]
 80046e8:	e7cf      	b.n	800468a <__smakebuf_r+0x18>
	...

080046ec <_fstat_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	2300      	movs	r3, #0
 80046f0:	4d06      	ldr	r5, [pc, #24]	; (800470c <_fstat_r+0x20>)
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	f7fc f865 	bl	80007c8 <_fstat>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d102      	bne.n	8004708 <_fstat_r+0x1c>
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	b103      	cbz	r3, 8004708 <_fstat_r+0x1c>
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	bf00      	nop
 800470c:	200002f0 	.word	0x200002f0

08004710 <_isatty_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	2300      	movs	r3, #0
 8004714:	4d05      	ldr	r5, [pc, #20]	; (800472c <_isatty_r+0x1c>)
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc f863 	bl	80007e6 <_isatty>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_isatty_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_isatty_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200002f0 	.word	0x200002f0

08004730 <_sbrk_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	2300      	movs	r3, #0
 8004734:	4d05      	ldr	r5, [pc, #20]	; (800474c <_sbrk_r+0x1c>)
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fc f86a 	bl	8000814 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_sbrk_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_sbrk_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200002f0 	.word	0x200002f0

08004750 <memchr>:
 8004750:	4603      	mov	r3, r0
 8004752:	b510      	push	{r4, lr}
 8004754:	b2c9      	uxtb	r1, r1
 8004756:	4402      	add	r2, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	4618      	mov	r0, r3
 800475c:	d101      	bne.n	8004762 <memchr+0x12>
 800475e:	2000      	movs	r0, #0
 8004760:	e003      	b.n	800476a <memchr+0x1a>
 8004762:	7804      	ldrb	r4, [r0, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	428c      	cmp	r4, r1
 8004768:	d1f6      	bne.n	8004758 <memchr+0x8>
 800476a:	bd10      	pop	{r4, pc}

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
