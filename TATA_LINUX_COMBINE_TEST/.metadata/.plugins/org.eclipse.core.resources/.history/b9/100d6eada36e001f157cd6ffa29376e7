/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define ADC_TEST_3  ADC_CHANNEL_11
#define ADC_TEST_4  ADC_CHANNEL_12
#define ADC_TEST_7  ADC_CHANNEL_13
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */


TIM_MasterConfigTypeDef sMasterConfig = { 0 };
TIM_OC_InitTypeDef sConfigOC = { 0 };
ADC_ChannelConfTypeDef sConfig = {0};
uint8_t dutyCycle = 0;    // Global variable for setting duty cycle (0 to 100)
uint32_t dutyToPulse;
char rcvbyte;
char msg;  // Buffer for UART messages
uint16_t duty_to_pulse;
uint16_t lux=0;
char output_voltage[20];
char test_result;
int eeprom_page_count = 32;  // Example loop count

/* USER CODE END PV */
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM4_TEST2_Init(void);
static void MX_TIM4_TEST3_Init(void);
static void MX_TIM4_TEST5_Init(void);
static void MX_TIM4_TEST6_Init(void);
static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */
int DutytoPulse(uint8_t duty_percentage, uint16_t init_period);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	printf("Received:\n");
    if (huart->Instance == USART1) {
    	 printf("Received: %c\n", rcvbyte);
        // Store received byte in msg
    	 if (rcvbyte != '\r' || rcvbyte != '\n')
    	 {
         msg  = rcvbyte;
    	 }

        // If newline character received, process the message
        if (rcvbyte == '\r' || rcvbyte == '\n' ) {

            printf("Received msg: %c\n", msg);

        }

        // Restart UART reception
        HAL_UART_Receive_IT(&huart1, (uint8_t*) &rcvbyte, 1);
    }
}


int _write(int file, char *ptr, int len)
{
for(int i=0; i<len; i++)
{
	ITM_SendChar(*ptr++);
	}
return len;
}

int DutytoPulse(uint8_t duty_percentage, uint16_t init_period)
{
    return (init_period * duty_percentage) / 100;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
   printf("enter in main loop \n");
   uint8_t test_repeat=0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM4_TEST2_Init();
  MX_USART1_UART_Init();
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &rcvbyte, 1);

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ('1' == msg)
	  	        {
//								printf("first test completed\n");
								// Reset msg to prevent re-triggering
								msg = 0;
								char eeprom_register_write_status[100];  // Buffer to store the message
								uint8_t test_register = 0x01;  // Example register value
								test_result='F';

								// Loop to send a message multiple times
								for (int i = 0; i < eeprom_page_count; i++)
								{

								    // Format the message to indicate failure to write
								    sprintf(eeprom_register_write_status, "Failed to write 0x%02X register\r\n", test_register);
                                    printf("%s\n",eeprom_register_write_status);
								    // Send the formatted message over UART
								    HAL_UART_Transmit(&huart1, (uint8_t *)eeprom_register_write_status, strlen(eeprom_register_write_status), HAL_MAX_DELAY);
								    HAL_Delay(100);
								    test_register++;
								}

							    HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
	  	        }
	  if ('2' == msg)
	        {
		                        printf("second  test completed\n");
								// Start PWM
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);

								// Delay for 2 seconds
								HAL_Delay(2000);

								// Stop PWM
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);

								// Reset msg to prevent re-triggering
								msg = 0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
	        }
	  if  ('3' == msg)
	  {
								sConfig.Channel=ADC_TEST_3;
								MX_ADC1_Init();
								HAL_ADC_Start(&hadc1);
								HAL_ADC_PollForConversion(&hadc1,20);
								lux= HAL_ADC_GetValue(&hadc1);
								float voltage = (lux * 3.3f) / 4095.0f;  // Calculate voltage
								printf("ADC: %.2f\n",voltage);
								sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
								HAL_UART_Transmit(&huart1, (uint8_t *)output_voltage , strlen(output_voltage) , HAL_MAX_DELAY);

								MX_TIM4_TEST3_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);

								msg = 0;
//								test_result='P';
//								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);

	  }

	  if  ('4' == msg)
	  {
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
								sConfig.Channel=ADC_TEST_4;
								MX_ADC1_Init();
								HAL_ADC_Start(&hadc1);
								HAL_ADC_PollForConversion(&hadc1,20);
								lux= HAL_ADC_GetValue(&hadc1);
								float voltage = (lux * 3.3f) / 4095.0f;  // Calculate voltage
								printf("ADC: %.2f\n",voltage);
							    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
								HAL_UART_Transmit(&huart1, (uint8_t *)output_voltage , strlen(output_voltage) , HAL_MAX_DELAY);
								msg = 0;
//								test_result='P';
//								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
	  }


	  if  ('5' == msg)
	 	  {
		  test_repeat++;
		  if ( 1== test_repeat)

		  {
								duty_to_pulse = (uint16_t)DutytoPulse(25,399);
								printf("duty:%d\n",(uint16_t)duty_to_pulse);
								MX_TIM4_TEST5_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);

								msg = 0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
		  }
		  if ( 2== test_repeat)

		   {
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
								duty_to_pulse = (uint16_t)DutytoPulse(50,399);
								printf("duty:%d\n",(uint16_t)duty_to_pulse);
								MX_TIM4_TEST5_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);

								msg = 0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
		 		  }
		  if ( 3== test_repeat)
		 		  {

								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
								duty_to_pulse = (uint16_t)DutytoPulse(75,399);
								printf("duty:%d\n",(uint16_t)duty_to_pulse);
								MX_TIM4_TEST5_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);

								msg = 0;
								test_repeat =0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
		 		  }

	 	  }

		  if ( '6' == msg)
		  {
			  test_repeat++;
			  if ( 1== test_repeat)

			  {
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
								duty_to_pulse = DutytoPulse(25,399);
								printf("duty:%d\n",duty_to_pulse);
								MX_TIM4_TEST6_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

								msg = 0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
			  }
			  if ( 2== test_repeat)

			   {
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
								duty_to_pulse = DutytoPulse(50,399);
								printf("duty:%d\n",duty_to_pulse);
								MX_TIM4_TEST6_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

								msg = 0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
					  }
			  if ( 3== test_repeat)
					  {
								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
								sConfig.Channel=ADC_TEST_3;
								duty_to_pulse = DutytoPulse(75,399);
								printf("duty:%d\n",duty_to_pulse);
								MX_TIM4_TEST6_Init();

								// Restart the PWM with new settings
								HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

								msg = 0;
								test_repeat =0;
								test_result='-';
								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);
					  }
	 	  }
		  if  ('7' == msg)
		   {

								HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
								sConfig.Channel=ADC_TEST_7;
								MX_ADC1_Init();
								HAL_ADC_Start(&hadc1);
								HAL_ADC_PollForConversion(&hadc1,20);
								lux= HAL_ADC_GetValue(&hadc1);
								float voltage = (lux * 3.3f) / 4095.0f;  // Calculate voltage
								printf("ADC: %.2f\n",voltage);
								sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
								HAL_UART_Transmit(&huart1, (uint8_t *)output_voltage , strlen(output_voltage) , HAL_MAX_DELAY);
								msg = 0;
//								test_result='P';
//								HAL_UART_Transmit(&huart1, (uint8_t *)&test_result , 1 , HAL_MAX_DELAY);

		    }


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
//  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM4_TEST2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_TEST2_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 2665;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1333;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM4_TEST2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_TEST3_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 8;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 2;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM4_TEST2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_TEST5_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 399;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = duty_to_pulse;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM4_TEST2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_TEST6_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 399;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = duty_to_pulse;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
