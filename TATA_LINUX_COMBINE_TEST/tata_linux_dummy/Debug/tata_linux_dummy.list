
tata_linux_dummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008414  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08008528  08008528  00018528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a1c  08008a1c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a1c  08008a1c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a20  08008a20  00018a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d8  08008bfc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008bfc  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db15  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020db  00000000  00000000  0002dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  0002fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abb  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019031  00000000  00000000  000316b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f65d  00000000  00000000  0004a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009129a  00000000  00000000  00059d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d80  00000000  00000000  000eafdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  000efd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800850c 	.word	0x0800850c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800850c 	.word	0x0800850c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001048:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800104c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001050:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001058:	e000      	b.n	800105c <ITM_SendChar+0x2c>
    {
      __NOP();
 800105a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800105c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001066:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <adcChannel_config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void adcChannel_config(uint8_t channel)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    sConfig.Channel = channel;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <adcChannel_config+0x2c>)
 800108a:	6013      	str	r3, [r2, #0]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <adcChannel_config+0x2c>)
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <adcChannel_config+0x30>)
 8001090:	f001 fe14 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <adcChannel_config+0x22>
    {
        Error_Handler();
 800109a:	f001 f829 	bl	80020f0 <Error_Handler>
    }
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000320 	.word	0x20000320
 80010ac:	200001f4 	.word	0x200001f4

080010b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	static int count = 0;

	if (htim == &htim3) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d126      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x5e>
		if (count == 0 && count_torch != 0)
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10a      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x2e>
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010d8:	f002 fad2 	bl	8003680 <HAL_GPIO_WritePin>
 80010dc:	e00b      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x46>

		else if (count == count_torch)
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d105      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010f2:	f002 fac5 	bl	8003680 <HAL_GPIO_WritePin>

		count++;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010fe:	6013      	str	r3, [r2, #0]

		if (count == 4)
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d102      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x5e>
			count = 0;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000026c 	.word	0x2000026c
 800111c:	200003d4 	.word	0x200003d4
 8001120:	200003d0 	.word	0x200003d0
 8001124:	40010c00 	.word	0x40010c00

08001128 <_write>:
//{
//    toggle = 1; // Set flag to toggle GPIO
//}

int _write(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e009      	b.n	800114e <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff74 	bl	8001030 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf1      	blt.n	800113a <_write+0x12>
    }
    return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <DutytoPulse>:

int DutytoPulse(uint8_t duty_percentage, uint16_t init_period)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
    return (init_period * duty_percentage) / 100;
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <DutytoPulse+0x30>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	1152      	asrs	r2, r2, #5
 8001180:	17db      	asrs	r3, r3, #31
 8001182:	1ad3      	subs	r3, r2, r3
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	51eb851f 	.word	0x51eb851f

08001194 <CLIPrint>:

void CLIPrint(char *fmt, ...)
{
 8001194:	b40f      	push	{r0, r1, r2, r3}
 8001196:	b580      	push	{r7, lr}
 8001198:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800119c:	af00      	add	r7, sp, #0
    char buf[1000];
    va_list vl;

    va_start(vl, fmt);
 800119e:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80011a2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80011a6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80011aa:	601a      	str	r2, [r3, #0]
    vsnprintf(buf, sizeof(buf), fmt, vl);
 80011ac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80011b0:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80011b4:	f107 0008 	add.w	r0, r7, #8
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80011be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c2:	f005 f8ab 	bl	800631c <vsniprintf>
    va_end(vl);

    HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffc0 	bl	8000150 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 0108 	add.w	r1, r7, #8
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <CLIPrint+0x5c>)
 80011dc:	f004 f81c 	bl	8005218 <HAL_UART_Transmit>
}
 80011e0:	bf00      	nop
 80011e2:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 80011e6:	46bd      	mov	sp, r7
 80011e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011ec:	b004      	add	sp, #16
 80011ee:	4770      	bx	lr
 80011f0:	200002b4 	.word	0x200002b4

080011f4 <SendTestResults>:

void SendTestResults(uint8_t *buffer )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MESSAGE_SIZE; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e013      	b.n	800122a <SendTestResults+0x36>
    {
        if (buffer[i] == 1)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <SendTestResults+0x26>
        {
            // Send pass message
            CLIPrint("Passed to write page %d\r\n",i);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4619      	mov	r1, r3
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <SendTestResults+0x48>)
 8001214:	f7ff ffbe 	bl	8001194 <CLIPrint>
 8001218:	e004      	b.n	8001224 <SendTestResults+0x30>
        }
        else
        {
            // Send fail message
            CLIPrint("Failed to write page %d\r\n",i);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	4619      	mov	r1, r3
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <SendTestResults+0x4c>)
 8001220:	f7ff ffb8 	bl	8001194 <CLIPrint>
    for (uint8_t i = 0; i < MESSAGE_SIZE; i++)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	3301      	adds	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b3f      	cmp	r3, #63	; 0x3f
 800122e:	d9e8      	bls.n	8001202 <SendTestResults+0xe>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	08008544 	.word	0x08008544
 8001240:	08008560 	.word	0x08008560

08001244 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b098      	sub	sp, #96	; 0x60
 8001248:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    uint8_t test_repeat = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001250:	f001 f9ea 	bl	8002628 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001254:	f000 fd0e 	bl	8001c74 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001258:	f000 fefe 	bl	8002058 <MX_GPIO_Init>
    MX_ADC1_Init();
 800125c:	f000 fd5a 	bl	8001d14 <MX_ADC1_Init>
    MX_USART1_UART_Init();
 8001260:	f000 fed0 	bl	8002004 <MX_USART1_UART_Init>
    HAL_UART_Receive_IT(&huart1, (uint8_t*) &rcvbyte, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	49aa      	ldr	r1, [pc, #680]	; (8001510 <main+0x2cc>)
 8001268:	48aa      	ldr	r0, [pc, #680]	; (8001514 <main+0x2d0>)
 800126a:	f004 f860 	bl	800532e <HAL_UART_Receive_IT>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if ('1' == msg)
 800126e:	4baa      	ldr	r3, [pc, #680]	; (8001518 <main+0x2d4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b31      	cmp	r3, #49	; 0x31
 8001274:	d15d      	bne.n	8001332 <main+0xee>
        {
                uint8_t eeprom_test_results[MAX_BUFFER_SIZE] = {0}; // Buffer to store test results
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	223c      	movs	r2, #60	; 0x3c
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f8ee 	bl	8006464 <memset>
                uint8_t test_page = 0x01;  // Example starting page
 8001288:	2301      	movs	r3, #1
 800128a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                int offset = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
                msg=0;
 8001292:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <main+0x2d4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
                HAL_UART_DeInit(&huart1);
 8001298:	489e      	ldr	r0, [pc, #632]	; (8001514 <main+0x2d0>)
 800129a:	f003 ff8b 	bl	80051b4 <HAL_UART_DeInit>
//                MX_I2C1_Init();
                // Write 0x00 to 32 pages and check
                for (int i = 0; i < eeprom_page_count; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012a2:	e012      	b.n	80012ca <main+0x86>
                    // EEPROM_Read(test_page, buf, length);

                    // Check result and store in buffer
                    // Assuming EEPROM_Write and EEPROM_Read are correctly implemented
                    if (1) {
                        eeprom_test_results[offset] = 1; // Fail
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012a8:	4413      	add	r3, r2
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
                    } else {
                        eeprom_test_results[offset] = 0; // Pass
                    }
                    offset++;
 80012ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b0:	3301      	adds	r3, #1
 80012b2:	653b      	str	r3, [r7, #80]	; 0x50
                    test_page++;
 80012b4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                    if (offset >= MAX_BUFFER_SIZE) {
 80012be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c0:	2b3f      	cmp	r3, #63	; 0x3f
 80012c2:	dc08      	bgt.n	80012d6 <main+0x92>
                for (int i = 0; i < eeprom_page_count; i++) {
 80012c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c6:	3301      	adds	r3, #1
 80012c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ca:	4b94      	ldr	r3, [pc, #592]	; (800151c <main+0x2d8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbe7      	blt.n	80012a4 <main+0x60>
 80012d4:	e000      	b.n	80012d8 <main+0x94>
                        break;  // Exit if buffer is full
 80012d6:	bf00      	nop
                    }
                }

                // Write 0xFF to 32 pages and check
                for (int i = 0; i < eeprom_page_count; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
 80012dc:	e012      	b.n	8001304 <main+0xc0>
                    // Check result and store in buffer
                    // Assuming EEPROM_Write and EEPROM_Read are correctly implemented
                    if (0) {
                        eeprom_test_results[offset] = 1; // Fail
                    } else {
                        eeprom_test_results[offset] = 0; // Pass
 80012de:	1d3a      	adds	r2, r7, #4
 80012e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
                    }
                    offset++;
 80012e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ea:	3301      	adds	r3, #1
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
                    test_page++;
 80012ee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80012f2:	3301      	adds	r3, #1
 80012f4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                    if (offset >= MAX_BUFFER_SIZE) {
 80012f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012fa:	2b3f      	cmp	r3, #63	; 0x3f
 80012fc:	dc08      	bgt.n	8001310 <main+0xcc>
                for (int i = 0; i < eeprom_page_count; i++) {
 80012fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001300:	3301      	adds	r3, #1
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
 8001304:	4b85      	ldr	r3, [pc, #532]	; (800151c <main+0x2d8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800130a:	429a      	cmp	r2, r3
 800130c:	dbe7      	blt.n	80012de <main+0x9a>
 800130e:	e000      	b.n	8001312 <main+0xce>
                        break;  // Exit if buffer is full
 8001310:	bf00      	nop
                    }

			}
//                HAL_I2C_DeInit(&hi2c1);
                MX_USART1_UART_Init();
 8001312:	f000 fe77 	bl	8002004 <MX_USART1_UART_Init>
                // Send the test results via UART
                SendTestResults(eeprom_test_results);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff6b 	bl	80011f4 <SendTestResults>
                test_result = 'P';
 800131e:	4b80      	ldr	r3, [pc, #512]	; (8001520 <main+0x2dc>)
 8001320:	2250      	movs	r2, #80	; 0x50
 8001322:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*) &test_result, 1,
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	2201      	movs	r2, #1
 800132a:	497d      	ldr	r1, [pc, #500]	; (8001520 <main+0x2dc>)
 800132c:	4879      	ldr	r0, [pc, #484]	; (8001514 <main+0x2d0>)
 800132e:	f003 ff73 	bl	8005218 <HAL_UART_Transmit>
                HAL_MAX_DELAY);
        }
        if ('2' == msg)
 8001332:	4b79      	ldr	r3, [pc, #484]	; (8001518 <main+0x2d4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b32      	cmp	r3, #50	; 0x32
 8001338:	d11d      	bne.n	8001376 <main+0x132>
        {
            printf("second  test completed\n");
 800133a:	487a      	ldr	r0, [pc, #488]	; (8001524 <main+0x2e0>)
 800133c:	f004 ff24 	bl	8006188 <puts>
            MX_TIM4_TEST2_Init();
 8001340:	f000 fd6c 	bl	8001e1c <MX_TIM4_TEST2_Init>
// Start PWM
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001344:	2100      	movs	r1, #0
 8001346:	4878      	ldr	r0, [pc, #480]	; (8001528 <main+0x2e4>)
 8001348:	f003 f820 	bl	800438c <HAL_TIM_PWM_Start>

// Delay for 2 seconds
            HAL_Delay(2000);
 800134c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001350:	f001 f9cc 	bl	80026ec <HAL_Delay>

// Stop PWM
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	4874      	ldr	r0, [pc, #464]	; (8001528 <main+0x2e4>)
 8001358:	f003 f8ba 	bl	80044d0 <HAL_TIM_PWM_Stop>

// Reset msg to prevent re-triggering
            msg = 0;
 800135c:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <main+0x2d4>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
            test_result = '-';
 8001362:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <main+0x2dc>)
 8001364:	222d      	movs	r2, #45	; 0x2d
 8001366:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t*) &test_result, 1,
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2201      	movs	r2, #1
 800136e:	496c      	ldr	r1, [pc, #432]	; (8001520 <main+0x2dc>)
 8001370:	4868      	ldr	r0, [pc, #416]	; (8001514 <main+0x2d0>)
 8001372:	f003 ff51 	bl	8005218 <HAL_UART_Transmit>
            HAL_MAX_DELAY);
        }
        if ('3' == msg)
 8001376:	4b68      	ldr	r3, [pc, #416]	; (8001518 <main+0x2d4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b33      	cmp	r3, #51	; 0x33
 800137c:	f040 80f2 	bne.w	8001564 <main+0x320>
        {
            test_repeat = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg = 0;
 8001386:	4b64      	ldr	r3, [pc, #400]	; (8001518 <main+0x2d4>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
//		                        sprintf(test_instruction, "Turn ON Test jig SW1 and Press 3\r\n");

            MX_TIM4_TEST3_Init();
 800138c:	f000 fd96 	bl	8001ebc <MX_TIM4_TEST3_Init>

// Restart the PWM with new settings
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001390:	2104      	movs	r1, #4
 8001392:	4865      	ldr	r0, [pc, #404]	; (8001528 <main+0x2e4>)
 8001394:	f002 fffa 	bl	800438c <HAL_TIM_PWM_Start>

            HAL_UART_Transmit(&huart1, (uint8_t*) test_instruction, strlen(test_instruction), HAL_MAX_DELAY);
 8001398:	4864      	ldr	r0, [pc, #400]	; (800152c <main+0x2e8>)
 800139a:	f7fe fed9 	bl	8000150 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	4961      	ldr	r1, [pc, #388]	; (800152c <main+0x2e8>)
 80013a8:	485a      	ldr	r0, [pc, #360]	; (8001514 <main+0x2d0>)
 80013aa:	f003 ff35 	bl	8005218 <HAL_UART_Transmit>

            while (test_repeat <= 2)  // Terminate when test_repeat becomes 2
 80013ae:	e0d1      	b.n	8001554 <main+0x310>
            {
                if ('3' == msg && 1 == test_repeat)
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <main+0x2d4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b33      	cmp	r3, #51	; 0x33
 80013b6:	d157      	bne.n	8001468 <main+0x224>
 80013b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d153      	bne.n	8001468 <main+0x224>
                {
                    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80013c0:	2104      	movs	r1, #4
 80013c2:	4859      	ldr	r0, [pc, #356]	; (8001528 <main+0x2e4>)
 80013c4:	f003 f884 	bl	80044d0 <HAL_TIM_PWM_Stop>

                    adcChannel_config(ADC_TEST_3);
 80013c8:	200b      	movs	r0, #11
 80013ca:	f7ff fe57 	bl	800107c <adcChannel_config>
                    HAL_ADC_Start(&hadc1);
 80013ce:	4858      	ldr	r0, [pc, #352]	; (8001530 <main+0x2ec>)
 80013d0:	f001 fa88 	bl	80028e4 <HAL_ADC_Start>

                    HAL_ADC_PollForConversion(&hadc1, 20);
 80013d4:	2114      	movs	r1, #20
 80013d6:	4856      	ldr	r0, [pc, #344]	; (8001530 <main+0x2ec>)
 80013d8:	f001 fb5e 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 80013dc:	4854      	ldr	r0, [pc, #336]	; (8001530 <main+0x2ec>)
 80013de:	f001 fc61 	bl	8002ca4 <HAL_ADC_GetValue>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b53      	ldr	r3, [pc, #332]	; (8001534 <main+0x2f0>)
 80013e8:	801a      	strh	r2, [r3, #0]
                    float voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <main+0x2f0>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc04 	bl	8000bfc <__aeabi_i2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4950      	ldr	r1, [pc, #320]	; (8001538 <main+0x2f4>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc53 	bl	8000ca4 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	494e      	ldr	r1, [pc, #312]	; (800153c <main+0x2f8>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fd02 	bl	8000e0c <__aeabi_fdiv>
 8001408:	4603      	mov	r3, r0
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
                    printf("ADC: %.2f\n", voltage);
 800140c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800140e:	f7ff f80b 	bl	8000428 <__aeabi_f2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	484a      	ldr	r0, [pc, #296]	; (8001540 <main+0x2fc>)
 8001418:	f004 fe50 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 800141c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4947      	ldr	r1, [pc, #284]	; (8001544 <main+0x300>)
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <main+0x304>)
 800142a:	f004 fee9 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <main+0x304>)
 8001430:	f7fe fe8e 	bl	8000150 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	4942      	ldr	r1, [pc, #264]	; (8001548 <main+0x304>)
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <main+0x2d0>)
 8001440:	f003 feea 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <main+0x2d4>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

//										sprintf(test_instruction, "Turn OFF Test jig SW1 and Press 3\r\n");
                    HAL_UART_Transmit(&huart1, (uint8_t*) test_instruction, strlen(test_instruction), HAL_MAX_DELAY);
 8001450:	4836      	ldr	r0, [pc, #216]	; (800152c <main+0x2e8>)
 8001452:	f7fe fe7d 	bl	8000150 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	4933      	ldr	r1, [pc, #204]	; (800152c <main+0x2e8>)
 8001460:	482c      	ldr	r0, [pc, #176]	; (8001514 <main+0x2d0>)
 8001462:	f003 fed9 	bl	8005218 <HAL_UART_Transmit>
                {
 8001466:	e075      	b.n	8001554 <main+0x310>

                }

                else if ('3' == msg && 2 == test_repeat)
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <main+0x2d4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b33      	cmp	r3, #51	; 0x33
 800146e:	d171      	bne.n	8001554 <main+0x310>
 8001470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001474:	2b02      	cmp	r3, #2
 8001476:	d16d      	bne.n	8001554 <main+0x310>
                {
                    HAL_ADC_PollForConversion(&hadc1, 20);
 8001478:	2114      	movs	r1, #20
 800147a:	482d      	ldr	r0, [pc, #180]	; (8001530 <main+0x2ec>)
 800147c:	f001 fb0c 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 8001480:	482b      	ldr	r0, [pc, #172]	; (8001530 <main+0x2ec>)
 8001482:	f001 fc0f 	bl	8002ca4 <HAL_ADC_GetValue>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <main+0x2f0>)
 800148c:	801a      	strh	r2, [r3, #0]
                    voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <main+0x2f0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fbb2 	bl	8000bfc <__aeabi_i2f>
 8001498:	4603      	mov	r3, r0
 800149a:	4927      	ldr	r1, [pc, #156]	; (8001538 <main+0x2f4>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc01 	bl	8000ca4 <__aeabi_fmul>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4925      	ldr	r1, [pc, #148]	; (800153c <main+0x2f8>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcb0 	bl	8000e0c <__aeabi_fdiv>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <main+0x308>)
 80014b2:	601a      	str	r2, [r3, #0]
                    printf("ADC: %.2f\n", voltage);
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <main+0x308>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	481f      	ldr	r0, [pc, #124]	; (8001540 <main+0x2fc>)
 80014c4:	f004 fdfa 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <main+0x308>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffab 	bl	8000428 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	491b      	ldr	r1, [pc, #108]	; (8001544 <main+0x300>)
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <main+0x304>)
 80014da:	f004 fe91 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 80014de:	481a      	ldr	r0, [pc, #104]	; (8001548 <main+0x304>)
 80014e0:	f7fe fe36 	bl	8000150 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	4916      	ldr	r1, [pc, #88]	; (8001548 <main+0x304>)
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <main+0x2d0>)
 80014f0:	f003 fe92 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 3;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <main+0x2d4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <main+0x2ec>)
 8001502:	f001 fa9d 	bl	8002a40 <HAL_ADC_Stop>
                    printf("Exiting loop on second '3' command.\n");
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <main+0x30c>)
 8001508:	f004 fe3e 	bl	8006188 <puts>
                    break;  // Exit the loop
 800150c:	e027      	b.n	800155e <main+0x31a>
 800150e:	bf00      	nop
 8001510:	2000032c 	.word	0x2000032c
 8001514:	200002b4 	.word	0x200002b4
 8001518:	2000032d 	.word	0x2000032d
 800151c:	20000000 	.word	0x20000000
 8001520:	2000035c 	.word	0x2000035c
 8001524:	0800857c 	.word	0x0800857c
 8001528:	20000224 	.word	0x20000224
 800152c:	20000360 	.word	0x20000360
 8001530:	200001f4 	.word	0x200001f4
 8001534:	20000330 	.word	0x20000330
 8001538:	40533333 	.word	0x40533333
 800153c:	457ff000 	.word	0x457ff000
 8001540:	08008594 	.word	0x08008594
 8001544:	080085a0 	.word	0x080085a0
 8001548:	20000334 	.word	0x20000334
 800154c:	200003c4 	.word	0x200003c4
 8001550:	080085b0 	.word	0x080085b0
            while (test_repeat <= 2)  // Terminate when test_repeat becomes 2
 8001554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001558:	2b02      	cmp	r3, #2
 800155a:	f67f af29 	bls.w	80013b0 <main+0x16c>
                }

            }
            test_repeat = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }

        if ('4' == msg)
 8001564:	4b83      	ldr	r3, [pc, #524]	; (8001774 <main+0x530>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b34      	cmp	r3, #52	; 0x34
 800156a:	f040 8175 	bne.w	8001858 <main+0x614>
        {
            msg = 0;
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <main+0x530>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
            test_repeat = 1;
 8001574:	2301      	movs	r3, #1
 8001576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            while (test_repeat <= 4)  // Terminate when test_repeat becomes 2
 800157a:	e165      	b.n	8001848 <main+0x604>
            {
                if ('4' == msg && 1 == test_repeat)
 800157c:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <main+0x530>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b34      	cmp	r3, #52	; 0x34
 8001582:	d151      	bne.n	8001628 <main+0x3e4>
 8001584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001588:	2b01      	cmp	r3, #1
 800158a:	d14d      	bne.n	8001628 <main+0x3e4>
                {

//                    MX_ADC1_Init();
                    // Configure the ADC channel
                    adcChannel_config(ADC_TEST_4);
 800158c:	200c      	movs	r0, #12
 800158e:	f7ff fd75 	bl	800107c <adcChannel_config>
                    HAL_ADC_Start(&hadc1);
 8001592:	4879      	ldr	r0, [pc, #484]	; (8001778 <main+0x534>)
 8001594:	f001 f9a6 	bl	80028e4 <HAL_ADC_Start>
                    HAL_ADC_PollForConversion(&hadc1, 20);
 8001598:	2114      	movs	r1, #20
 800159a:	4877      	ldr	r0, [pc, #476]	; (8001778 <main+0x534>)
 800159c:	f001 fa7c 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 80015a0:	4875      	ldr	r0, [pc, #468]	; (8001778 <main+0x534>)
 80015a2:	f001 fb7f 	bl	8002ca4 <HAL_ADC_GetValue>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b74      	ldr	r3, [pc, #464]	; (800177c <main+0x538>)
 80015ac:	801a      	strh	r2, [r3, #0]
                    voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 80015ae:	4b73      	ldr	r3, [pc, #460]	; (800177c <main+0x538>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb22 	bl	8000bfc <__aeabi_i2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4971      	ldr	r1, [pc, #452]	; (8001780 <main+0x53c>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb71 	bl	8000ca4 <__aeabi_fmul>
 80015c2:	4603      	mov	r3, r0
 80015c4:	496f      	ldr	r1, [pc, #444]	; (8001784 <main+0x540>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fc20 	bl	8000e0c <__aeabi_fdiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <main+0x544>)
 80015d2:	601a      	str	r2, [r3, #0]
                    printf("ADC: %.2f\n", voltage);
 80015d4:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <main+0x544>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	486a      	ldr	r0, [pc, #424]	; (800178c <main+0x548>)
 80015e4:	f004 fd6a 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <main+0x544>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff1b 	bl	8000428 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4966      	ldr	r1, [pc, #408]	; (8001790 <main+0x54c>)
 80015f8:	4866      	ldr	r0, [pc, #408]	; (8001794 <main+0x550>)
 80015fa:	f004 fe01 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 80015fe:	4865      	ldr	r0, [pc, #404]	; (8001794 <main+0x550>)
 8001600:	f7fe fda6 	bl	8000150 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	4961      	ldr	r1, [pc, #388]	; (8001794 <main+0x550>)
 800160e:	4862      	ldr	r0, [pc, #392]	; (8001798 <main+0x554>)
 8001610:	f003 fe02 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 2;
 8001614:	2302      	movs	r3, #2
 8001616:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <main+0x530>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 8001620:	4855      	ldr	r0, [pc, #340]	; (8001778 <main+0x534>)
 8001622:	f001 fa0d 	bl	8002a40 <HAL_ADC_Stop>
 8001626:	e10f      	b.n	8001848 <main+0x604>
                }
                else if ('4' == msg && 2 == test_repeat)
 8001628:	4b52      	ldr	r3, [pc, #328]	; (8001774 <main+0x530>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b34      	cmp	r3, #52	; 0x34
 800162e:	d14e      	bne.n	80016ce <main+0x48a>
 8001630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001634:	2b02      	cmp	r3, #2
 8001636:	d14a      	bne.n	80016ce <main+0x48a>
                {
//                    sConfig.Channel = ADC_TEST_4;
//                    MX_ADC1_Init();
                    HAL_ADC_Start(&hadc1);
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <main+0x534>)
 800163a:	f001 f953 	bl	80028e4 <HAL_ADC_Start>
                    HAL_ADC_PollForConversion(&hadc1, 20);
 800163e:	2114      	movs	r1, #20
 8001640:	484d      	ldr	r0, [pc, #308]	; (8001778 <main+0x534>)
 8001642:	f001 fa29 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 8001646:	484c      	ldr	r0, [pc, #304]	; (8001778 <main+0x534>)
 8001648:	f001 fb2c 	bl	8002ca4 <HAL_ADC_GetValue>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <main+0x538>)
 8001652:	801a      	strh	r2, [r3, #0]
                    voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 8001654:	4b49      	ldr	r3, [pc, #292]	; (800177c <main+0x538>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff facf 	bl	8000bfc <__aeabi_i2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4947      	ldr	r1, [pc, #284]	; (8001780 <main+0x53c>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb1e 	bl	8000ca4 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	4946      	ldr	r1, [pc, #280]	; (8001784 <main+0x540>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbcd 	bl	8000e0c <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <main+0x544>)
 8001678:	601a      	str	r2, [r3, #0]
                    printf("ADC: %.2f\n", voltage);
 800167a:	4b43      	ldr	r3, [pc, #268]	; (8001788 <main+0x544>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fed2 	bl	8000428 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4840      	ldr	r0, [pc, #256]	; (800178c <main+0x548>)
 800168a:	f004 fd17 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <main+0x544>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fec8 	bl	8000428 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	493c      	ldr	r1, [pc, #240]	; (8001790 <main+0x54c>)
 800169e:	483d      	ldr	r0, [pc, #244]	; (8001794 <main+0x550>)
 80016a0:	f004 fdae 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 80016a4:	483b      	ldr	r0, [pc, #236]	; (8001794 <main+0x550>)
 80016a6:	f7fe fd53 	bl	8000150 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4938      	ldr	r1, [pc, #224]	; (8001794 <main+0x550>)
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <main+0x554>)
 80016b6:	f003 fdaf 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 3;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <main+0x530>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 80016c6:	482c      	ldr	r0, [pc, #176]	; (8001778 <main+0x534>)
 80016c8:	f001 f9ba 	bl	8002a40 <HAL_ADC_Stop>
 80016cc:	e0bc      	b.n	8001848 <main+0x604>
                }
                else if ('4' == msg && 3 == test_repeat)
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <main+0x530>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b34      	cmp	r3, #52	; 0x34
 80016d4:	d162      	bne.n	800179c <main+0x558>
 80016d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d15e      	bne.n	800179c <main+0x558>
                {
//                    sConfig.Channel = ADC_TEST_4;
//                    MX_ADC1_Init();
                    HAL_ADC_Start(&hadc1);
 80016de:	4826      	ldr	r0, [pc, #152]	; (8001778 <main+0x534>)
 80016e0:	f001 f900 	bl	80028e4 <HAL_ADC_Start>
                    HAL_ADC_PollForConversion(&hadc1, 20);
 80016e4:	2114      	movs	r1, #20
 80016e6:	4824      	ldr	r0, [pc, #144]	; (8001778 <main+0x534>)
 80016e8:	f001 f9d6 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 80016ec:	4822      	ldr	r0, [pc, #136]	; (8001778 <main+0x534>)
 80016ee:	f001 fad9 	bl	8002ca4 <HAL_ADC_GetValue>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <main+0x538>)
 80016f8:	801a      	strh	r2, [r3, #0]
                    voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <main+0x538>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fa7c 	bl	8000bfc <__aeabi_i2f>
 8001704:	4603      	mov	r3, r0
 8001706:	491e      	ldr	r1, [pc, #120]	; (8001780 <main+0x53c>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff facb 	bl	8000ca4 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	491c      	ldr	r1, [pc, #112]	; (8001784 <main+0x540>)
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb7a 	bl	8000e0c <__aeabi_fdiv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <main+0x544>)
 800171e:	601a      	str	r2, [r3, #0]
                    printf("ADC: %.2f\n", voltage);
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <main+0x544>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe7f 	bl	8000428 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <main+0x548>)
 8001730:	f004 fcc4 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <main+0x544>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe75 	bl	8000428 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4913      	ldr	r1, [pc, #76]	; (8001790 <main+0x54c>)
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <main+0x550>)
 8001746:	f004 fd5b 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <main+0x550>)
 800174c:	f7fe fd00 	bl	8000150 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <main+0x550>)
 800175a:	480f      	ldr	r0, [pc, #60]	; (8001798 <main+0x554>)
 800175c:	f003 fd5c 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 4;
 8001760:	2304      	movs	r3, #4
 8001762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001766:	4b03      	ldr	r3, [pc, #12]	; (8001774 <main+0x530>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <main+0x534>)
 800176e:	f001 f967 	bl	8002a40 <HAL_ADC_Stop>
 8001772:	e069      	b.n	8001848 <main+0x604>
 8001774:	2000032d 	.word	0x2000032d
 8001778:	200001f4 	.word	0x200001f4
 800177c:	20000330 	.word	0x20000330
 8001780:	40533333 	.word	0x40533333
 8001784:	457ff000 	.word	0x457ff000
 8001788:	200003c4 	.word	0x200003c4
 800178c:	08008594 	.word	0x08008594
 8001790:	080085a0 	.word	0x080085a0
 8001794:	20000334 	.word	0x20000334
 8001798:	200002b4 	.word	0x200002b4
                }
                else if ('4' == msg && 4 == test_repeat)
 800179c:	4b9d      	ldr	r3, [pc, #628]	; (8001a14 <main+0x7d0>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b34      	cmp	r3, #52	; 0x34
 80017a2:	d151      	bne.n	8001848 <main+0x604>
 80017a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d14d      	bne.n	8001848 <main+0x604>
//                    // Configure the ADC channel
//                             if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//                             {
//                                Error_Handler(); // Configuration error
//                             }
                    HAL_ADC_Start(&hadc1);
 80017ac:	489a      	ldr	r0, [pc, #616]	; (8001a18 <main+0x7d4>)
 80017ae:	f001 f899 	bl	80028e4 <HAL_ADC_Start>
                    HAL_ADC_PollForConversion(&hadc1, 20);
 80017b2:	2114      	movs	r1, #20
 80017b4:	4898      	ldr	r0, [pc, #608]	; (8001a18 <main+0x7d4>)
 80017b6:	f001 f96f 	bl	8002a98 <HAL_ADC_PollForConversion>
                    adc_val = HAL_ADC_GetValue(&hadc1);
 80017ba:	4897      	ldr	r0, [pc, #604]	; (8001a18 <main+0x7d4>)
 80017bc:	f001 fa72 	bl	8002ca4 <HAL_ADC_GetValue>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b95      	ldr	r3, [pc, #596]	; (8001a1c <main+0x7d8>)
 80017c6:	801a      	strh	r2, [r3, #0]
                    voltage = (adc_val * 3.3f) / 4095.0f; // Calculate voltage
 80017c8:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <main+0x7d8>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fa15 	bl	8000bfc <__aeabi_i2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4992      	ldr	r1, [pc, #584]	; (8001a20 <main+0x7dc>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa64 	bl	8000ca4 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
 80017de:	4991      	ldr	r1, [pc, #580]	; (8001a24 <main+0x7e0>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb13 	bl	8000e0c <__aeabi_fdiv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <main+0x7e4>)
 80017ec:	601a      	str	r2, [r3, #0]
                    printf("ADC: %.2f\n", voltage);
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <main+0x7e4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe18 	bl	8000428 <__aeabi_f2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	488b      	ldr	r0, [pc, #556]	; (8001a2c <main+0x7e8>)
 80017fe:	f004 fc5d 	bl	80060bc <iprintf>
                    sprintf(output_voltage, "ADC: %.2f V\r\n", voltage);
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <main+0x7e4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe0e 	bl	8000428 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4987      	ldr	r1, [pc, #540]	; (8001a30 <main+0x7ec>)
 8001812:	4888      	ldr	r0, [pc, #544]	; (8001a34 <main+0x7f0>)
 8001814:	f004 fcf4 	bl	8006200 <siprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) output_voltage, strlen(output_voltage), HAL_MAX_DELAY);
 8001818:	4886      	ldr	r0, [pc, #536]	; (8001a34 <main+0x7f0>)
 800181a:	f7fe fc99 	bl	8000150 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	4983      	ldr	r1, [pc, #524]	; (8001a34 <main+0x7f0>)
 8001828:	4883      	ldr	r0, [pc, #524]	; (8001a38 <main+0x7f4>)
 800182a:	f003 fcf5 	bl	8005218 <HAL_UART_Transmit>
                    test_repeat = 5;
 800182e:	2305      	movs	r3, #5
 8001830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001834:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <main+0x7d0>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 800183a:	4877      	ldr	r0, [pc, #476]	; (8001a18 <main+0x7d4>)
 800183c:	f001 f900 	bl	8002a40 <HAL_ADC_Stop>
                    printf("Exiting loop on second '4' command.\n");
 8001840:	487e      	ldr	r0, [pc, #504]	; (8001a3c <main+0x7f8>)
 8001842:	f004 fca1 	bl	8006188 <puts>
                    break;  // Exit the loop
 8001846:	e004      	b.n	8001852 <main+0x60e>
            while (test_repeat <= 4)  // Terminate when test_repeat becomes 2
 8001848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800184c:	2b04      	cmp	r3, #4
 800184e:	f67f ae95 	bls.w	800157c <main+0x338>
                }

            }
            test_repeat = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }

        if ('5' == msg)
 8001858:	4b6e      	ldr	r3, [pc, #440]	; (8001a14 <main+0x7d0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b35      	cmp	r3, #53	; 0x35
 800185e:	d173      	bne.n	8001948 <main+0x704>
        {
            test_repeat = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            while (1)  // Terminate when test_repeat becomes 2
            {
                if ('5' == msg && 1 == test_repeat)
 8001866:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <main+0x7d0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b35      	cmp	r3, #53	; 0x35
 800186c:	d10f      	bne.n	800188e <main+0x64a>
 800186e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10b      	bne.n	800188e <main+0x64a>
                {
//                    duty_to_pulse = 398;
//                    MX_TIM4_TEST5_Init();
                	count_torch = 4;
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <main+0x7fc>)
 8001878:	2204      	movs	r2, #4
 800187a:	601a      	str	r2, [r3, #0]
//                    GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); // Clear mode and config bits for PB8
//                    GPIOB->CRH |= GPIO_CRH_MODE9_0; // Set PB8 to output mode, max speed 10 MHz
//                    GPIOB->ODR |= (1 << 9);  // Set PB8 high
                	MX_TIM3_Init();
 800187c:	f000 fa78 	bl	8001d70 <MX_TIM3_Init>
                    test_repeat = 2;
 8001880:	2302      	movs	r3, #2
 8001882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <main+0x7d0>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e05b      	b.n	8001946 <main+0x702>
                }
                else if ('5' == msg && 2 == test_repeat)
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <main+0x7d0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b35      	cmp	r3, #53	; 0x35
 8001894:	d113      	bne.n	80018be <main+0x67a>
 8001896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800189a:	2b02      	cmp	r3, #2
 800189c:	d10f      	bne.n	80018be <main+0x67a>
                {

//                    GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); // Clear mode and config bits for PB8
//                    GPIOB->CRH |= GPIO_CRH_MODE9_0; // Set PB8 to output mode, max speed 10 MHz
//                    GPIOB->CRH |= GPIO_CRH_CNF9_1; // Set PB8 to alternate function push-pull (AF2 for TIM1_CH1)
                	count_torch = 3;
 800189e:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <main+0x7fc>)
 80018a0:	2203      	movs	r2, #3
 80018a2:	601a      	str	r2, [r3, #0]

                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
 80018a4:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <main+0x800>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4867      	ldr	r0, [pc, #412]	; (8001a48 <main+0x804>)
 80018ac:	f004 fc06 	bl	80060bc <iprintf>

                    msg=0;
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <main+0x7d0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
//
// Restart the PWM with new settings
//                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
                    test_repeat = 3;
 80018b6:	2303      	movs	r3, #3
 80018b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80018bc:	e043      	b.n	8001946 <main+0x702>
//                    msg = 0;
                }
                else if ('5' == msg && 3 == test_repeat)
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <main+0x7d0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b35      	cmp	r3, #53	; 0x35
 80018c4:	d10d      	bne.n	80018e2 <main+0x69e>
 80018c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d109      	bne.n	80018e2 <main+0x69e>
                {
//                    duty_to_pulse = (uint16_t) DutytoPulse(50, 399);
//                	 duty_to_pulse = 3999;
                	count_torch = 2;
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <main+0x7fc>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
//                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
//                    MX_TIM3_Init();

// Restart the PWM with new settings
//                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
                    test_repeat = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 80018da:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <main+0x7d0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e031      	b.n	8001946 <main+0x702>
                }
                else if ('5' == msg && 4 == test_repeat)
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <main+0x7d0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b35      	cmp	r3, #53	; 0x35
 80018e8:	d10d      	bne.n	8001906 <main+0x6c2>
 80018ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d109      	bne.n	8001906 <main+0x6c2>
                {
//                    duty_to_pulse = (uint16_t) DutytoPulse(25, 399);
//                	duty_to_pulse = 1999;
//                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
                	count_torch = 1;
 80018f2:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <main+0x7fc>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
//                    MX_TIM3_Init();

// Restart the PWM with new settings
//                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
                    test_repeat = 5;
 80018f8:	2305      	movs	r3, #5
 80018fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <main+0x7d0>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e01f      	b.n	8001946 <main+0x702>
                }
                else if ('5' == msg && 5 == test_repeat)
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <main+0x7d0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b35      	cmp	r3, #53	; 0x35
 800190c:	d1ab      	bne.n	8001866 <main+0x622>
 800190e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001912:	2b05      	cmp	r3, #5
 8001914:	d1a7      	bne.n	8001866 <main+0x622>
                {
// Restart the PWM with new settings
//                    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
//                	HAL_TIM_Base_Stop(&htim3);
                	count_torch = 0;
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <main+0x7fc>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
                    test_repeat = 6;
 800191c:	2306      	movs	r3, #6
 800191e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <main+0x7d0>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
                    test_result = '-';
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <main+0x808>)
 800192a:	222d      	movs	r2, #45	; 0x2d
 800192c:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*) &test_result, 1,
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	2201      	movs	r2, #1
 8001934:	4945      	ldr	r1, [pc, #276]	; (8001a4c <main+0x808>)
 8001936:	4840      	ldr	r0, [pc, #256]	; (8001a38 <main+0x7f4>)
 8001938:	f003 fc6e 	bl	8005218 <HAL_UART_Transmit>
                    HAL_MAX_DELAY);
                    break;
 800193c:	bf00      	nop
                }
            }
            test_repeat = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001944:	e000      	b.n	8001948 <main+0x704>
                if ('5' == msg && 1 == test_repeat)
 8001946:	e78e      	b.n	8001866 <main+0x622>
        }

        if ('6' == msg)
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <main+0x7d0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b36      	cmp	r3, #54	; 0x36
 800194e:	f040 80f0 	bne.w	8001b32 <main+0x8ee>
        {
            test_repeat = 1;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            while (test_repeat <= 6)  // Terminate when test_repeat becomes 2
 8001958:	e0e3      	b.n	8001b22 <main+0x8de>
            {
                if ('6' == msg && 1 == test_repeat)
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <main+0x7d0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b36      	cmp	r3, #54	; 0x36
 8001960:	d122      	bne.n	80019a8 <main+0x764>
 8001962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11e      	bne.n	80019a8 <main+0x764>
                {
                    duty_to_pulse = 398;
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <main+0x800>)
 800196c:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8001970:	801a      	strh	r2, [r3, #0]
                    MX_TIM4_TEST6_Init();
 8001972:	f000 faf3 	bl	8001f5c <MX_TIM4_TEST6_Init>

// Configure PB8 as push-pull output
                    GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); // Clear mode and config bits for PB8
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <main+0x80c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <main+0x80c>)
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001980:	6053      	str	r3, [r2, #4]
                    GPIOB->CRH |= GPIO_CRH_MODE9_0; // Set PB8 to output mode, max speed 10 MHz
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <main+0x80c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <main+0x80c>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6053      	str	r3, [r2, #4]
                    GPIOB->ODR |= (1 << 9);  // Set PB6 high
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <main+0x80c>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <main+0x80c>)
 8001994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001998:	60d3      	str	r3, [r2, #12]
// Restart the PWM with new settings
                    test_repeat = 2;
 800199a:	2302      	movs	r3, #2
 800199c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <main+0x7d0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e0bc      	b.n	8001b22 <main+0x8de>
                }
                else if ('6' == msg && 2 == test_repeat)
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <main+0x7d0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b36      	cmp	r3, #54	; 0x36
 80019ae:	d153      	bne.n	8001a58 <main+0x814>
 80019b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d14f      	bne.n	8001a58 <main+0x814>
                {
// Configure PB8 as alternate function push-pull
                    GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9); // Clear mode and config bits for PB8
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <main+0x80c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <main+0x80c>)
 80019be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c2:	6053      	str	r3, [r2, #4]
                    GPIOB->CRH |= GPIO_CRH_MODE9_0; // Set PB8 to output mode, max speed 10 MHz
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <main+0x80c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <main+0x80c>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6053      	str	r3, [r2, #4]
                    GPIOB->CRH |= GPIO_CRH_CNF9_1; // Set PB8 to alternate function push-pull (AF2 for TIM1_CH1)
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <main+0x80c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <main+0x80c>)
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	6053      	str	r3, [r2, #4]
                    duty_to_pulse = (uint16_t) DutytoPulse(75, 399);
 80019dc:	f240 118f 	movw	r1, #399	; 0x18f
 80019e0:	204b      	movs	r0, #75	; 0x4b
 80019e2:	f7ff fbbd 	bl	8001160 <DutytoPulse>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <main+0x800>)
 80019ec:	801a      	strh	r2, [r3, #0]
                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <main+0x800>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4814      	ldr	r0, [pc, #80]	; (8001a48 <main+0x804>)
 80019f6:	f004 fb61 	bl	80060bc <iprintf>
                    MX_TIM4_TEST6_Init();
 80019fa:	f000 faaf 	bl	8001f5c <MX_TIM4_TEST6_Init>

// Restart the PWM with new settings
                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019fe:	2108      	movs	r1, #8
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <main+0x810>)
 8001a02:	f002 fcc3 	bl	800438c <HAL_TIM_PWM_Start>
                    test_repeat = 3;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001a0c:	4b01      	ldr	r3, [pc, #4]	; (8001a14 <main+0x7d0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e086      	b.n	8001b22 <main+0x8de>
 8001a14:	2000032d 	.word	0x2000032d
 8001a18:	200001f4 	.word	0x200001f4
 8001a1c:	20000330 	.word	0x20000330
 8001a20:	40533333 	.word	0x40533333
 8001a24:	457ff000 	.word	0x457ff000
 8001a28:	200003c4 	.word	0x200003c4
 8001a2c:	08008594 	.word	0x08008594
 8001a30:	080085a0 	.word	0x080085a0
 8001a34:	20000334 	.word	0x20000334
 8001a38:	200002b4 	.word	0x200002b4
 8001a3c:	080085d4 	.word	0x080085d4
 8001a40:	200003d0 	.word	0x200003d0
 8001a44:	2000032e 	.word	0x2000032e
 8001a48:	080085f8 	.word	0x080085f8
 8001a4c:	2000035c 	.word	0x2000035c
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	20000224 	.word	0x20000224
                }
                else if ('6' == msg && 3 == test_repeat)
 8001a58:	4b77      	ldr	r3, [pc, #476]	; (8001c38 <main+0x9f4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b36      	cmp	r3, #54	; 0x36
 8001a5e:	d11f      	bne.n	8001aa0 <main+0x85c>
 8001a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d11b      	bne.n	8001aa0 <main+0x85c>
                {
                    duty_to_pulse = (uint16_t) DutytoPulse(50, 399);
 8001a68:	f240 118f 	movw	r1, #399	; 0x18f
 8001a6c:	2032      	movs	r0, #50	; 0x32
 8001a6e:	f7ff fb77 	bl	8001160 <DutytoPulse>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <main+0x9f8>)
 8001a78:	801a      	strh	r2, [r3, #0]
                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <main+0x9f8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	486f      	ldr	r0, [pc, #444]	; (8001c40 <main+0x9fc>)
 8001a82:	f004 fb1b 	bl	80060bc <iprintf>
                    MX_TIM4_TEST6_Init();
 8001a86:	f000 fa69 	bl	8001f5c <MX_TIM4_TEST6_Init>

// Restart the PWM with new settings
                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	486d      	ldr	r0, [pc, #436]	; (8001c44 <main+0xa00>)
 8001a8e:	f002 fc7d 	bl	800438c <HAL_TIM_PWM_Start>
                    test_repeat = 4;
 8001a92:	2304      	movs	r3, #4
 8001a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001a98:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <main+0x9f4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e040      	b.n	8001b22 <main+0x8de>
                }
                else if ('6' == msg && 4 == test_repeat)
 8001aa0:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <main+0x9f4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b36      	cmp	r3, #54	; 0x36
 8001aa6:	d11f      	bne.n	8001ae8 <main+0x8a4>
 8001aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11b      	bne.n	8001ae8 <main+0x8a4>
                {
                    duty_to_pulse = (uint16_t) DutytoPulse(25, 399);
 8001ab0:	f240 118f 	movw	r1, #399	; 0x18f
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f7ff fb53 	bl	8001160 <DutytoPulse>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <main+0x9f8>)
 8001ac0:	801a      	strh	r2, [r3, #0]
                    printf("duty:%d\n", (uint16_t) duty_to_pulse);
 8001ac2:	4b5e      	ldr	r3, [pc, #376]	; (8001c3c <main+0x9f8>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	485d      	ldr	r0, [pc, #372]	; (8001c40 <main+0x9fc>)
 8001aca:	f004 faf7 	bl	80060bc <iprintf>
                    MX_TIM4_TEST6_Init();
 8001ace:	f000 fa45 	bl	8001f5c <MX_TIM4_TEST6_Init>

// Restart the PWM with new settings
                    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	485b      	ldr	r0, [pc, #364]	; (8001c44 <main+0xa00>)
 8001ad6:	f002 fc59 	bl	800438c <HAL_TIM_PWM_Start>
                    test_repeat = 5;
 8001ada:	2305      	movs	r3, #5
 8001adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <main+0x9f4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e01c      	b.n	8001b22 <main+0x8de>
                }
                else if ('6' == msg && 5 == test_repeat)
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <main+0x9f4>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b36      	cmp	r3, #54	; 0x36
 8001aee:	d118      	bne.n	8001b22 <main+0x8de>
 8001af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d114      	bne.n	8001b22 <main+0x8de>
                {
// Restart the PWM with new settings
                    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001af8:	2108      	movs	r1, #8
 8001afa:	4852      	ldr	r0, [pc, #328]	; (8001c44 <main+0xa00>)
 8001afc:	f002 fce8 	bl	80044d0 <HAL_TIM_PWM_Stop>
                    test_repeat = 6;
 8001b00:	2306      	movs	r3, #6
 8001b02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                    msg = 0;
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <main+0x9f4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
                    test_result = '-';
 8001b0c:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <main+0xa04>)
 8001b0e:	222d      	movs	r2, #45	; 0x2d
 8001b10:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Transmit(&huart1, (uint8_t*) &test_result, 1,
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	2201      	movs	r2, #1
 8001b18:	494b      	ldr	r1, [pc, #300]	; (8001c48 <main+0xa04>)
 8001b1a:	484c      	ldr	r0, [pc, #304]	; (8001c4c <main+0xa08>)
 8001b1c:	f003 fb7c 	bl	8005218 <HAL_UART_Transmit>
                    HAL_MAX_DELAY);
                    break;
 8001b20:	e004      	b.n	8001b2c <main+0x8e8>
            while (test_repeat <= 6)  // Terminate when test_repeat becomes 2
 8001b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	f67f af17 	bls.w	800195a <main+0x716>
                }
            }
            test_repeat = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }

        if ('7' == msg)
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <main+0x9f4>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b37      	cmp	r3, #55	; 0x37
 8001b38:	d136      	bne.n	8001ba8 <main+0x964>
        {
            msg = 0;
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <main+0x9f4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
            rcvbyte = 0;
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <main+0xa0c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
            while (1)
            {
                printf("ADC: %.2f\n", temp_voltage);
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <main+0xa10>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fc6c 	bl	8000428 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4840      	ldr	r0, [pc, #256]	; (8001c58 <main+0xa14>)
 8001b56:	f004 fab1 	bl	80060bc <iprintf>
                sprintf(temp_output_voltage, "ADC: %.2f V\r\n", temp_voltage);
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <main+0xa10>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc62 	bl	8000428 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	493c      	ldr	r1, [pc, #240]	; (8001c5c <main+0xa18>)
 8001b6a:	483d      	ldr	r0, [pc, #244]	; (8001c60 <main+0xa1c>)
 8001b6c:	f004 fb48 	bl	8006200 <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*) temp_output_voltage, strlen(temp_output_voltage), HAL_MAX_DELAY);
 8001b70:	483b      	ldr	r0, [pc, #236]	; (8001c60 <main+0xa1c>)
 8001b72:	f7fe faed 	bl	8000150 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	4938      	ldr	r1, [pc, #224]	; (8001c60 <main+0xa1c>)
 8001b80:	4832      	ldr	r0, [pc, #200]	; (8001c4c <main+0xa08>)
 8001b82:	f003 fb49 	bl	8005218 <HAL_UART_Transmit>
                HAL_Delay(500);  // Wait 500ms before the next iteration
 8001b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b8a:	f000 fdaf 	bl	80026ec <HAL_Delay>

// Check if the '7' command is sent again to exit the loop
                if ('7' == msg)
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <main+0x9f4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b37      	cmp	r3, #55	; 0x37
 8001b94:	d1d7      	bne.n	8001b46 <main+0x902>
                {
                    printf("Exiting loop on second '7' command.\n");
 8001b96:	4833      	ldr	r0, [pc, #204]	; (8001c64 <main+0xa20>)
 8001b98:	f004 faf6 	bl	8006188 <puts>
                    msg = 0;
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <main+0x9f4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Stop(&hadc1);
 8001ba2:	4831      	ldr	r0, [pc, #196]	; (8001c68 <main+0xa24>)
 8001ba4:	f000 ff4c 	bl	8002a40 <HAL_ADC_Stop>
                }
            }
        }


        if ('8' == msg)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <main+0x9f4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b38      	cmp	r3, #56	; 0x38
 8001bae:	f47f ab5e 	bne.w	800126e <main+0x2a>
        {
            test_repeat = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg = 0;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <main+0x9f4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
            rcvbyte = 0;
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <main+0xa0c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
            char warning_status[50];
            if (test_repeat == 1)
 8001bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d130      	bne.n	8001c2e <main+0x9ea>
            {

                if (temp_voltage > 2)
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <main+0xa10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fa21 	bl	800101c <__aeabi_fcmpgt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01a      	beq.n	8001c16 <main+0x9d2>
                {
                    snprintf(warning_status, sizeof(warning_status), "Yes Temperature exceeds %.2fV\r\n ", temp_voltage);
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <main+0xa10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc1f 	bl	8000428 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	1d38      	adds	r0, r7, #4
 8001bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <main+0xa28>)
 8001bf6:	2132      	movs	r1, #50	; 0x32
 8001bf8:	f004 face 	bl	8006198 <sniprintf>
                    HAL_UART_Transmit(&huart1, (uint8_t*) warning_status, strlen(warning_status), HAL_MAX_DELAY);
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faa6 	bl	8000150 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	1d39      	adds	r1, r7, #4
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <main+0xa08>)
 8001c10:	f003 fb02 	bl	8005218 <HAL_UART_Transmit>
 8001c14:	e008      	b.n	8001c28 <main+0x9e4>
                }

                else
                {

                    warning_status[0] = '-';
 8001c16:	232d      	movs	r3, #45	; 0x2d
 8001c18:	713b      	strb	r3, [r7, #4]
                    HAL_UART_Transmit(&huart1, (uint8_t*) warning_status, 1, HAL_MAX_DELAY);
 8001c1a:	1d39      	adds	r1, r7, #4
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	2201      	movs	r2, #1
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <main+0xa08>)
 8001c24:	f003 faf8 	bl	8005218 <HAL_UART_Transmit>
                }
                printf("Exiting loop on second '8' command.\n");
 8001c28:	4811      	ldr	r0, [pc, #68]	; (8001c70 <main+0xa2c>)
 8001c2a:	f004 faad 	bl	8006188 <puts>
                //msg = 0;
            }
            test_repeat = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ('1' == msg)
 8001c34:	f7ff bb1b 	b.w	800126e <main+0x2a>
 8001c38:	2000032d 	.word	0x2000032d
 8001c3c:	2000032e 	.word	0x2000032e
 8001c40:	080085f8 	.word	0x080085f8
 8001c44:	20000224 	.word	0x20000224
 8001c48:	2000035c 	.word	0x2000035c
 8001c4c:	200002b4 	.word	0x200002b4
 8001c50:	2000032c 	.word	0x2000032c
 8001c54:	200003c8 	.word	0x200003c8
 8001c58:	08008594 	.word	0x08008594
 8001c5c:	080085a0 	.word	0x080085a0
 8001c60:	20000348 	.word	0x20000348
 8001c64:	08008604 	.word	0x08008604
 8001c68:	200001f4 	.word	0x200001f4
 8001c6c:	08008628 	.word	0x08008628
 8001c70:	0800864c 	.word	0x0800864c

08001c74 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b094      	sub	sp, #80	; 0x50
 8001c78:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7e:	2228      	movs	r2, #40	; 0x28
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 fbee 	bl	8006464 <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cac:	2310      	movs	r3, #16
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fcf9 	bl	80036b0 <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x54>
    {
        Error_Handler();
 8001cc4:	f000 fa14 	bl	80020f0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 ff66 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0x7e>
    {
        Error_Handler();
 8001cee:	f000 f9ff 	bl	80020f0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 f8e7 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0x98>
    {
        Error_Handler();
 8001d08:	f000 f9f2 	bl	80020f0 <Error_Handler>
    }
}
 8001d0c:	bf00      	nop
 8001d0e:	3750      	adds	r7, #80	; 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <MX_ADC1_Init+0x54>)
 8001d1c:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d36:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <MX_ADC1_Init+0x50>)
 8001d46:	f000 fcf5 	bl	8002734 <HAL_ADC_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ADC1_Init+0x40>
    {
        Error_Handler();
 8001d50:	f000 f9ce 	bl	80020f0 <Error_Handler>
    }


    /* USER CODE BEGIN ADC1_Init 2 */
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <MX_ADC1_Init+0x58>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <MX_ADC1_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200001f4 	.word	0x200001f4
 8001d68:	40012400 	.word	0x40012400
 8001d6c:	20000320 	.word	0x20000320

08001d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <MX_TIM3_Init+0xa8>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001db4:	f002 f9f8 	bl	80041a8 <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001dbe:	f000 f997 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4811      	ldr	r0, [pc, #68]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001dd0:	f002 fd94 	bl	80048fc <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001dda:	f000 f989 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001dec:	f003 f922 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001df6:	f000 f97b 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001dfc:	f002 fa24 	bl	8004248 <HAL_TIM_Base_Start_IT>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x9a>
  {
      Error_Handler(); // Timer start Error
 8001e06:	f000 f973 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE END TIM3_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000026c 	.word	0x2000026c
 8001e18:	40000400 	.word	0x40000400

08001e1c <MX_TIM4_TEST2_Init>:
 * @brief TIM4_TEST2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM4_TEST2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    /* USER CODE END TIM4_Init 0 */

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <MX_TIM4_TEST2_Init+0x94>)
 8001e24:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 2665;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e34:	f640 2269 	movw	r2, #2665	; 0xa69
 8001e38:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e46:	4819      	ldr	r0, [pc, #100]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e48:	f002 fa50 	bl	80042ec <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM4_TEST2_Init+0x3a>
    {
        Error_Handler();
 8001e52:	f000 f94d 	bl	80020f0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_TIM4_TEST2_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_TIM4_TEST2_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e62:	4914      	ldr	r1, [pc, #80]	; (8001eb4 <MX_TIM4_TEST2_Init+0x98>)
 8001e64:	4811      	ldr	r0, [pc, #68]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e66:	f003 f8e5 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM4_TEST2_Init+0x58>
    {
        Error_Handler();
 8001e70:	f000 f93e 	bl	80020f0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_TIM4_TEST2_Init+0x9c>)
 8001e76:	2260      	movs	r2, #96	; 0x60
 8001e78:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 1333;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_TIM4_TEST2_Init+0x9c>)
 8001e7c:	f240 5235 	movw	r2, #1333	; 0x535
 8001e80:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <MX_TIM4_TEST2_Init+0x9c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_TIM4_TEST2_Init+0x9c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <MX_TIM4_TEST2_Init+0x9c>)
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001e94:	f002 fc70 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM4_TEST2_Init+0x86>
    {
        Error_Handler();
 8001e9e:	f000 f927 	bl	80020f0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <MX_TIM4_TEST2_Init+0x90>)
 8001ea4:	f000 f9dc 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000224 	.word	0x20000224
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	200002fc 	.word	0x200002fc
 8001eb8:	20000304 	.word	0x20000304

08001ebc <MX_TIM4_TEST3_Init>:
 * @brief TIM4_TEST2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM4_TEST3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    /* USER CODE END TIM4_Init 0 */

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ec2:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <MX_TIM4_TEST3_Init+0x94>)
 8001ec4:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 7999;
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ed4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ed8:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001ee8:	f002 fa00 	bl	80042ec <HAL_TIM_PWM_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM4_TEST3_Init+0x3a>
    {
        Error_Handler();
 8001ef2:	f000 f8fd 	bl	80020f0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_TIM4_TEST3_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_TIM4_TEST3_Init+0x98>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f02:	4914      	ldr	r1, [pc, #80]	; (8001f54 <MX_TIM4_TEST3_Init+0x98>)
 8001f04:	4811      	ldr	r0, [pc, #68]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001f06:	f003 f895 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM4_TEST3_Init+0x58>
    {
        Error_Handler();
 8001f10:	f000 f8ee 	bl	80020f0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_TIM4_TEST3_Init+0x9c>)
 8001f16:	2260      	movs	r2, #96	; 0x60
 8001f18:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 1999;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_TIM4_TEST3_Init+0x9c>)
 8001f1c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f20:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_TIM4_TEST3_Init+0x9c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_TIM4_TEST3_Init+0x9c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <MX_TIM4_TEST3_Init+0x9c>)
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001f34:	f002 fc20 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_TEST3_Init+0x86>
    {
        Error_Handler();
 8001f3e:	f000 f8d7 	bl	80020f0 <Error_Handler>
    // Start TIM4 in interrupt mode

    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <MX_TIM4_TEST3_Init+0x90>)
 8001f44:	f000 f98c 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000224 	.word	0x20000224
 8001f50:	40000800 	.word	0x40000800
 8001f54:	200002fc 	.word	0x200002fc
 8001f58:	20000304 	.word	0x20000304

08001f5c <MX_TIM4_TEST6_Init>:
 * @brief TIM4_TEST2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM4_TEST6_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    /* USER CODE END TIM4_Init 0 */

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f62:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <MX_TIM4_TEST6_Init+0x98>)
 8001f64:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 399;
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f74:	f240 128f 	movw	r2, #399	; 0x18f
 8001f78:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001f88:	f002 f9b0 	bl	80042ec <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_TEST6_Init+0x3a>
    {
        Error_Handler();
 8001f92:	f000 f8ad 	bl	80020f0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM4_TEST6_Init+0x9c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM4_TEST6_Init+0x9c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fa2:	4915      	ldr	r1, [pc, #84]	; (8001ff8 <MX_TIM4_TEST6_Init+0x9c>)
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001fa6:	f003 f845 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_TEST6_Init+0x58>
    {
        Error_Handler();
 8001fb0:	f000 f89e 	bl	80020f0 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_TIM4_TEST6_Init+0xa0>)
 8001fb6:	2260      	movs	r2, #96	; 0x60
 8001fb8:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = duty_to_pulse;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_TIM4_TEST6_Init+0xa4>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_TIM4_TEST6_Init+0xa0>)
 8001fc2:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <MX_TIM4_TEST6_Init+0xa0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_TIM4_TEST6_Init+0xa0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <MX_TIM4_TEST6_Init+0xa0>)
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001fd6:	f002 fbcf 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_TEST6_Init+0x88>
    {
        Error_Handler();
 8001fe0:	f000 f886 	bl	80020f0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <MX_TIM4_TEST6_Init+0x94>)
 8001fe6:	f000 f93b 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000224 	.word	0x20000224
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	200002fc 	.word	0x200002fc
 8001ffc:	20000304 	.word	0x20000304
 8002000:	2000032e 	.word	0x2000032e

08002004 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <MX_USART1_UART_Init+0x50>)
 800200c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART1_UART_Init+0x4c>)
 800203c:	f003 f86a 	bl	8005114 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002046:	f000 f853 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002b4 	.word	0x200002b4
 8002054:	40013800 	.word	0x40013800

08002058 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_GPIO_Init+0x90>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <MX_GPIO_Init+0x90>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_GPIO_Init+0x90>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_GPIO_Init+0x90>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <MX_GPIO_Init+0x90>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_GPIO_Init+0x90>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_GPIO_Init+0x90>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <MX_GPIO_Init+0x90>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_GPIO_Init+0x90>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ba:	480c      	ldr	r0, [pc, #48]	; (80020ec <MX_GPIO_Init+0x94>)
 80020bc:	f001 fae0 	bl	8003680 <HAL_GPIO_WritePin>

      /*Configure GPIO pin : PA12 */
      GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c4:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_GPIO_Init+0x94>)
 80020da:	f001 f891 	bl	8003200 <HAL_GPIO_Init>
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010c00 	.word	0x40010c00

080020f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80020f8:	e7fe      	b.n	80020f8 <Error_Handler+0x8>
	...

080020fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_MspInit+0x5c>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_MspInit+0x5c>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_MspInit+0x5c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x5c>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_MspInit+0x5c>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_MspInit+0x5c>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_MspInit+0x60>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_MspInit+0x60>)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000

08002160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_ADC_MspInit+0x6c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d121      	bne.n	80021c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_ADC_MspInit+0x70>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021b0:	230e      	movs	r3, #14
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b4:	2303      	movs	r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_ADC_MspInit+0x74>)
 80021c0:	f001 f81e 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40012400 	.word	0x40012400
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40011000 	.word	0x40011000

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_TIM_Base_MspInit+0x44>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d113      	bne.n	8002212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_TIM_Base_MspInit+0x48>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_TIM_Base_MspInit+0x48>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_TIM_Base_MspInit+0x48>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	201d      	movs	r0, #29
 8002208:	f000 ffc3 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800220c:	201d      	movs	r0, #29
 800220e:	f000 ffdc 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40000400 	.word	0x40000400
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_TIM_PWM_MspInit+0x34>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10b      	bne.n	800224e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_TIM_PWM_MspInit+0x38>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_TIM_PWM_MspInit+0x38>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_TIM_PWM_MspInit+0x38>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40000800 	.word	0x40000800
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_TIM_MspPostInit+0x5c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d118      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002298:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800229c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_TIM_MspPostInit+0x64>)
 80022ae:	f000 ffa7 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010c00 	.word	0x40010c00

080022c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_UART_MspInit+0x8c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d131      	bne.n	800234c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x90>)
 80022ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x90>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x90>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x90>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4619      	mov	r1, r3
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_UART_MspInit+0x94>)
 800232e:	f000 ff67 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_UART_MspInit+0x94>)
 8002348:	f000 ff5a 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013800 	.word	0x40013800
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800

08002360 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_UART_MspDeInit+0x30>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10a      	bne.n	8002388 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_UART_MspDeInit+0x34>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_UART_MspDeInit+0x34>)
 8002378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800237c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800237e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <HAL_UART_MspDeInit+0x38>)
 8002384:	f001 f8c0 	bl	8003508 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	40021000 	.word	0x40021000
 8002398:	40010800 	.word	0x40010800

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f966 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static int i;
  i++;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <SysTick_Handler+0x78>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <SysTick_Handler+0x78>)
 80023f0:	6013      	str	r3, [r2, #0]
  if(i == 500)
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <SysTick_Handler+0x78>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023fa:	d12b      	bne.n	8002454 <SysTick_Handler+0x74>
  {

      sConfig.Channel = ADC_TEST_7;             // Set the ADC channel
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <SysTick_Handler+0x7c>)
 80023fe:	220d      	movs	r2, #13
 8002400:	601a      	str	r2, [r3, #0]
      MX_ADC1_Init();                            // Initialize ADC1
 8002402:	f7ff fc87 	bl	8001d14 <MX_ADC1_Init>
      HAL_ADC_Start(&hadc1);                     // Start ADC
 8002406:	4816      	ldr	r0, [pc, #88]	; (8002460 <SysTick_Handler+0x80>)
 8002408:	f000 fa6c 	bl	80028e4 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 20);
 800240c:	2114      	movs	r1, #20
 800240e:	4814      	ldr	r0, [pc, #80]	; (8002460 <SysTick_Handler+0x80>)
 8002410:	f000 fb42 	bl	8002a98 <HAL_ADC_PollForConversion>

      temp_adc_val = HAL_ADC_GetValue(&hadc1);        // Get the ADC value
 8002414:	4812      	ldr	r0, [pc, #72]	; (8002460 <SysTick_Handler+0x80>)
 8002416:	f000 fc45 	bl	8002ca4 <HAL_ADC_GetValue>
 800241a:	4603      	mov	r3, r0
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <SysTick_Handler+0x84>)
 8002420:	801a      	strh	r2, [r3, #0]
      temp_voltage = (temp_adc_val * 3.3f) / 4095.0f; // Calculate voltage
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <SysTick_Handler+0x84>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fbe8 	bl	8000bfc <__aeabi_i2f>
 800242c:	4603      	mov	r3, r0
 800242e:	490e      	ldr	r1, [pc, #56]	; (8002468 <SysTick_Handler+0x88>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fc37 	bl	8000ca4 <__aeabi_fmul>
 8002436:	4603      	mov	r3, r0
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <SysTick_Handler+0x8c>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fce6 	bl	8000e0c <__aeabi_fdiv>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <SysTick_Handler+0x90>)
 8002446:	601a      	str	r2, [r3, #0]
      HAL_ADC_Stop(&hadc1);
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <SysTick_Handler+0x80>)
 800244a:	f000 faf9 	bl	8002a40 <HAL_ADC_Stop>

      i = 0;
 800244e:	4b02      	ldr	r3, [pc, #8]	; (8002458 <SysTick_Handler+0x78>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
      //read ADC
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200003d8 	.word	0x200003d8
 800245c:	20000320 	.word	0x20000320
 8002460:	200001f4 	.word	0x200001f4
 8002464:	200003cc 	.word	0x200003cc
 8002468:	40533333 	.word	0x40533333
 800246c:	457ff000 	.word	0x457ff000
 8002470:	200003c8 	.word	0x200003c8

08002474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM3_IRQHandler+0x10>)
 800247a:	f002 f88d 	bl	8004598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000026c 	.word	0x2000026c

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <_kill>:

int _kill(int pid, int sig)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a0:	f004 f832 	bl	8006508 <__errno>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2216      	movs	r2, #22
 80024a8:	601a      	str	r2, [r3, #0]
  return -1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_exit>:

void _exit (int status)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024be:	f04f 31ff 	mov.w	r1, #4294967295
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffe7 	bl	8002496 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c8:	e7fe      	b.n	80024c8 <_exit+0x12>

080024ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e00a      	b.n	80024f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024dc:	f3af 8000 	nop.w
 80024e0:	4601      	mov	r1, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	60ba      	str	r2, [r7, #8]
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf0      	blt.n	80024dc <_read+0x12>
  }

  return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
  return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <_isatty>:

int _isatty(int file)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f003 ffb8 	bl	8006508 <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	220c      	movs	r2, #12
 800259c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20005000 	.word	0x20005000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	200003dc 	.word	0x200003dc
 80025cc:	20000530 	.word	0x20000530

080025d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025dc:	f7ff fff8 	bl	80025d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025e2:	490c      	ldr	r1, [pc, #48]	; (8002614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025f8:	4c09      	ldr	r4, [pc, #36]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f003 ff85 	bl	8006514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800260a:	f7fe fe1b 	bl	8001244 <main>
  bx lr
 800260e:	4770      	bx	lr
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002618:	08008a24 	.word	0x08008a24
  ldr r2, =_sbss
 800261c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002620:	20000530 	.word	0x20000530

08002624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_2_IRQHandler>
	...

08002628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x28>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x28>)
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 fd9f 	bl	800317c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff fd5a 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fdb7 	bl	80031e6 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 fd7f 	bl	8003192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000004 	.word	0x20000004
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	20000008 	.word	0x20000008

080026b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_IncTick+0x1c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_IncTick+0x20>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_IncTick+0x20>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	200003e0 	.word	0x200003e0

080026d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return uwTick;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_GetTick+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	200003e0 	.word	0x200003e0

080026ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d005      	beq.n	8002712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_Delay+0x44>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002712:	bf00      	nop
 8002714:	f7ff ffe0 	bl	80026d8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8f7      	bhi.n	8002714 <HAL_Delay+0x28>
  {
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c

08002734 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0be      	b.n	80028d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fcf4 	bl	8002160 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fbf1 	bl	8002f60 <ADC_ConversionStop_Disable>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8099 	bne.w	80028c2 <HAL_ADC_Init+0x18e>
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8095 	bne.w	80028c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027cc:	d003      	beq.n	80027d6 <HAL_ADC_Init+0xa2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_ADC_Init+0xa8>
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027da:	e000      	b.n	80027de <HAL_ADC_Init+0xaa>
 80027dc:	2300      	movs	r3, #0
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7d1b      	ldrb	r3, [r3, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b1b      	ldrb	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	035a      	lsls	r2, r3, #13
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e00b      	b.n	8002820 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_ADC_Init+0x1a8>)
 800283c:	4013      	ands	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	430b      	orrs	r3, r1
 8002846:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002850:	d003      	beq.n	800285a <HAL_ADC_Init+0x126>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d104      	bne.n	8002864 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	3b01      	subs	r3, #1
 8002860:	051b      	lsls	r3, r3, #20
 8002862:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	430a      	orrs	r2, r1
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_ADC_Init+0x1ac>)
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d10b      	bne.n	80028a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800289e:	e018      	b.n	80028d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f023 0312 	bic.w	r3, r3, #18
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028c0:	e007      	b.n	80028d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	ffe1f7fd 	.word	0xffe1f7fd
 80028e0:	ff1f0efe 	.word	0xff1f0efe

080028e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Start+0x1a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e098      	b.n	8002a30 <HAL_ADC_Start+0x14c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fad0 	bl	8002eac <ADC_Enable>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8087 	bne.w	8002a26 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_ADC_Start+0x154>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d105      	bne.n	8002942 <HAL_ADC_Start+0x5e>
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_ADC_Start+0x158>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002964:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800296c:	e01d      	b.n	80029aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <HAL_ADC_Start+0x158>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_ADC_Start+0xaa>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_ADC_Start+0x154>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10d      	bne.n	80029aa <HAL_ADC_Start+0xc6>
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_ADC_Start+0x158>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f023 0206 	bic.w	r2, r3, #6
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029c2:	e002      	b.n	80029ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0202 	mvn.w	r2, #2
 80029da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029ea:	d113      	bne.n	8002a14 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_ADC_Start+0x154>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_ADC_Start+0x158>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	e00c      	b.n	8002a2e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40012800 	.word	0x40012800
 8002a3c:	40012400 	.word	0x40012400

08002a40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Stop+0x1a>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e01a      	b.n	8002a90 <HAL_ADC_Stop+0x50>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa7c 	bl	8002f60 <ADC_ConversionStop_Disable>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aae:	f7ff fe13 	bl	80026d8 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0d3      	b.n	8002c82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d131      	bne.n	8002b4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d12a      	bne.n	8002b4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002af6:	e021      	b.n	8002b3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d01d      	beq.n	8002b3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_ADC_PollForConversion+0x7e>
 8002b06:	f7ff fde7 	bl	80026d8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d212      	bcs.n	8002b3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0a2      	b.n	8002c82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0d6      	beq.n	8002af8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b4a:	e070      	b.n	8002c2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_ADC_PollForConversion+0x1f4>)
 8002b4e:	681c      	ldr	r4, [r3, #0]
 8002b50:	2002      	movs	r0, #2
 8002b52:	f001 fa73 	bl	800403c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b56:	4603      	mov	r3, r0
 8002b58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6919      	ldr	r1, [r3, #16]
 8002b62:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_ADC_PollForConversion+0x1f8>)
 8002b64:	400b      	ands	r3, r1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x104>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68d9      	ldr	r1, [r3, #12]
 8002b70:	4b48      	ldr	r3, [pc, #288]	; (8002c94 <HAL_ADC_PollForConversion+0x1fc>)
 8002b72:	400b      	ands	r3, r1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x104>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_ADC_PollForConversion+0x200>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x100>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68d9      	ldr	r1, [r3, #12]
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_ADC_PollForConversion+0x204>)
 8002b8e:	400b      	ands	r3, r1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_PollForConversion+0x100>
 8002b94:	2314      	movs	r3, #20
 8002b96:	e020      	b.n	8002bda <HAL_ADC_PollForConversion+0x142>
 8002b98:	2329      	movs	r3, #41	; 0x29
 8002b9a:	e01e      	b.n	8002bda <HAL_ADC_PollForConversion+0x142>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6919      	ldr	r1, [r3, #16]
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_ADC_PollForConversion+0x200>)
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_PollForConversion+0x120>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68d9      	ldr	r1, [r3, #12]
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_ADC_PollForConversion+0x204>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x13c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6919      	ldr	r1, [r3, #16]
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_ADC_PollForConversion+0x208>)
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_ADC_PollForConversion+0x140>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68d9      	ldr	r1, [r3, #12]
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_ADC_PollForConversion+0x208>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_PollForConversion+0x140>
 8002bd4:	2354      	movs	r3, #84	; 0x54
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_PollForConversion+0x142>
 8002bd8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002be0:	e021      	b.n	8002c26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d01a      	beq.n	8002c20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x168>
 8002bf0:	f7ff fd72 	bl	80026d8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d20f      	bcs.n	8002c20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d90b      	bls.n	8002c20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e030      	b.n	8002c82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d8d9      	bhi.n	8002be2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0212 	mvn.w	r2, #18
 8002c36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c52:	d115      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	24924924 	.word	0x24924924
 8002c94:	00924924 	.word	0x00924924
 8002c98:	12492492 	.word	0x12492492
 8002c9c:	00492492 	.word	0x00492492
 8002ca0:	00249249 	.word	0x00249249

08002ca4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0dc      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x1da>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d81c      	bhi.n	8002d26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b05      	subs	r3, #5
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4019      	ands	r1, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	3b05      	subs	r3, #5
 8002d18:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
 8002d24:	e03c      	b.n	8002da0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d81c      	bhi.n	8002d68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b23      	subs	r3, #35	; 0x23
 8002d40:	221f      	movs	r2, #31
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	4019      	ands	r1, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b23      	subs	r3, #35	; 0x23
 8002d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	e01b      	b.n	8002da0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b41      	subs	r3, #65	; 0x41
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4019      	ands	r1, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3b41      	subs	r3, #65	; 0x41
 8002d94:	fa00 f203 	lsl.w	r2, r0, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d91c      	bls.n	8002de2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	2207      	movs	r2, #7
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4019      	ands	r1, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6898      	ldr	r0, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b1e      	subs	r3, #30
 8002dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	e019      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	2207      	movs	r2, #7
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4019      	ands	r1, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6898      	ldr	r0, [r3, #8]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d003      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e22:	2b11      	cmp	r3, #17
 8002e24:	d132      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d125      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d126      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d11a      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	0c9a      	lsrs	r2, r3, #18
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x1b2>
 8002e7a:	e007      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40012400 	.word	0x40012400
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d040      	beq.n	8002f4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <ADC_Enable+0xac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <ADC_Enable+0xb0>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ee8:	e002      	b.n	8002ef0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef6:	f7ff fbef 	bl	80026d8 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002efc:	e01f      	b.n	8002f3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002efe:	f7ff fbeb 	bl	80026d8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d918      	bls.n	8002f3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d011      	beq.n	8002f3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e007      	b.n	8002f4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d1d8      	bne.n	8002efe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000004 	.word	0x20000004
 8002f5c:	431bde83 	.word	0x431bde83

08002f60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d12e      	bne.n	8002fd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f8a:	f7ff fba5 	bl	80026d8 <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f90:	e01b      	b.n	8002fca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f92:	f7ff fba1 	bl	80026d8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d914      	bls.n	8002fca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10d      	bne.n	8002fca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d0dc      	beq.n	8002f92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <__NVIC_SetPriorityGrouping>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4906      	ldr	r1, [pc, #24]	; (800307c <__NVIC_EnableIRQ+0x34>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	; (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <SysTick_Config>:
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003148:	d301      	bcc.n	800314e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <SysTick_Config+0x40>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003156:	210f      	movs	r1, #15
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f7ff ff90 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <SysTick_Config+0x40>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <SysTick_Config+0x40>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff2d 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff42 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff90 	bl	80030d4 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5f 	bl	8003080 <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff35 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ffa2 	bl	8003138 <SysTick_Config>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b08b      	sub	sp, #44	; 0x2c
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	e169      	b.n	80034e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003214:	2201      	movs	r2, #1
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 8158 	bne.w	80034e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a9a      	ldr	r2, [pc, #616]	; (80034a0 <HAL_GPIO_Init+0x2a0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d05e      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 800323c:	4a98      	ldr	r2, [pc, #608]	; (80034a0 <HAL_GPIO_Init+0x2a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d875      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003242:	4a98      	ldr	r2, [pc, #608]	; (80034a4 <HAL_GPIO_Init+0x2a4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d058      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003248:	4a96      	ldr	r2, [pc, #600]	; (80034a4 <HAL_GPIO_Init+0x2a4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d86f      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800324e:	4a96      	ldr	r2, [pc, #600]	; (80034a8 <HAL_GPIO_Init+0x2a8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d052      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003254:	4a94      	ldr	r2, [pc, #592]	; (80034a8 <HAL_GPIO_Init+0x2a8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d869      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800325a:	4a94      	ldr	r2, [pc, #592]	; (80034ac <HAL_GPIO_Init+0x2ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04c      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 8003260:	4a92      	ldr	r2, [pc, #584]	; (80034ac <HAL_GPIO_Init+0x2ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d863      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003266:	4a92      	ldr	r2, [pc, #584]	; (80034b0 <HAL_GPIO_Init+0x2b0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d046      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
 800326c:	4a90      	ldr	r2, [pc, #576]	; (80034b0 <HAL_GPIO_Init+0x2b0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d85d      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 8003272:	2b12      	cmp	r3, #18
 8003274:	d82a      	bhi.n	80032cc <HAL_GPIO_Init+0xcc>
 8003276:	2b12      	cmp	r3, #18
 8003278:	d859      	bhi.n	800332e <HAL_GPIO_Init+0x12e>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_GPIO_Init+0x80>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032fb 	.word	0x080032fb
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080032e7 	.word	0x080032e7
 800328c:	08003329 	.word	0x08003329
 8003290:	0800332f 	.word	0x0800332f
 8003294:	0800332f 	.word	0x0800332f
 8003298:	0800332f 	.word	0x0800332f
 800329c:	0800332f 	.word	0x0800332f
 80032a0:	0800332f 	.word	0x0800332f
 80032a4:	0800332f 	.word	0x0800332f
 80032a8:	0800332f 	.word	0x0800332f
 80032ac:	0800332f 	.word	0x0800332f
 80032b0:	0800332f 	.word	0x0800332f
 80032b4:	0800332f 	.word	0x0800332f
 80032b8:	0800332f 	.word	0x0800332f
 80032bc:	0800332f 	.word	0x0800332f
 80032c0:	0800332f 	.word	0x0800332f
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	4a79      	ldr	r2, [pc, #484]	; (80034b4 <HAL_GPIO_Init+0x2b4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032d2:	e02c      	b.n	800332e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	623b      	str	r3, [r7, #32]
          break;
 80032da:	e029      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	623b      	str	r3, [r7, #32]
          break;
 80032e4:	e024      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	3308      	adds	r3, #8
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e01f      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	330c      	adds	r3, #12
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e01a      	b.n	8003330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003302:	2304      	movs	r3, #4
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e013      	b.n	8003330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003310:	2308      	movs	r3, #8
 8003312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	611a      	str	r2, [r3, #16]
          break;
 800331a:	e009      	b.n	8003330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800331c:	2308      	movs	r3, #8
 800331e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	615a      	str	r2, [r3, #20]
          break;
 8003326:	e003      	b.n	8003330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
          break;
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x130>
          break;
 800332e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2bff      	cmp	r3, #255	; 0xff
 8003334:	d801      	bhi.n	800333a <HAL_GPIO_Init+0x13a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	e001      	b.n	800333e <HAL_GPIO_Init+0x13e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2bff      	cmp	r3, #255	; 0xff
 8003344:	d802      	bhi.n	800334c <HAL_GPIO_Init+0x14c>
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	e002      	b.n	8003352 <HAL_GPIO_Init+0x152>
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	3b08      	subs	r3, #8
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	210f      	movs	r1, #15
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80b1 	beq.w	80034e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_GPIO_Init+0x2b8>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003398:	4a48      	ldr	r2, [pc, #288]	; (80034bc <HAL_GPIO_Init+0x2bc>)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <HAL_GPIO_Init+0x2c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_GPIO_Init+0x1ec>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_GPIO_Init+0x2c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00d      	beq.n	80033e8 <HAL_GPIO_Init+0x1e8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <HAL_GPIO_Init+0x2c8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x1e4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3d      	ldr	r2, [pc, #244]	; (80034cc <HAL_GPIO_Init+0x2cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_GPIO_Init+0x1e0>
 80033dc:	2303      	movs	r3, #3
 80033de:	e006      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e004      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_GPIO_Init+0x1ee>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	f002 0203 	and.w	r2, r2, #3
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033fe:	492f      	ldr	r1, [pc, #188]	; (80034bc <HAL_GPIO_Init+0x2bc>)
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	492c      	ldr	r1, [pc, #176]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	4928      	ldr	r1, [pc, #160]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003430:	4013      	ands	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	4922      	ldr	r1, [pc, #136]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	60cb      	str	r3, [r1, #12]
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	43db      	mvns	r3, r3
 8003456:	491e      	ldr	r1, [pc, #120]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003458:	4013      	ands	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4918      	ldr	r1, [pc, #96]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	43db      	mvns	r3, r3
 800347e:	4914      	ldr	r1, [pc, #80]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003480:	4013      	ands	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e021      	b.n	80034e2 <HAL_GPIO_Init+0x2e2>
 800349e:	bf00      	nop
 80034a0:	10320000 	.word	0x10320000
 80034a4:	10310000 	.word	0x10310000
 80034a8:	10220000 	.word	0x10220000
 80034ac:	10210000 	.word	0x10210000
 80034b0:	10120000 	.word	0x10120000
 80034b4:	10110000 	.word	0x10110000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40010800 	.word	0x40010800
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40011000 	.word	0x40011000
 80034cc:	40011400 	.word	0x40011400
 80034d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_GPIO_Init+0x304>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	43db      	mvns	r3, r3
 80034dc:	4909      	ldr	r1, [pc, #36]	; (8003504 <HAL_GPIO_Init+0x304>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f ae8e 	bne.w	8003214 <HAL_GPIO_Init+0x14>
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	372c      	adds	r7, #44	; 0x2c
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003516:	e09a      	b.n	800364e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 808d 	beq.w	8003648 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800352e:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_GPIO_DeInit+0x160>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a46      	ldr	r2, [pc, #280]	; (800366c <HAL_GPIO_DeInit+0x164>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_GPIO_DeInit+0x78>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a45      	ldr	r2, [pc, #276]	; (8003670 <HAL_GPIO_DeInit+0x168>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00d      	beq.n	800357c <HAL_GPIO_DeInit+0x74>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a44      	ldr	r2, [pc, #272]	; (8003674 <HAL_GPIO_DeInit+0x16c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <HAL_GPIO_DeInit+0x70>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a43      	ldr	r2, [pc, #268]	; (8003678 <HAL_GPIO_DeInit+0x170>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_GPIO_DeInit+0x6c>
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <HAL_GPIO_DeInit+0x7a>
 8003574:	2304      	movs	r3, #4
 8003576:	e004      	b.n	8003582 <HAL_GPIO_DeInit+0x7a>
 8003578:	2302      	movs	r3, #2
 800357a:	e002      	b.n	8003582 <HAL_GPIO_DeInit+0x7a>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_GPIO_DeInit+0x7a>
 8003580:	2300      	movs	r3, #0
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	f002 0203 	and.w	r2, r2, #3
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	4093      	lsls	r3, r2
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	429a      	cmp	r2, r3
 8003590:	d132      	bne.n	80035f8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_GPIO_DeInit+0x174>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	43db      	mvns	r3, r3
 800359a:	4938      	ldr	r1, [pc, #224]	; (800367c <HAL_GPIO_DeInit+0x174>)
 800359c:	4013      	ands	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4931      	ldr	r1, [pc, #196]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80035bc:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	492d      	ldr	r1, [pc, #180]	; (800367c <HAL_GPIO_DeInit+0x174>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80035da:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_GPIO_DeInit+0x160>)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	481f      	ldr	r0, [pc, #124]	; (8003668 <HAL_GPIO_DeInit+0x160>)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	400a      	ands	r2, r1
 80035f2:	3302      	adds	r3, #2
 80035f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2bff      	cmp	r3, #255	; 0xff
 80035fc:	d801      	bhi.n	8003602 <HAL_GPIO_DeInit+0xfa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	e001      	b.n	8003606 <HAL_GPIO_DeInit+0xfe>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2bff      	cmp	r3, #255	; 0xff
 800360c:	d802      	bhi.n	8003614 <HAL_GPIO_DeInit+0x10c>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	e002      	b.n	800361a <HAL_GPIO_DeInit+0x112>
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3b08      	subs	r3, #8
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	210f      	movs	r1, #15
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	401a      	ands	r2, r3
 800362c:	2104      	movs	r1, #4
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	431a      	orrs	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	f47f af5e 	bne.w	8003518 <HAL_GPIO_DeInit+0x10>
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40010000 	.word	0x40010000
 800366c:	40010800 	.word	0x40010800
 8003670:	40010c00 	.word	0x40010c00
 8003674:	40011000 	.word	0x40011000
 8003678:	40011400 	.word	0x40011400
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
 800368c:	4613      	mov	r3, r2
 800368e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800369c:	e003      	b.n	80036a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	041a      	lsls	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e272      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8087 	beq.w	80037de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d0:	4b92      	ldr	r3, [pc, #584]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d00c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036dc:	4b8f      	ldr	r3, [pc, #572]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d112      	bne.n	800370e <HAL_RCC_OscConfig+0x5e>
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d10b      	bne.n	800370e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f6:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d06c      	beq.n	80037dc <HAL_RCC_OscConfig+0x12c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d168      	bne.n	80037dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e24c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x76>
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a7f      	ldr	r2, [pc, #508]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e02e      	b.n	8003784 <HAL_RCC_OscConfig+0xd4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x98>
 800372e:	4b7b      	ldr	r3, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7a      	ldr	r2, [pc, #488]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b78      	ldr	r3, [pc, #480]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0xd4>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0xbc>
 8003752:	4b72      	ldr	r3, [pc, #456]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a71      	ldr	r2, [pc, #452]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0xd4>
 800376c:	4b6b      	ldr	r3, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6a      	ldr	r2, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b68      	ldr	r3, [pc, #416]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a67      	ldr	r2, [pc, #412]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe ffa4 	bl	80026d8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003794:	f7fe ffa0 	bl	80026d8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e200      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b5d      	ldr	r3, [pc, #372]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0xe4>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe ff90 	bl	80026d8 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe ff8c 	bl	80026d8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1ec      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	4b53      	ldr	r3, [pc, #332]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x10c>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ea:	4b4c      	ldr	r3, [pc, #304]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037f6:	4b49      	ldr	r3, [pc, #292]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x18c>
 8003802:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x176>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1c0      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4939      	ldr	r1, [pc, #228]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCC_OscConfig+0x270>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe ff45 	bl	80026d8 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003852:	f7fe ff41 	bl	80026d8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1a1      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4927      	ldr	r1, [pc, #156]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <HAL_RCC_OscConfig+0x270>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe ff24 	bl	80026d8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe ff20 	bl	80026d8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e180      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03a      	beq.n	8003934 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d019      	beq.n	80038fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_RCC_OscConfig+0x274>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7fe ff04 	bl	80026d8 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe ff00 	bl	80026d8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e160      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f000 face 	bl	8003e94 <RCC_Delay>
 80038f8:	e01c      	b.n	8003934 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_OscConfig+0x274>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fe feea 	bl	80026d8 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003906:	e00f      	b.n	8003928 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003908:	f7fe fee6 	bl	80026d8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d908      	bls.n	8003928 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e146      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
 8003920:	42420000 	.word	0x42420000
 8003924:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b92      	ldr	r3, [pc, #584]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e9      	bne.n	8003908 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80a6 	beq.w	8003a8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b8b      	ldr	r3, [pc, #556]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10d      	bne.n	800396e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b88      	ldr	r3, [pc, #544]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4a87      	ldr	r2, [pc, #540]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	61d3      	str	r3, [r2, #28]
 800395e:	4b85      	ldr	r3, [pc, #532]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b82      	ldr	r3, [pc, #520]	; (8003b78 <HAL_RCC_OscConfig+0x4c8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d118      	bne.n	80039ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b7f      	ldr	r3, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0x4c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7e      	ldr	r2, [pc, #504]	; (8003b78 <HAL_RCC_OscConfig+0x4c8>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fe fea7 	bl	80026d8 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fe fea3 	bl	80026d8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b64      	cmp	r3, #100	; 0x64
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e103      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x4c8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x312>
 80039b4:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	e02d      	b.n	8003a1e <HAL_RCC_OscConfig+0x36e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x334>
 80039ca:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	e01c      	b.n	8003a1e <HAL_RCC_OscConfig+0x36e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCC_OscConfig+0x356>
 80039ec:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	6213      	str	r3, [r2, #32]
 80039f8:	4b5e      	ldr	r3, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	e00b      	b.n	8003a1e <HAL_RCC_OscConfig+0x36e>
 8003a06:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fe57 	bl	80026d8 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe fe53 	bl	80026d8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0b1      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a44:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RCC_OscConfig+0x37e>
 8003a50:	e014      	b.n	8003a7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fe fe41 	bl	80026d8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fe3d 	bl	80026d8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e09b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ee      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8087 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d061      	beq.n	8003b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d146      	bne.n	8003b3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fe11 	bl	80026d8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fe fe0d 	bl	80026d8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e06d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4921      	ldr	r1, [pc, #132]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a19      	ldr	r1, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	430b      	orrs	r3, r1
 8003b06:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x4cc>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fde1 	bl	80026d8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe fddd 	bl	80026d8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e03d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x46a>
 8003b38:	e035      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fdca 	bl	80026d8 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fdc6 	bl	80026d8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e026      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x498>
 8003b66:	e01e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e019      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x500>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0d0      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4965      	ldr	r1, [pc, #404]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b8      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c10:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a52      	ldr	r2, [pc, #328]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	494d      	ldr	r1, [pc, #308]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d040      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d115      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e07f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e073      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4936      	ldr	r1, [pc, #216]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fd18 	bl	80026d8 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fe fd14 	bl	80026d8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e053      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d210      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 0207 	bic.w	r2, r3, #7
 8003cea:	4922      	ldr	r1, [pc, #136]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e032      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4916      	ldr	r1, [pc, #88]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490e      	ldr	r1, [pc, #56]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d42:	f000 f821 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490a      	ldr	r1, [pc, #40]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1cc>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1d0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fc76 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	08008670 	.word	0x08008670
 8003d80:	20000004 	.word	0x20000004
 8003d84:	20000008 	.word	0x20000008

08003d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x30>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x36>
 8003db6:	e027      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dba:	613b      	str	r3, [r7, #16]
      break;
 8003dbc:	e027      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	0c5b      	lsrs	r3, r3, #17
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a0d      	ldr	r2, [pc, #52]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e004      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	613b      	str	r3, [r7, #16]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0a:	613b      	str	r3, [r7, #16]
      break;
 8003e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0e:	693b      	ldr	r3, [r7, #16]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	007a1200 	.word	0x007a1200
 8003e24:	08008688 	.word	0x08008688
 8003e28:	08008698 	.word	0x08008698
 8003e2c:	003d0900 	.word	0x003d0900

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	20000004 	.word	0x20000004

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e48:	f7ff fff2 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08008680 	.word	0x08008680

08003e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e70:	f7ff ffde 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	0adb      	lsrs	r3, r3, #11
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08008680 	.word	0x08008680

08003e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <RCC_Delay+0x34>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <RCC_Delay+0x38>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb0:	bf00      	nop
  }
  while (Delay --);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f9      	bne.n	8003eb0 <RCC_Delay+0x1c>
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	20000004 	.word	0x20000004
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d07d      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef0:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	61d3      	str	r3, [r2, #28]
 8003f08:	4b49      	ldr	r3, [pc, #292]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b46      	ldr	r3, [pc, #280]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d118      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a42      	ldr	r2, [pc, #264]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f30:	f7fe fbd2 	bl	80026d8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	e008      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fe fbce 	bl	80026d8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e06d      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02e      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d027      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f74:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f84:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f8a:	4a29      	ldr	r2, [pc, #164]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d014      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fb9d 	bl	80026d8 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fe fb99 	bl	80026d8 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e036      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ee      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4a13      	ldr	r2, [pc, #76]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	490b      	ldr	r1, [pc, #44]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4904      	ldr	r1, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	40007000 	.word	0x40007000
 8004038:	42420440 	.word	0x42420440

0800403c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b10      	cmp	r3, #16
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b10      	cmp	r3, #16
 8004062:	f200 808a 	bhi.w	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d045      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d075      	beq.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004072:	e082      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004074:	4b46      	ldr	r3, [pc, #280]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800407a:	4b45      	ldr	r3, [pc, #276]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07b      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0c9b      	lsrs	r3, r3, #18
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a41      	ldr	r2, [pc, #260]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	0c5b      	lsrs	r3, r3, #17
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040b8:	4a38      	ldr	r2, [pc, #224]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4a34      	ldr	r2, [pc, #208]	; (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040d4:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e0:	d102      	bne.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	61bb      	str	r3, [r7, #24]
      break;
 80040e6:	e04a      	b.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
      break;
 80040f6:	e042      	b.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d108      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e01f      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004134:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e00f      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004146:	d11c      	bne.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004154:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004158:	61bb      	str	r3, [r7, #24]
      break;
 800415a:	e012      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800415c:	e011      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800415e:	f7ff fe85 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8004162:	4602      	mov	r2, r0
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0b9b      	lsrs	r3, r3, #14
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	3301      	adds	r3, #1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	61bb      	str	r3, [r7, #24]
      break;
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004182:	bf00      	nop
    }
  }
  return (frequency);
 8004184:	69bb      	ldr	r3, [r7, #24]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	0800869c 	.word	0x0800869c
 8004198:	080086ac 	.word	0x080086ac
 800419c:	007a1200 	.word	0x007a1200
 80041a0:	003d0900 	.word	0x003d0900
 80041a4:	aaaaaaab 	.word	0xaaaaaaab

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe f802 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fc74 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e03a      	b.n	80042d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_TIM_Base_Start_IT+0x98>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0x58>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d009      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0x58>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0x58>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d010      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c2:	e007      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800

080042ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd ff86 	bl	8002224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fbd2 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_TIM_PWM_Start+0x24>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e022      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d109      	bne.n	80043ca <HAL_TIM_PWM_Start+0x3e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	bf14      	ite	ne
 80043c2:	2301      	movne	r3, #1
 80043c4:	2300      	moveq	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e015      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x58>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e008      	b.n	80043f6 <HAL_TIM_PWM_Start+0x6a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e05e      	b.n	80044bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0x82>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	e013      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0x92>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	e00b      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442c:	e003      	b.n	8004436 <HAL_TIM_PWM_Start+0xaa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fdd4 	bl	8004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <HAL_TIM_PWM_Start+0x138>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d107      	bne.n	800445e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_TIM_PWM_Start+0x138>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d009      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <HAL_TIM_PWM_Start+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIM_PWM_Start+0xfa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIM_PWM_Start+0x140>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b06      	cmp	r3, #6
 8004496:	d010      	beq.n	80044ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	e007      	b.n	80044ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fd82 	bl	8004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_TIM_PWM_Stop+0xc4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d117      	bne.n	8004522 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_TIM_PWM_Stop+0x52>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	f240 4344 	movw	r3, #1092	; 0x444
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <HAL_TIM_PWM_Stop+0x52>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	f241 1311 	movw	r3, #4369	; 0x1111
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_TIM_PWM_Stop+0x82>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	f240 4344 	movw	r3, #1092	; 0x444
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <HAL_TIM_PWM_Stop+0x82>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Stop+0x92>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	e013      	b.n	800458a <HAL_TIM_PWM_Stop+0xba>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Stop+0xa2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	e00b      	b.n	800458a <HAL_TIM_PWM_Stop+0xba>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Stop+0xb2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004580:	e003      	b.n	800458a <HAL_TIM_PWM_Stop+0xba>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40012c00 	.word	0x40012c00

08004598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d020      	beq.n	80045fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01b      	beq.n	80045fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0202 	mvn.w	r2, #2
 80045cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa5a 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa4d 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa5c 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0204 	mvn.w	r2, #4
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa34 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa27 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa36 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0208 	mvn.w	r2, #8
 8004664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa0e 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa01 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa10 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d020      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0210 	mvn.w	r2, #16
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2208      	movs	r2, #8
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9e8 	bl	8004a9c <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9db 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9ea 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fcd6 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fced 	bl	8005102 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9ba 	bl	8004ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0220 	mvn.w	r2, #32
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fcc0 	bl	80050f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004792:	2302      	movs	r3, #2
 8004794:	e0ae      	b.n	80048f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	f200 809f 	bhi.w	80048e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	080048e5 	.word	0x080048e5
 80047b4:	080048e5 	.word	0x080048e5
 80047b8:	080048e5 	.word	0x080048e5
 80047bc:	08004821 	.word	0x08004821
 80047c0:	080048e5 	.word	0x080048e5
 80047c4:	080048e5 	.word	0x080048e5
 80047c8:	080048e5 	.word	0x080048e5
 80047cc:	08004863 	.word	0x08004863
 80047d0:	080048e5 	.word	0x080048e5
 80047d4:	080048e5 	.word	0x080048e5
 80047d8:	080048e5 	.word	0x080048e5
 80047dc:	080048a3 	.word	0x080048a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f9e2 	bl	8004bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	619a      	str	r2, [r3, #24]
      break;
 800481e:	e064      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa28 	bl	8004c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      break;
 8004860:	e043      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fa71 	bl	8004d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0204 	bic.w	r2, r2, #4
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
      break;
 80048a0:	e023      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fabb 	bl	8004e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIM_ConfigClockSource+0x1c>
 8004914:	2302      	movs	r3, #2
 8004916:	e0b4      	b.n	8004a82 <HAL_TIM_ConfigClockSource+0x186>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004950:	d03e      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	f200 8087 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	f000 8086 	beq.w	8004a6e <HAL_TIM_ConfigClockSource+0x172>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d87f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b70      	cmp	r3, #112	; 0x70
 800496a:	d01a      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xa6>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d87b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d050      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x11a>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d877      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d03c      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xfa>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d873      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d058      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x13a>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d86f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d064      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d86b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d060      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d867      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d05a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	e062      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b2:	f000 fafc 	bl	8004fae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e04f      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e0:	f000 fae5 	bl	8004fae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e03c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 fa5c 	bl	8004ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	; 0x50
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fab3 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004a14:	e02c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fa7a 	bl	8004f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	; 0x60
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 faa3 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004a34:	e01c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fa3c 	bl	8004ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa93 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004a54:	e00c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fa8a 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004a66:	e003      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
	...

08004ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <TIM_Base_SetConfig+0xd0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_Base_SetConfig+0x30>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d007      	beq.n	8004b04 <TIM_Base_SetConfig+0x30>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <TIM_Base_SetConfig+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0x30>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <TIM_Base_SetConfig+0xd8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <TIM_Base_SetConfig+0xd0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <TIM_Base_SetConfig+0xd4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <TIM_Base_SetConfig+0xd8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <TIM_Base_SetConfig+0xd0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d103      	bne.n	8004b7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	611a      	str	r2, [r3, #16]
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40000400 	.word	0x40000400
 8004bac:	40000800 	.word	0x40000800

08004bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f023 0201 	bic.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 0302 	bic.w	r3, r3, #2
 8004bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <TIM_OC1_SetConfig+0xc8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10c      	bne.n	8004c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0308 	bic.w	r3, r3, #8
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <TIM_OC1_SetConfig+0xc8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00

08004c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0210 	bic.w	r2, r3, #16
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 0320 	bic.w	r3, r3, #32
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <TIM_OC2_SetConfig+0xd0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10d      	bne.n	8004cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <TIM_OC2_SetConfig+0xd0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d113      	bne.n	8004d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00

08004d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <TIM_OC3_SetConfig+0xd0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10d      	bne.n	8004dca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <TIM_OC3_SetConfig+0xd0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d113      	bne.n	8004dfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00

08004e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a0f      	ldr	r2, [pc, #60]	; (8004ebc <TIM_OC4_SetConfig+0x98>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d109      	bne.n	8004e98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00

08004ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 030a 	bic.w	r3, r3, #10
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0210 	bic.w	r2, r3, #16
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	031b      	lsls	r3, r3, #12
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	609a      	str	r2, [r3, #8]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	431a      	orrs	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e046      	b.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005098:	d009      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a10      	ldr	r2, [pc, #64]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10c      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800

080050f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e042      	b.n	80051ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd f8c4 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa01 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800516c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800517c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800518c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e024      	b.n	8005210 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2224      	movs	r2, #36	; 0x24
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051dc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd f8be 	bl	8002360 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	d175      	bne.n	8005324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Transmit+0x2c>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e06e      	b.n	8005326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2221      	movs	r2, #33	; 0x21
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005256:	f7fd fa3f 	bl	80026d8 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d108      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e003      	b.n	800528c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800528c:	e02e      	b.n	80052ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f86d 	bl	8005378 <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03a      	b.n	8005326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3302      	adds	r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	e007      	b.n	80052de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3301      	adds	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1cb      	bne.n	800528e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f839 	bl	8005378 <UART_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b20      	cmp	r3, #32
 8005346:	d112      	bne.n	800536e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_UART_Receive_IT+0x26>
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e00b      	b.n	8005370 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	461a      	mov	r2, r3
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f860 	bl	800542a <UART_Start_Receive_IT>
 800536a:	4603      	mov	r3, r0
 800536c:	e000      	b.n	8005370 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800536e:	2302      	movs	r3, #2
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005388:	e03b      	b.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d037      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fd f9a1 	bl	80026d8 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e03a      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d023      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d020      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d01d      	beq.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d116      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f856 	bl	800549c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2208      	movs	r2, #8
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e00f      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d0b4      	beq.n	800538a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2222      	movs	r2, #34	; 0x22
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0220 	orr.w	r2, r2, #32
 800548e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b095      	sub	sp, #84	; 0x54
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c4:	643a      	str	r2, [r7, #64]	; 0x40
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e5      	bne.n	80054a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	2b01      	cmp	r3, #1
 8005512:	d119      	bne.n	8005548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60bb      	str	r3, [r7, #8]
   return(result);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005534:	61ba      	str	r2, [r7, #24]
 8005536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	613b      	str	r3, [r7, #16]
   return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005556:	bf00      	nop
 8005558:	3754      	adds	r7, #84	; 0x54
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800559a:	f023 030c 	bic.w	r3, r3, #12
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2c      	ldr	r2, [pc, #176]	; (8005674 <UART_SetConfig+0x114>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7fe fc50 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	e002      	b.n	80055d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fe fc38 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 80055d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009a      	lsls	r2, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	4a22      	ldr	r2, [pc, #136]	; (8005678 <UART_SetConfig+0x118>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	0119      	lsls	r1, r3, #4
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	fbb2 f2f3 	udiv	r2, r2, r3
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <UART_SetConfig+0x118>)
 800560e:	fba3 0302 	umull	r0, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2064      	movs	r0, #100	; 0x64
 8005616:	fb00 f303 	mul.w	r3, r0, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	; 0x32
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <UART_SetConfig+0x118>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800562c:	4419      	add	r1, r3
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009a      	lsls	r2, r3, #2
 8005638:	441a      	add	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	fbb2 f2f3 	udiv	r2, r2, r3
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <UART_SetConfig+0x118>)
 8005646:	fba3 0302 	umull	r0, r3, r3, r2
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2064      	movs	r0, #100	; 0x64
 800564e:	fb00 f303 	mul.w	r3, r0, r3
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	3332      	adds	r3, #50	; 0x32
 8005658:	4a07      	ldr	r2, [pc, #28]	; (8005678 <UART_SetConfig+0x118>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	440a      	add	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40013800 	.word	0x40013800
 8005678:	51eb851f 	.word	0x51eb851f

0800567c <__cvt>:
 800567c:	2b00      	cmp	r3, #0
 800567e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005682:	461f      	mov	r7, r3
 8005684:	bfbb      	ittet	lt
 8005686:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800568a:	461f      	movlt	r7, r3
 800568c:	2300      	movge	r3, #0
 800568e:	232d      	movlt	r3, #45	; 0x2d
 8005690:	b088      	sub	sp, #32
 8005692:	4614      	mov	r4, r2
 8005694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005696:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005698:	7013      	strb	r3, [r2, #0]
 800569a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800569c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056a0:	f023 0820 	bic.w	r8, r3, #32
 80056a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056a8:	d005      	beq.n	80056b6 <__cvt+0x3a>
 80056aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056ae:	d100      	bne.n	80056b2 <__cvt+0x36>
 80056b0:	3501      	adds	r5, #1
 80056b2:	2302      	movs	r3, #2
 80056b4:	e000      	b.n	80056b8 <__cvt+0x3c>
 80056b6:	2303      	movs	r3, #3
 80056b8:	aa07      	add	r2, sp, #28
 80056ba:	9204      	str	r2, [sp, #16]
 80056bc:	aa06      	add	r2, sp, #24
 80056be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056c2:	e9cd 3500 	strd	r3, r5, [sp]
 80056c6:	4622      	mov	r2, r4
 80056c8:	463b      	mov	r3, r7
 80056ca:	f000 ffe1 	bl	8006690 <_dtoa_r>
 80056ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056d2:	4606      	mov	r6, r0
 80056d4:	d102      	bne.n	80056dc <__cvt+0x60>
 80056d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d8:	07db      	lsls	r3, r3, #31
 80056da:	d522      	bpl.n	8005722 <__cvt+0xa6>
 80056dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056e0:	eb06 0905 	add.w	r9, r6, r5
 80056e4:	d110      	bne.n	8005708 <__cvt+0x8c>
 80056e6:	7833      	ldrb	r3, [r6, #0]
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d10a      	bne.n	8005702 <__cvt+0x86>
 80056ec:	2200      	movs	r2, #0
 80056ee:	2300      	movs	r3, #0
 80056f0:	4620      	mov	r0, r4
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fb f958 	bl	80009a8 <__aeabi_dcmpeq>
 80056f8:	b918      	cbnz	r0, 8005702 <__cvt+0x86>
 80056fa:	f1c5 0501 	rsb	r5, r5, #1
 80056fe:	f8ca 5000 	str.w	r5, [sl]
 8005702:	f8da 3000 	ldr.w	r3, [sl]
 8005706:	4499      	add	r9, r3
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	4620      	mov	r0, r4
 800570e:	4639      	mov	r1, r7
 8005710:	f7fb f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8005714:	b108      	cbz	r0, 800571a <__cvt+0x9e>
 8005716:	f8cd 901c 	str.w	r9, [sp, #28]
 800571a:	2230      	movs	r2, #48	; 0x30
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	454b      	cmp	r3, r9
 8005720:	d307      	bcc.n	8005732 <__cvt+0xb6>
 8005722:	4630      	mov	r0, r6
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005728:	1b9b      	subs	r3, r3, r6
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	b008      	add	sp, #32
 800572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005732:	1c59      	adds	r1, r3, #1
 8005734:	9107      	str	r1, [sp, #28]
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e7f0      	b.n	800571c <__cvt+0xa0>

0800573a <__exponent>:
 800573a:	4603      	mov	r3, r0
 800573c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800573e:	2900      	cmp	r1, #0
 8005740:	f803 2b02 	strb.w	r2, [r3], #2
 8005744:	bfb6      	itet	lt
 8005746:	222d      	movlt	r2, #45	; 0x2d
 8005748:	222b      	movge	r2, #43	; 0x2b
 800574a:	4249      	neglt	r1, r1
 800574c:	2909      	cmp	r1, #9
 800574e:	7042      	strb	r2, [r0, #1]
 8005750:	dd2a      	ble.n	80057a8 <__exponent+0x6e>
 8005752:	f10d 0207 	add.w	r2, sp, #7
 8005756:	4617      	mov	r7, r2
 8005758:	260a      	movs	r6, #10
 800575a:	fb91 f5f6 	sdiv	r5, r1, r6
 800575e:	4694      	mov	ip, r2
 8005760:	fb06 1415 	mls	r4, r6, r5, r1
 8005764:	3430      	adds	r4, #48	; 0x30
 8005766:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800576a:	460c      	mov	r4, r1
 800576c:	2c63      	cmp	r4, #99	; 0x63
 800576e:	4629      	mov	r1, r5
 8005770:	f102 32ff 	add.w	r2, r2, #4294967295
 8005774:	dcf1      	bgt.n	800575a <__exponent+0x20>
 8005776:	3130      	adds	r1, #48	; 0x30
 8005778:	f1ac 0402 	sub.w	r4, ip, #2
 800577c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005780:	4622      	mov	r2, r4
 8005782:	1c41      	adds	r1, r0, #1
 8005784:	42ba      	cmp	r2, r7
 8005786:	d30a      	bcc.n	800579e <__exponent+0x64>
 8005788:	f10d 0209 	add.w	r2, sp, #9
 800578c:	eba2 020c 	sub.w	r2, r2, ip
 8005790:	42bc      	cmp	r4, r7
 8005792:	bf88      	it	hi
 8005794:	2200      	movhi	r2, #0
 8005796:	4413      	add	r3, r2
 8005798:	1a18      	subs	r0, r3, r0
 800579a:	b003      	add	sp, #12
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80057a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80057a6:	e7ed      	b.n	8005784 <__exponent+0x4a>
 80057a8:	2330      	movs	r3, #48	; 0x30
 80057aa:	3130      	adds	r1, #48	; 0x30
 80057ac:	7083      	strb	r3, [r0, #2]
 80057ae:	70c1      	strb	r1, [r0, #3]
 80057b0:	1d03      	adds	r3, r0, #4
 80057b2:	e7f1      	b.n	8005798 <__exponent+0x5e>

080057b4 <_printf_float>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	b091      	sub	sp, #68	; 0x44
 80057ba:	460c      	mov	r4, r1
 80057bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80057c0:	4616      	mov	r6, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	4605      	mov	r5, r0
 80057c6:	f000 fe55 	bl	8006474 <_localeconv_r>
 80057ca:	6803      	ldr	r3, [r0, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	f7fa fcbe 	bl	8000150 <strlen>
 80057d4:	2300      	movs	r3, #0
 80057d6:	930e      	str	r3, [sp, #56]	; 0x38
 80057d8:	f8d8 3000 	ldr.w	r3, [r8]
 80057dc:	900a      	str	r0, [sp, #40]	; 0x28
 80057de:	3307      	adds	r3, #7
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	f103 0208 	add.w	r2, r3, #8
 80057e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80057ec:	f8d4 b000 	ldr.w	fp, [r4]
 80057f0:	f8c8 2000 	str.w	r2, [r8]
 80057f4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80057f8:	4652      	mov	r2, sl
 80057fa:	4643      	mov	r3, r8
 80057fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005800:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005804:	930b      	str	r3, [sp, #44]	; 0x2c
 8005806:	f04f 32ff 	mov.w	r2, #4294967295
 800580a:	4650      	mov	r0, sl
 800580c:	4b9c      	ldr	r3, [pc, #624]	; (8005a80 <_printf_float+0x2cc>)
 800580e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005810:	f7fb f8fc 	bl	8000a0c <__aeabi_dcmpun>
 8005814:	bb70      	cbnz	r0, 8005874 <_printf_float+0xc0>
 8005816:	f04f 32ff 	mov.w	r2, #4294967295
 800581a:	4650      	mov	r0, sl
 800581c:	4b98      	ldr	r3, [pc, #608]	; (8005a80 <_printf_float+0x2cc>)
 800581e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005820:	f7fb f8d6 	bl	80009d0 <__aeabi_dcmple>
 8005824:	bb30      	cbnz	r0, 8005874 <_printf_float+0xc0>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	4650      	mov	r0, sl
 800582c:	4641      	mov	r1, r8
 800582e:	f7fb f8c5 	bl	80009bc <__aeabi_dcmplt>
 8005832:	b110      	cbz	r0, 800583a <_printf_float+0x86>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583a:	4a92      	ldr	r2, [pc, #584]	; (8005a84 <_printf_float+0x2d0>)
 800583c:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <_printf_float+0x2d4>)
 800583e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005842:	bf94      	ite	ls
 8005844:	4690      	movls	r8, r2
 8005846:	4698      	movhi	r8, r3
 8005848:	2303      	movs	r3, #3
 800584a:	f04f 0a00 	mov.w	sl, #0
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	f02b 0304 	bic.w	r3, fp, #4
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	4633      	mov	r3, r6
 8005858:	4621      	mov	r1, r4
 800585a:	4628      	mov	r0, r5
 800585c:	9700      	str	r7, [sp, #0]
 800585e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005860:	f000 f9d6 	bl	8005c10 <_printf_common>
 8005864:	3001      	adds	r0, #1
 8005866:	f040 8090 	bne.w	800598a <_printf_float+0x1d6>
 800586a:	f04f 30ff 	mov.w	r0, #4294967295
 800586e:	b011      	add	sp, #68	; 0x44
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	4652      	mov	r2, sl
 8005876:	4643      	mov	r3, r8
 8005878:	4650      	mov	r0, sl
 800587a:	4641      	mov	r1, r8
 800587c:	f7fb f8c6 	bl	8000a0c <__aeabi_dcmpun>
 8005880:	b148      	cbz	r0, 8005896 <_printf_float+0xe2>
 8005882:	f1b8 0f00 	cmp.w	r8, #0
 8005886:	bfb8      	it	lt
 8005888:	232d      	movlt	r3, #45	; 0x2d
 800588a:	4a80      	ldr	r2, [pc, #512]	; (8005a8c <_printf_float+0x2d8>)
 800588c:	bfb8      	it	lt
 800588e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005892:	4b7f      	ldr	r3, [pc, #508]	; (8005a90 <_printf_float+0x2dc>)
 8005894:	e7d3      	b.n	800583e <_printf_float+0x8a>
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	d142      	bne.n	8005926 <_printf_float+0x172>
 80058a0:	2306      	movs	r3, #6
 80058a2:	6063      	str	r3, [r4, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	9206      	str	r2, [sp, #24]
 80058a8:	aa0e      	add	r2, sp, #56	; 0x38
 80058aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80058ae:	aa0d      	add	r2, sp, #52	; 0x34
 80058b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80058b4:	9203      	str	r2, [sp, #12]
 80058b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80058ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	4652      	mov	r2, sl
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	4628      	mov	r0, r5
 80058c8:	4643      	mov	r3, r8
 80058ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80058cc:	f7ff fed6 	bl	800567c <__cvt>
 80058d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058d2:	4680      	mov	r8, r0
 80058d4:	2947      	cmp	r1, #71	; 0x47
 80058d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058d8:	d108      	bne.n	80058ec <_printf_float+0x138>
 80058da:	1cc8      	adds	r0, r1, #3
 80058dc:	db02      	blt.n	80058e4 <_printf_float+0x130>
 80058de:	6863      	ldr	r3, [r4, #4]
 80058e0:	4299      	cmp	r1, r3
 80058e2:	dd40      	ble.n	8005966 <_printf_float+0x1b2>
 80058e4:	f1a9 0902 	sub.w	r9, r9, #2
 80058e8:	fa5f f989 	uxtb.w	r9, r9
 80058ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058f0:	d81f      	bhi.n	8005932 <_printf_float+0x17e>
 80058f2:	464a      	mov	r2, r9
 80058f4:	3901      	subs	r1, #1
 80058f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058fa:	910d      	str	r1, [sp, #52]	; 0x34
 80058fc:	f7ff ff1d 	bl	800573a <__exponent>
 8005900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005902:	4682      	mov	sl, r0
 8005904:	1813      	adds	r3, r2, r0
 8005906:	2a01      	cmp	r2, #1
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	dc02      	bgt.n	8005912 <_printf_float+0x15e>
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	07d2      	lsls	r2, r2, #31
 8005910:	d501      	bpl.n	8005916 <_printf_float+0x162>
 8005912:	3301      	adds	r3, #1
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800591a:	2b00      	cmp	r3, #0
 800591c:	d09b      	beq.n	8005856 <_printf_float+0xa2>
 800591e:	232d      	movs	r3, #45	; 0x2d
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	e797      	b.n	8005856 <_printf_float+0xa2>
 8005926:	2947      	cmp	r1, #71	; 0x47
 8005928:	d1bc      	bne.n	80058a4 <_printf_float+0xf0>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ba      	bne.n	80058a4 <_printf_float+0xf0>
 800592e:	2301      	movs	r3, #1
 8005930:	e7b7      	b.n	80058a2 <_printf_float+0xee>
 8005932:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005936:	d118      	bne.n	800596a <_printf_float+0x1b6>
 8005938:	2900      	cmp	r1, #0
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	dd0b      	ble.n	8005956 <_printf_float+0x1a2>
 800593e:	6121      	str	r1, [r4, #16]
 8005940:	b913      	cbnz	r3, 8005948 <_printf_float+0x194>
 8005942:	6822      	ldr	r2, [r4, #0]
 8005944:	07d0      	lsls	r0, r2, #31
 8005946:	d502      	bpl.n	800594e <_printf_float+0x19a>
 8005948:	3301      	adds	r3, #1
 800594a:	440b      	add	r3, r1
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	f04f 0a00 	mov.w	sl, #0
 8005952:	65a1      	str	r1, [r4, #88]	; 0x58
 8005954:	e7df      	b.n	8005916 <_printf_float+0x162>
 8005956:	b913      	cbnz	r3, 800595e <_printf_float+0x1aa>
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	07d2      	lsls	r2, r2, #31
 800595c:	d501      	bpl.n	8005962 <_printf_float+0x1ae>
 800595e:	3302      	adds	r3, #2
 8005960:	e7f4      	b.n	800594c <_printf_float+0x198>
 8005962:	2301      	movs	r3, #1
 8005964:	e7f2      	b.n	800594c <_printf_float+0x198>
 8005966:	f04f 0967 	mov.w	r9, #103	; 0x67
 800596a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800596c:	4299      	cmp	r1, r3
 800596e:	db05      	blt.n	800597c <_printf_float+0x1c8>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	6121      	str	r1, [r4, #16]
 8005974:	07d8      	lsls	r0, r3, #31
 8005976:	d5ea      	bpl.n	800594e <_printf_float+0x19a>
 8005978:	1c4b      	adds	r3, r1, #1
 800597a:	e7e7      	b.n	800594c <_printf_float+0x198>
 800597c:	2900      	cmp	r1, #0
 800597e:	bfcc      	ite	gt
 8005980:	2201      	movgt	r2, #1
 8005982:	f1c1 0202 	rsble	r2, r1, #2
 8005986:	4413      	add	r3, r2
 8005988:	e7e0      	b.n	800594c <_printf_float+0x198>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	055a      	lsls	r2, r3, #21
 800598e:	d407      	bmi.n	80059a0 <_printf_float+0x1ec>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	4642      	mov	r2, r8
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	d12b      	bne.n	80059f6 <_printf_float+0x242>
 800599e:	e764      	b.n	800586a <_printf_float+0xb6>
 80059a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059a4:	f240 80dd 	bls.w	8005b62 <_printf_float+0x3ae>
 80059a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	f7fa fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d033      	beq.n	8005a20 <_printf_float+0x26c>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	4a35      	ldr	r2, [pc, #212]	; (8005a94 <_printf_float+0x2e0>)
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af51 	beq.w	800586a <_printf_float+0xb6>
 80059c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059cc:	429a      	cmp	r2, r3
 80059ce:	db02      	blt.n	80059d6 <_printf_float+0x222>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	07d8      	lsls	r0, r3, #31
 80059d4:	d50f      	bpl.n	80059f6 <_printf_float+0x242>
 80059d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f af42 	beq.w	800586a <_printf_float+0xb6>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	f104 091a 	add.w	r9, r4, #26
 80059ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4543      	cmp	r3, r8
 80059f4:	dc09      	bgt.n	8005a0a <_printf_float+0x256>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	079b      	lsls	r3, r3, #30
 80059fa:	f100 8104 	bmi.w	8005c06 <_printf_float+0x452>
 80059fe:	68e0      	ldr	r0, [r4, #12]
 8005a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a02:	4298      	cmp	r0, r3
 8005a04:	bfb8      	it	lt
 8005a06:	4618      	movlt	r0, r3
 8005a08:	e731      	b.n	800586e <_printf_float+0xba>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	464a      	mov	r2, r9
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	f43f af28 	beq.w	800586a <_printf_float+0xb6>
 8005a1a:	f108 0801 	add.w	r8, r8, #1
 8005a1e:	e7e6      	b.n	80059ee <_printf_float+0x23a>
 8005a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dc38      	bgt.n	8005a98 <_printf_float+0x2e4>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <_printf_float+0x2e0>)
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f af1a 	beq.w	800586a <_printf_float+0xb6>
 8005a36:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d102      	bne.n	8005a44 <_printf_float+0x290>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07d9      	lsls	r1, r3, #31
 8005a42:	d5d8      	bpl.n	80059f6 <_printf_float+0x242>
 8005a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af0b 	beq.w	800586a <_printf_float+0xb6>
 8005a54:	f04f 0900 	mov.w	r9, #0
 8005a58:	f104 0a1a 	add.w	sl, r4, #26
 8005a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5e:	425b      	negs	r3, r3
 8005a60:	454b      	cmp	r3, r9
 8005a62:	dc01      	bgt.n	8005a68 <_printf_float+0x2b4>
 8005a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a66:	e794      	b.n	8005992 <_printf_float+0x1de>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4652      	mov	r2, sl
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f aef9 	beq.w	800586a <_printf_float+0xb6>
 8005a78:	f109 0901 	add.w	r9, r9, #1
 8005a7c:	e7ee      	b.n	8005a5c <_printf_float+0x2a8>
 8005a7e:	bf00      	nop
 8005a80:	7fefffff 	.word	0x7fefffff
 8005a84:	080086ae 	.word	0x080086ae
 8005a88:	080086b2 	.word	0x080086b2
 8005a8c:	080086b6 	.word	0x080086b6
 8005a90:	080086ba 	.word	0x080086ba
 8005a94:	080086be 	.word	0x080086be
 8005a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bfa8      	it	ge
 8005aa0:	461a      	movge	r2, r3
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	4691      	mov	r9, r2
 8005aa6:	dc37      	bgt.n	8005b18 <_printf_float+0x364>
 8005aa8:	f04f 0b00 	mov.w	fp, #0
 8005aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ab0:	f104 021a 	add.w	r2, r4, #26
 8005ab4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ab8:	ebaa 0309 	sub.w	r3, sl, r9
 8005abc:	455b      	cmp	r3, fp
 8005abe:	dc33      	bgt.n	8005b28 <_printf_float+0x374>
 8005ac0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	db3b      	blt.n	8005b40 <_printf_float+0x38c>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07da      	lsls	r2, r3, #31
 8005acc:	d438      	bmi.n	8005b40 <_printf_float+0x38c>
 8005ace:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ad2:	eba2 0903 	sub.w	r9, r2, r3
 8005ad6:	eba2 020a 	sub.w	r2, r2, sl
 8005ada:	4591      	cmp	r9, r2
 8005adc:	bfa8      	it	ge
 8005ade:	4691      	movge	r9, r2
 8005ae0:	f1b9 0f00 	cmp.w	r9, #0
 8005ae4:	dc34      	bgt.n	8005b50 <_printf_float+0x39c>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 0a1a 	add.w	sl, r4, #26
 8005af2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	eba3 0309 	sub.w	r3, r3, r9
 8005afc:	4543      	cmp	r3, r8
 8005afe:	f77f af7a 	ble.w	80059f6 <_printf_float+0x242>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f aeac 	beq.w	800586a <_printf_float+0xb6>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	e7ec      	b.n	8005af2 <_printf_float+0x33e>
 8005b18:	4613      	mov	r3, r2
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	d1c0      	bne.n	8005aa8 <_printf_float+0x2f4>
 8005b26:	e6a0      	b.n	800586a <_printf_float+0xb6>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f ae99 	beq.w	800586a <_printf_float+0xb6>
 8005b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b3a:	f10b 0b01 	add.w	fp, fp, #1
 8005b3e:	e7b9      	b.n	8005ab4 <_printf_float+0x300>
 8005b40:	4631      	mov	r1, r6
 8005b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d1bf      	bne.n	8005ace <_printf_float+0x31a>
 8005b4e:	e68c      	b.n	800586a <_printf_float+0xb6>
 8005b50:	464b      	mov	r3, r9
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	eb08 020a 	add.w	r2, r8, sl
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1c2      	bne.n	8005ae6 <_printf_float+0x332>
 8005b60:	e683      	b.n	800586a <_printf_float+0xb6>
 8005b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	dc01      	bgt.n	8005b6c <_printf_float+0x3b8>
 8005b68:	07db      	lsls	r3, r3, #31
 8005b6a:	d539      	bpl.n	8005be0 <_printf_float+0x42c>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4642      	mov	r2, r8
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f ae77 	beq.w	800586a <_printf_float+0xb6>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f ae6f 	beq.w	800586a <_printf_float+0xb6>
 8005b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005b98:	f7fa ff06 	bl	80009a8 <__aeabi_dcmpeq>
 8005b9c:	b9d8      	cbnz	r0, 8005bd6 <_printf_float+0x422>
 8005b9e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ba2:	f108 0201 	add.w	r2, r8, #1
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	d10e      	bne.n	8005bce <_printf_float+0x41a>
 8005bb0:	e65b      	b.n	800586a <_printf_float+0xb6>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	464a      	mov	r2, r9
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae54 	beq.w	800586a <_printf_float+0xb6>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4543      	cmp	r3, r8
 8005bcc:	dcf1      	bgt.n	8005bb2 <_printf_float+0x3fe>
 8005bce:	4653      	mov	r3, sl
 8005bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bd4:	e6de      	b.n	8005994 <_printf_float+0x1e0>
 8005bd6:	f04f 0800 	mov.w	r8, #0
 8005bda:	f104 091a 	add.w	r9, r4, #26
 8005bde:	e7f2      	b.n	8005bc6 <_printf_float+0x412>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4642      	mov	r2, r8
 8005be4:	e7df      	b.n	8005ba6 <_printf_float+0x3f2>
 8005be6:	2301      	movs	r3, #1
 8005be8:	464a      	mov	r2, r9
 8005bea:	4631      	mov	r1, r6
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f ae3a 	beq.w	800586a <_printf_float+0xb6>
 8005bf6:	f108 0801 	add.w	r8, r8, #1
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bfe:	1a5b      	subs	r3, r3, r1
 8005c00:	4543      	cmp	r3, r8
 8005c02:	dcf0      	bgt.n	8005be6 <_printf_float+0x432>
 8005c04:	e6fb      	b.n	80059fe <_printf_float+0x24a>
 8005c06:	f04f 0800 	mov.w	r8, #0
 8005c0a:	f104 0919 	add.w	r9, r4, #25
 8005c0e:	e7f4      	b.n	8005bfa <_printf_float+0x446>

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4699      	mov	r9, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bfb8      	it	lt
 8005c22:	4613      	movlt	r3, r2
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc2b      	bgt.n	8005cb0 <_printf_common+0xa0>
 8005c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c5c:	1e13      	subs	r3, r2, #0
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d430      	bmi.n	8005cca <_printf_common+0xba>
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d023      	beq.n	8005cbe <_printf_common+0xae>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	f003 0306 	and.w	r3, r3, #6
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	bf14      	ite	ne
 8005c82:	2500      	movne	r5, #0
 8005c84:	6833      	ldreq	r3, [r6, #0]
 8005c86:	f04f 0600 	mov.w	r6, #0
 8005c8a:	bf08      	it	eq
 8005c8c:	68e5      	ldreq	r5, [r4, #12]
 8005c8e:	f104 041a 	add.w	r4, r4, #26
 8005c92:	bf08      	it	eq
 8005c94:	1aed      	subeq	r5, r5, r3
 8005c96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c9a:	bf08      	it	eq
 8005c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfc4      	itt	gt
 8005ca4:	1a9b      	subgt	r3, r3, r2
 8005ca6:	18ed      	addgt	r5, r5, r3
 8005ca8:	42b5      	cmp	r5, r6
 8005caa:	d11a      	bne.n	8005ce2 <_printf_common+0xd2>
 8005cac:	2000      	movs	r0, #0
 8005cae:	e008      	b.n	8005cc2 <_printf_common+0xb2>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4652      	mov	r2, sl
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d103      	bne.n	8005cc6 <_printf_common+0xb6>
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	e7c1      	b.n	8005c4e <_printf_common+0x3e>
 8005cca:	2030      	movs	r0, #48	; 0x30
 8005ccc:	18e1      	adds	r1, r4, r3
 8005cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd8:	4422      	add	r2, r4
 8005cda:	3302      	adds	r3, #2
 8005cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ce0:	e7c2      	b.n	8005c68 <_printf_common+0x58>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4638      	mov	r0, r7
 8005cea:	47c0      	blx	r8
 8005cec:	3001      	adds	r0, #1
 8005cee:	d0e6      	beq.n	8005cbe <_printf_common+0xae>
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7d9      	b.n	8005ca8 <_printf_common+0x98>

08005cf4 <_printf_i>:
 8005cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf8:	7e0f      	ldrb	r7, [r1, #24]
 8005cfa:	4691      	mov	r9, r2
 8005cfc:	2f78      	cmp	r7, #120	; 0x78
 8005cfe:	4680      	mov	r8, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	469a      	mov	sl, r3
 8005d04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d0a:	d807      	bhi.n	8005d1c <_printf_i+0x28>
 8005d0c:	2f62      	cmp	r7, #98	; 0x62
 8005d0e:	d80a      	bhi.n	8005d26 <_printf_i+0x32>
 8005d10:	2f00      	cmp	r7, #0
 8005d12:	f000 80d5 	beq.w	8005ec0 <_printf_i+0x1cc>
 8005d16:	2f58      	cmp	r7, #88	; 0x58
 8005d18:	f000 80c1 	beq.w	8005e9e <_printf_i+0x1aa>
 8005d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d24:	e03a      	b.n	8005d9c <_printf_i+0xa8>
 8005d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d2a:	2b15      	cmp	r3, #21
 8005d2c:	d8f6      	bhi.n	8005d1c <_printf_i+0x28>
 8005d2e:	a101      	add	r1, pc, #4	; (adr r1, 8005d34 <_printf_i+0x40>)
 8005d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d34:	08005d8d 	.word	0x08005d8d
 8005d38:	08005da1 	.word	0x08005da1
 8005d3c:	08005d1d 	.word	0x08005d1d
 8005d40:	08005d1d 	.word	0x08005d1d
 8005d44:	08005d1d 	.word	0x08005d1d
 8005d48:	08005d1d 	.word	0x08005d1d
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005d1d 	.word	0x08005d1d
 8005d54:	08005d1d 	.word	0x08005d1d
 8005d58:	08005d1d 	.word	0x08005d1d
 8005d5c:	08005d1d 	.word	0x08005d1d
 8005d60:	08005ea7 	.word	0x08005ea7
 8005d64:	08005dcd 	.word	0x08005dcd
 8005d68:	08005e61 	.word	0x08005e61
 8005d6c:	08005d1d 	.word	0x08005d1d
 8005d70:	08005d1d 	.word	0x08005d1d
 8005d74:	08005ec9 	.word	0x08005ec9
 8005d78:	08005d1d 	.word	0x08005d1d
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005d1d 	.word	0x08005d1d
 8005d84:	08005d1d 	.word	0x08005d1d
 8005d88:	08005e69 	.word	0x08005e69
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	602a      	str	r2, [r5, #0]
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0a0      	b.n	8005ee2 <_printf_i+0x1ee>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	0607      	lsls	r7, r0, #24
 8005da6:	f103 0104 	add.w	r1, r3, #4
 8005daa:	6029      	str	r1, [r5, #0]
 8005dac:	d501      	bpl.n	8005db2 <_printf_i+0xbe>
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	e003      	b.n	8005dba <_printf_i+0xc6>
 8005db2:	0646      	lsls	r6, r0, #25
 8005db4:	d5fb      	bpl.n	8005dae <_printf_i+0xba>
 8005db6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	da03      	bge.n	8005dc6 <_printf_i+0xd2>
 8005dbe:	232d      	movs	r3, #45	; 0x2d
 8005dc0:	4276      	negs	r6, r6
 8005dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	4859      	ldr	r0, [pc, #356]	; (8005f30 <_printf_i+0x23c>)
 8005dca:	e012      	b.n	8005df2 <_printf_i+0xfe>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	1d19      	adds	r1, r3, #4
 8005dd2:	6029      	str	r1, [r5, #0]
 8005dd4:	0605      	lsls	r5, r0, #24
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0xe8>
 8005dd8:	681e      	ldr	r6, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0xee>
 8005ddc:	0641      	lsls	r1, r0, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0xe4>
 8005de0:	881e      	ldrh	r6, [r3, #0]
 8005de2:	2f6f      	cmp	r7, #111	; 0x6f
 8005de4:	bf0c      	ite	eq
 8005de6:	2308      	moveq	r3, #8
 8005de8:	230a      	movne	r3, #10
 8005dea:	4851      	ldr	r0, [pc, #324]	; (8005f30 <_printf_i+0x23c>)
 8005dec:	2100      	movs	r1, #0
 8005dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df2:	6865      	ldr	r5, [r4, #4]
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	bfa8      	it	ge
 8005df8:	6821      	ldrge	r1, [r4, #0]
 8005dfa:	60a5      	str	r5, [r4, #8]
 8005dfc:	bfa4      	itt	ge
 8005dfe:	f021 0104 	bicge.w	r1, r1, #4
 8005e02:	6021      	strge	r1, [r4, #0]
 8005e04:	b90e      	cbnz	r6, 8005e0a <_printf_i+0x116>
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	d04b      	beq.n	8005ea2 <_printf_i+0x1ae>
 8005e0a:	4615      	mov	r5, r2
 8005e0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e10:	fb03 6711 	mls	r7, r3, r1, r6
 8005e14:	5dc7      	ldrb	r7, [r0, r7]
 8005e16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e1a:	4637      	mov	r7, r6
 8005e1c:	42bb      	cmp	r3, r7
 8005e1e:	460e      	mov	r6, r1
 8005e20:	d9f4      	bls.n	8005e0c <_printf_i+0x118>
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d10b      	bne.n	8005e3e <_printf_i+0x14a>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	07de      	lsls	r6, r3, #31
 8005e2a:	d508      	bpl.n	8005e3e <_printf_i+0x14a>
 8005e2c:	6923      	ldr	r3, [r4, #16]
 8005e2e:	6861      	ldr	r1, [r4, #4]
 8005e30:	4299      	cmp	r1, r3
 8005e32:	bfde      	ittt	le
 8005e34:	2330      	movle	r3, #48	; 0x30
 8005e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e3e:	1b52      	subs	r2, r2, r5
 8005e40:	6122      	str	r2, [r4, #16]
 8005e42:	464b      	mov	r3, r9
 8005e44:	4621      	mov	r1, r4
 8005e46:	4640      	mov	r0, r8
 8005e48:	f8cd a000 	str.w	sl, [sp]
 8005e4c:	aa03      	add	r2, sp, #12
 8005e4e:	f7ff fedf 	bl	8005c10 <_printf_common>
 8005e52:	3001      	adds	r0, #1
 8005e54:	d14a      	bne.n	8005eec <_printf_i+0x1f8>
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	b004      	add	sp, #16
 8005e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	f043 0320 	orr.w	r3, r3, #32
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	2778      	movs	r7, #120	; 0x78
 8005e6a:	4832      	ldr	r0, [pc, #200]	; (8005f34 <_printf_i+0x240>)
 8005e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	6829      	ldr	r1, [r5, #0]
 8005e74:	061f      	lsls	r7, r3, #24
 8005e76:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e7a:	d402      	bmi.n	8005e82 <_printf_i+0x18e>
 8005e7c:	065f      	lsls	r7, r3, #25
 8005e7e:	bf48      	it	mi
 8005e80:	b2b6      	uxthmi	r6, r6
 8005e82:	07df      	lsls	r7, r3, #31
 8005e84:	bf48      	it	mi
 8005e86:	f043 0320 	orrmi.w	r3, r3, #32
 8005e8a:	6029      	str	r1, [r5, #0]
 8005e8c:	bf48      	it	mi
 8005e8e:	6023      	strmi	r3, [r4, #0]
 8005e90:	b91e      	cbnz	r6, 8005e9a <_printf_i+0x1a6>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f023 0320 	bic.w	r3, r3, #32
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	2310      	movs	r3, #16
 8005e9c:	e7a6      	b.n	8005dec <_printf_i+0xf8>
 8005e9e:	4824      	ldr	r0, [pc, #144]	; (8005f30 <_printf_i+0x23c>)
 8005ea0:	e7e4      	b.n	8005e6c <_printf_i+0x178>
 8005ea2:	4615      	mov	r5, r2
 8005ea4:	e7bd      	b.n	8005e22 <_printf_i+0x12e>
 8005ea6:	682b      	ldr	r3, [r5, #0]
 8005ea8:	6826      	ldr	r6, [r4, #0]
 8005eaa:	1d18      	adds	r0, r3, #4
 8005eac:	6961      	ldr	r1, [r4, #20]
 8005eae:	6028      	str	r0, [r5, #0]
 8005eb0:	0635      	lsls	r5, r6, #24
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	d501      	bpl.n	8005eba <_printf_i+0x1c6>
 8005eb6:	6019      	str	r1, [r3, #0]
 8005eb8:	e002      	b.n	8005ec0 <_printf_i+0x1cc>
 8005eba:	0670      	lsls	r0, r6, #25
 8005ebc:	d5fb      	bpl.n	8005eb6 <_printf_i+0x1c2>
 8005ebe:	8019      	strh	r1, [r3, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4615      	mov	r5, r2
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	e7bc      	b.n	8005e42 <_printf_i+0x14e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	2100      	movs	r1, #0
 8005ecc:	1d1a      	adds	r2, r3, #4
 8005ece:	602a      	str	r2, [r5, #0]
 8005ed0:	681d      	ldr	r5, [r3, #0]
 8005ed2:	6862      	ldr	r2, [r4, #4]
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 fb44 	bl	8006562 <memchr>
 8005eda:	b108      	cbz	r0, 8005ee0 <_printf_i+0x1ec>
 8005edc:	1b40      	subs	r0, r0, r5
 8005ede:	6060      	str	r0, [r4, #4]
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eea:	e7aa      	b.n	8005e42 <_printf_i+0x14e>
 8005eec:	462a      	mov	r2, r5
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	47d0      	blx	sl
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d0ad      	beq.n	8005e56 <_printf_i+0x162>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	079b      	lsls	r3, r3, #30
 8005efe:	d413      	bmi.n	8005f28 <_printf_i+0x234>
 8005f00:	68e0      	ldr	r0, [r4, #12]
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	4298      	cmp	r0, r3
 8005f06:	bfb8      	it	lt
 8005f08:	4618      	movlt	r0, r3
 8005f0a:	e7a6      	b.n	8005e5a <_printf_i+0x166>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4632      	mov	r2, r6
 8005f10:	4649      	mov	r1, r9
 8005f12:	4640      	mov	r0, r8
 8005f14:	47d0      	blx	sl
 8005f16:	3001      	adds	r0, #1
 8005f18:	d09d      	beq.n	8005e56 <_printf_i+0x162>
 8005f1a:	3501      	adds	r5, #1
 8005f1c:	68e3      	ldr	r3, [r4, #12]
 8005f1e:	9903      	ldr	r1, [sp, #12]
 8005f20:	1a5b      	subs	r3, r3, r1
 8005f22:	42ab      	cmp	r3, r5
 8005f24:	dcf2      	bgt.n	8005f0c <_printf_i+0x218>
 8005f26:	e7eb      	b.n	8005f00 <_printf_i+0x20c>
 8005f28:	2500      	movs	r5, #0
 8005f2a:	f104 0619 	add.w	r6, r4, #25
 8005f2e:	e7f5      	b.n	8005f1c <_printf_i+0x228>
 8005f30:	080086c0 	.word	0x080086c0
 8005f34:	080086d1 	.word	0x080086d1

08005f38 <std>:
 8005f38:	2300      	movs	r3, #0
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f46:	6083      	str	r3, [r0, #8]
 8005f48:	8181      	strh	r1, [r0, #12]
 8005f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f4c:	81c2      	strh	r2, [r0, #14]
 8005f4e:	6183      	str	r3, [r0, #24]
 8005f50:	4619      	mov	r1, r3
 8005f52:	2208      	movs	r2, #8
 8005f54:	305c      	adds	r0, #92	; 0x5c
 8005f56:	f000 fa85 	bl	8006464 <memset>
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <std+0x58>)
 8005f5c:	6224      	str	r4, [r4, #32]
 8005f5e:	6263      	str	r3, [r4, #36]	; 0x24
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <std+0x5c>)
 8005f62:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <std+0x60>)
 8005f66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <std+0x64>)
 8005f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <std+0x68>)
 8005f6e:	429c      	cmp	r4, r3
 8005f70:	d006      	beq.n	8005f80 <std+0x48>
 8005f72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f76:	4294      	cmp	r4, r2
 8005f78:	d002      	beq.n	8005f80 <std+0x48>
 8005f7a:	33d0      	adds	r3, #208	; 0xd0
 8005f7c:	429c      	cmp	r4, r3
 8005f7e:	d105      	bne.n	8005f8c <std+0x54>
 8005f80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f88:	f000 bae8 	b.w	800655c <__retarget_lock_init_recursive>
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	bf00      	nop
 8005f90:	08006241 	.word	0x08006241
 8005f94:	08006263 	.word	0x08006263
 8005f98:	0800629b 	.word	0x0800629b
 8005f9c:	080062bf 	.word	0x080062bf
 8005fa0:	200003e4 	.word	0x200003e4

08005fa4 <stdio_exit_handler>:
 8005fa4:	4a02      	ldr	r2, [pc, #8]	; (8005fb0 <stdio_exit_handler+0xc>)
 8005fa6:	4903      	ldr	r1, [pc, #12]	; (8005fb4 <stdio_exit_handler+0x10>)
 8005fa8:	4803      	ldr	r0, [pc, #12]	; (8005fb8 <stdio_exit_handler+0x14>)
 8005faa:	f000 b869 	b.w	8006080 <_fwalk_sglue>
 8005fae:	bf00      	nop
 8005fb0:	20000010 	.word	0x20000010
 8005fb4:	08008179 	.word	0x08008179
 8005fb8:	2000001c 	.word	0x2000001c

08005fbc <cleanup_stdio>:
 8005fbc:	6841      	ldr	r1, [r0, #4]
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <cleanup_stdio+0x34>)
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	d001      	beq.n	8005fcc <cleanup_stdio+0x10>
 8005fc8:	f002 f8d6 	bl	8008178 <_fflush_r>
 8005fcc:	68a1      	ldr	r1, [r4, #8]
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <cleanup_stdio+0x38>)
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	d002      	beq.n	8005fda <cleanup_stdio+0x1e>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f002 f8cf 	bl	8008178 <_fflush_r>
 8005fda:	68e1      	ldr	r1, [r4, #12]
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <cleanup_stdio+0x3c>)
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	d004      	beq.n	8005fec <cleanup_stdio+0x30>
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe8:	f002 b8c6 	b.w	8008178 <_fflush_r>
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	bf00      	nop
 8005ff0:	200003e4 	.word	0x200003e4
 8005ff4:	2000044c 	.word	0x2000044c
 8005ff8:	200004b4 	.word	0x200004b4

08005ffc <global_stdio_init.part.0>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	; (800602c <global_stdio_init.part.0+0x30>)
 8006000:	4c0b      	ldr	r4, [pc, #44]	; (8006030 <global_stdio_init.part.0+0x34>)
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <global_stdio_init.part.0+0x38>)
 8006004:	4620      	mov	r0, r4
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	2104      	movs	r1, #4
 800600a:	2200      	movs	r2, #0
 800600c:	f7ff ff94 	bl	8005f38 <std>
 8006010:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006014:	2201      	movs	r2, #1
 8006016:	2109      	movs	r1, #9
 8006018:	f7ff ff8e 	bl	8005f38 <std>
 800601c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006020:	2202      	movs	r2, #2
 8006022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006026:	2112      	movs	r1, #18
 8006028:	f7ff bf86 	b.w	8005f38 <std>
 800602c:	2000051c 	.word	0x2000051c
 8006030:	200003e4 	.word	0x200003e4
 8006034:	08005fa5 	.word	0x08005fa5

08006038 <__sfp_lock_acquire>:
 8006038:	4801      	ldr	r0, [pc, #4]	; (8006040 <__sfp_lock_acquire+0x8>)
 800603a:	f000 ba90 	b.w	800655e <__retarget_lock_acquire_recursive>
 800603e:	bf00      	nop
 8006040:	20000525 	.word	0x20000525

08006044 <__sfp_lock_release>:
 8006044:	4801      	ldr	r0, [pc, #4]	; (800604c <__sfp_lock_release+0x8>)
 8006046:	f000 ba8b 	b.w	8006560 <__retarget_lock_release_recursive>
 800604a:	bf00      	nop
 800604c:	20000525 	.word	0x20000525

08006050 <__sinit>:
 8006050:	b510      	push	{r4, lr}
 8006052:	4604      	mov	r4, r0
 8006054:	f7ff fff0 	bl	8006038 <__sfp_lock_acquire>
 8006058:	6a23      	ldr	r3, [r4, #32]
 800605a:	b11b      	cbz	r3, 8006064 <__sinit+0x14>
 800605c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006060:	f7ff bff0 	b.w	8006044 <__sfp_lock_release>
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <__sinit+0x28>)
 8006066:	6223      	str	r3, [r4, #32]
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <__sinit+0x2c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f5      	bne.n	800605c <__sinit+0xc>
 8006070:	f7ff ffc4 	bl	8005ffc <global_stdio_init.part.0>
 8006074:	e7f2      	b.n	800605c <__sinit+0xc>
 8006076:	bf00      	nop
 8006078:	08005fbd 	.word	0x08005fbd
 800607c:	2000051c 	.word	0x2000051c

08006080 <_fwalk_sglue>:
 8006080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006084:	4607      	mov	r7, r0
 8006086:	4688      	mov	r8, r1
 8006088:	4614      	mov	r4, r2
 800608a:	2600      	movs	r6, #0
 800608c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006090:	f1b9 0901 	subs.w	r9, r9, #1
 8006094:	d505      	bpl.n	80060a2 <_fwalk_sglue+0x22>
 8006096:	6824      	ldr	r4, [r4, #0]
 8006098:	2c00      	cmp	r4, #0
 800609a:	d1f7      	bne.n	800608c <_fwalk_sglue+0xc>
 800609c:	4630      	mov	r0, r6
 800609e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d907      	bls.n	80060b8 <_fwalk_sglue+0x38>
 80060a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ac:	3301      	adds	r3, #1
 80060ae:	d003      	beq.n	80060b8 <_fwalk_sglue+0x38>
 80060b0:	4629      	mov	r1, r5
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	4306      	orrs	r6, r0
 80060b8:	3568      	adds	r5, #104	; 0x68
 80060ba:	e7e9      	b.n	8006090 <_fwalk_sglue+0x10>

080060bc <iprintf>:
 80060bc:	b40f      	push	{r0, r1, r2, r3}
 80060be:	b507      	push	{r0, r1, r2, lr}
 80060c0:	4906      	ldr	r1, [pc, #24]	; (80060dc <iprintf+0x20>)
 80060c2:	ab04      	add	r3, sp, #16
 80060c4:	6808      	ldr	r0, [r1, #0]
 80060c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ca:	6881      	ldr	r1, [r0, #8]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	f001 feb7 	bl	8007e40 <_vfiprintf_r>
 80060d2:	b003      	add	sp, #12
 80060d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d8:	b004      	add	sp, #16
 80060da:	4770      	bx	lr
 80060dc:	20000068 	.word	0x20000068

080060e0 <_puts_r>:
 80060e0:	6a03      	ldr	r3, [r0, #32]
 80060e2:	b570      	push	{r4, r5, r6, lr}
 80060e4:	4605      	mov	r5, r0
 80060e6:	460e      	mov	r6, r1
 80060e8:	6884      	ldr	r4, [r0, #8]
 80060ea:	b90b      	cbnz	r3, 80060f0 <_puts_r+0x10>
 80060ec:	f7ff ffb0 	bl	8006050 <__sinit>
 80060f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060f2:	07db      	lsls	r3, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_puts_r+0x22>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	0598      	lsls	r0, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_puts_r+0x22>
 80060fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fe:	f000 fa2e 	bl	800655e <__retarget_lock_acquire_recursive>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	0719      	lsls	r1, r3, #28
 8006106:	d513      	bpl.n	8006130 <_puts_r+0x50>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	b18b      	cbz	r3, 8006130 <_puts_r+0x50>
 800610c:	3e01      	subs	r6, #1
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006114:	3b01      	subs	r3, #1
 8006116:	60a3      	str	r3, [r4, #8]
 8006118:	b9e9      	cbnz	r1, 8006156 <_puts_r+0x76>
 800611a:	2b00      	cmp	r3, #0
 800611c:	da2e      	bge.n	800617c <_puts_r+0x9c>
 800611e:	4622      	mov	r2, r4
 8006120:	210a      	movs	r1, #10
 8006122:	4628      	mov	r0, r5
 8006124:	f000 f908 	bl	8006338 <__swbuf_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d007      	beq.n	800613c <_puts_r+0x5c>
 800612c:	250a      	movs	r5, #10
 800612e:	e007      	b.n	8006140 <_puts_r+0x60>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f93e 	bl	80063b4 <__swsetup_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	d0e7      	beq.n	800610c <_puts_r+0x2c>
 800613c:	f04f 35ff 	mov.w	r5, #4294967295
 8006140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d405      	bmi.n	8006152 <_puts_r+0x72>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	059b      	lsls	r3, r3, #22
 800614a:	d402      	bmi.n	8006152 <_puts_r+0x72>
 800614c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800614e:	f000 fa07 	bl	8006560 <__retarget_lock_release_recursive>
 8006152:	4628      	mov	r0, r5
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	2b00      	cmp	r3, #0
 8006158:	da04      	bge.n	8006164 <_puts_r+0x84>
 800615a:	69a2      	ldr	r2, [r4, #24]
 800615c:	429a      	cmp	r2, r3
 800615e:	dc06      	bgt.n	800616e <_puts_r+0x8e>
 8006160:	290a      	cmp	r1, #10
 8006162:	d004      	beq.n	800616e <_puts_r+0x8e>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	6022      	str	r2, [r4, #0]
 800616a:	7019      	strb	r1, [r3, #0]
 800616c:	e7cf      	b.n	800610e <_puts_r+0x2e>
 800616e:	4622      	mov	r2, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f8e1 	bl	8006338 <__swbuf_r>
 8006176:	3001      	adds	r0, #1
 8006178:	d1c9      	bne.n	800610e <_puts_r+0x2e>
 800617a:	e7df      	b.n	800613c <_puts_r+0x5c>
 800617c:	250a      	movs	r5, #10
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	701d      	strb	r5, [r3, #0]
 8006186:	e7db      	b.n	8006140 <_puts_r+0x60>

08006188 <puts>:
 8006188:	4b02      	ldr	r3, [pc, #8]	; (8006194 <puts+0xc>)
 800618a:	4601      	mov	r1, r0
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f7ff bfa7 	b.w	80060e0 <_puts_r>
 8006192:	bf00      	nop
 8006194:	20000068 	.word	0x20000068

08006198 <sniprintf>:
 8006198:	b40c      	push	{r2, r3}
 800619a:	b530      	push	{r4, r5, lr}
 800619c:	4b17      	ldr	r3, [pc, #92]	; (80061fc <sniprintf+0x64>)
 800619e:	1e0c      	subs	r4, r1, #0
 80061a0:	681d      	ldr	r5, [r3, #0]
 80061a2:	b09d      	sub	sp, #116	; 0x74
 80061a4:	da08      	bge.n	80061b8 <sniprintf+0x20>
 80061a6:	238b      	movs	r3, #139	; 0x8b
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	b01d      	add	sp, #116	; 0x74
 80061b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b4:	b002      	add	sp, #8
 80061b6:	4770      	bx	lr
 80061b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061c0:	bf0c      	ite	eq
 80061c2:	4623      	moveq	r3, r4
 80061c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061d0:	9002      	str	r0, [sp, #8]
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061d8:	4628      	mov	r0, r5
 80061da:	ab21      	add	r3, sp, #132	; 0x84
 80061dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061de:	a902      	add	r1, sp, #8
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	f001 fd07 	bl	8007bf4 <_svfiprintf_r>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	bfbc      	itt	lt
 80061ea:	238b      	movlt	r3, #139	; 0x8b
 80061ec:	602b      	strlt	r3, [r5, #0]
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	d0dd      	beq.n	80061ae <sniprintf+0x16>
 80061f2:	2200      	movs	r2, #0
 80061f4:	9b02      	ldr	r3, [sp, #8]
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e7d9      	b.n	80061ae <sniprintf+0x16>
 80061fa:	bf00      	nop
 80061fc:	20000068 	.word	0x20000068

08006200 <siprintf>:
 8006200:	b40e      	push	{r1, r2, r3}
 8006202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006206:	b500      	push	{lr}
 8006208:	b09c      	sub	sp, #112	; 0x70
 800620a:	ab1d      	add	r3, sp, #116	; 0x74
 800620c:	9002      	str	r0, [sp, #8]
 800620e:	9006      	str	r0, [sp, #24]
 8006210:	9107      	str	r1, [sp, #28]
 8006212:	9104      	str	r1, [sp, #16]
 8006214:	4808      	ldr	r0, [pc, #32]	; (8006238 <siprintf+0x38>)
 8006216:	4909      	ldr	r1, [pc, #36]	; (800623c <siprintf+0x3c>)
 8006218:	f853 2b04 	ldr.w	r2, [r3], #4
 800621c:	9105      	str	r1, [sp, #20]
 800621e:	6800      	ldr	r0, [r0, #0]
 8006220:	a902      	add	r1, sp, #8
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	f001 fce6 	bl	8007bf4 <_svfiprintf_r>
 8006228:	2200      	movs	r2, #0
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	b01c      	add	sp, #112	; 0x70
 8006230:	f85d eb04 	ldr.w	lr, [sp], #4
 8006234:	b003      	add	sp, #12
 8006236:	4770      	bx	lr
 8006238:	20000068 	.word	0x20000068
 800623c:	ffff0208 	.word	0xffff0208

08006240 <__sread>:
 8006240:	b510      	push	{r4, lr}
 8006242:	460c      	mov	r4, r1
 8006244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006248:	f000 f93a 	bl	80064c0 <_read_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	bfab      	itete	ge
 8006250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006252:	89a3      	ldrhlt	r3, [r4, #12]
 8006254:	181b      	addge	r3, r3, r0
 8006256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800625a:	bfac      	ite	ge
 800625c:	6563      	strge	r3, [r4, #84]	; 0x54
 800625e:	81a3      	strhlt	r3, [r4, #12]
 8006260:	bd10      	pop	{r4, pc}

08006262 <__swrite>:
 8006262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006266:	461f      	mov	r7, r3
 8006268:	898b      	ldrh	r3, [r1, #12]
 800626a:	4605      	mov	r5, r0
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	460c      	mov	r4, r1
 8006270:	4616      	mov	r6, r2
 8006272:	d505      	bpl.n	8006280 <__swrite+0x1e>
 8006274:	2302      	movs	r3, #2
 8006276:	2200      	movs	r2, #0
 8006278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627c:	f000 f90e 	bl	800649c <_lseek_r>
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	4632      	mov	r2, r6
 8006284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	4628      	mov	r0, r5
 800628c:	463b      	mov	r3, r7
 800628e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006296:	f000 b925 	b.w	80064e4 <_write_r>

0800629a <__sseek>:
 800629a:	b510      	push	{r4, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a2:	f000 f8fb 	bl	800649c <_lseek_r>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	bf15      	itete	ne
 80062ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80062ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062b6:	81a3      	strheq	r3, [r4, #12]
 80062b8:	bf18      	it	ne
 80062ba:	81a3      	strhne	r3, [r4, #12]
 80062bc:	bd10      	pop	{r4, pc}

080062be <__sclose>:
 80062be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c2:	f000 b8db 	b.w	800647c <_close_r>

080062c6 <_vsniprintf_r>:
 80062c6:	b530      	push	{r4, r5, lr}
 80062c8:	4614      	mov	r4, r2
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	4605      	mov	r5, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	b09b      	sub	sp, #108	; 0x6c
 80062d2:	da05      	bge.n	80062e0 <_vsniprintf_r+0x1a>
 80062d4:	238b      	movs	r3, #139	; 0x8b
 80062d6:	6003      	str	r3, [r0, #0]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	b01b      	add	sp, #108	; 0x6c
 80062de:	bd30      	pop	{r4, r5, pc}
 80062e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80062e8:	bf0c      	ite	eq
 80062ea:	4623      	moveq	r3, r4
 80062ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062f0:	9302      	str	r3, [sp, #8]
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f8:	9100      	str	r1, [sp, #0]
 80062fa:	9104      	str	r1, [sp, #16]
 80062fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006300:	4669      	mov	r1, sp
 8006302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006304:	f001 fc76 	bl	8007bf4 <_svfiprintf_r>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	bfbc      	itt	lt
 800630c:	238b      	movlt	r3, #139	; 0x8b
 800630e:	602b      	strlt	r3, [r5, #0]
 8006310:	2c00      	cmp	r4, #0
 8006312:	d0e3      	beq.n	80062dc <_vsniprintf_r+0x16>
 8006314:	2200      	movs	r2, #0
 8006316:	9b00      	ldr	r3, [sp, #0]
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e7df      	b.n	80062dc <_vsniprintf_r+0x16>

0800631c <vsniprintf>:
 800631c:	b507      	push	{r0, r1, r2, lr}
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	460a      	mov	r2, r1
 8006324:	4601      	mov	r1, r0
 8006326:	4803      	ldr	r0, [pc, #12]	; (8006334 <vsniprintf+0x18>)
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f7ff ffcc 	bl	80062c6 <_vsniprintf_r>
 800632e:	b003      	add	sp, #12
 8006330:	f85d fb04 	ldr.w	pc, [sp], #4
 8006334:	20000068 	.word	0x20000068

08006338 <__swbuf_r>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	460e      	mov	r6, r1
 800633c:	4614      	mov	r4, r2
 800633e:	4605      	mov	r5, r0
 8006340:	b118      	cbz	r0, 800634a <__swbuf_r+0x12>
 8006342:	6a03      	ldr	r3, [r0, #32]
 8006344:	b90b      	cbnz	r3, 800634a <__swbuf_r+0x12>
 8006346:	f7ff fe83 	bl	8006050 <__sinit>
 800634a:	69a3      	ldr	r3, [r4, #24]
 800634c:	60a3      	str	r3, [r4, #8]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	071a      	lsls	r2, r3, #28
 8006352:	d525      	bpl.n	80063a0 <__swbuf_r+0x68>
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	b31b      	cbz	r3, 80063a0 <__swbuf_r+0x68>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	6922      	ldr	r2, [r4, #16]
 800635c:	b2f6      	uxtb	r6, r6
 800635e:	1a98      	subs	r0, r3, r2
 8006360:	6963      	ldr	r3, [r4, #20]
 8006362:	4637      	mov	r7, r6
 8006364:	4283      	cmp	r3, r0
 8006366:	dc04      	bgt.n	8006372 <__swbuf_r+0x3a>
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	f001 ff04 	bl	8008178 <_fflush_r>
 8006370:	b9e0      	cbnz	r0, 80063ac <__swbuf_r+0x74>
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	60a3      	str	r3, [r4, #8]
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	701e      	strb	r6, [r3, #0]
 8006380:	6962      	ldr	r2, [r4, #20]
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	429a      	cmp	r2, r3
 8006386:	d004      	beq.n	8006392 <__swbuf_r+0x5a>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	07db      	lsls	r3, r3, #31
 800638c:	d506      	bpl.n	800639c <__swbuf_r+0x64>
 800638e:	2e0a      	cmp	r6, #10
 8006390:	d104      	bne.n	800639c <__swbuf_r+0x64>
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f001 feef 	bl	8008178 <_fflush_r>
 800639a:	b938      	cbnz	r0, 80063ac <__swbuf_r+0x74>
 800639c:	4638      	mov	r0, r7
 800639e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a0:	4621      	mov	r1, r4
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 f806 	bl	80063b4 <__swsetup_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d0d5      	beq.n	8006358 <__swbuf_r+0x20>
 80063ac:	f04f 37ff 	mov.w	r7, #4294967295
 80063b0:	e7f4      	b.n	800639c <__swbuf_r+0x64>
	...

080063b4 <__swsetup_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <__swsetup_r+0xac>)
 80063b8:	4605      	mov	r5, r0
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	460c      	mov	r4, r1
 80063be:	b118      	cbz	r0, 80063c8 <__swsetup_r+0x14>
 80063c0:	6a03      	ldr	r3, [r0, #32]
 80063c2:	b90b      	cbnz	r3, 80063c8 <__swsetup_r+0x14>
 80063c4:	f7ff fe44 	bl	8006050 <__sinit>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ce:	0718      	lsls	r0, r3, #28
 80063d0:	d422      	bmi.n	8006418 <__swsetup_r+0x64>
 80063d2:	06d9      	lsls	r1, r3, #27
 80063d4:	d407      	bmi.n	80063e6 <__swsetup_r+0x32>
 80063d6:	2309      	movs	r3, #9
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063de:	f04f 30ff 	mov.w	r0, #4294967295
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	e034      	b.n	8006450 <__swsetup_r+0x9c>
 80063e6:	0758      	lsls	r0, r3, #29
 80063e8:	d512      	bpl.n	8006410 <__swsetup_r+0x5c>
 80063ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ec:	b141      	cbz	r1, 8006400 <__swsetup_r+0x4c>
 80063ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d002      	beq.n	80063fc <__swsetup_r+0x48>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 ff2e 	bl	8007258 <_free_r>
 80063fc:	2300      	movs	r3, #0
 80063fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	2300      	movs	r3, #0
 800640a:	6063      	str	r3, [r4, #4]
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	f043 0308 	orr.w	r3, r3, #8
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	b94b      	cbnz	r3, 8006430 <__swsetup_r+0x7c>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006426:	d003      	beq.n	8006430 <__swsetup_r+0x7c>
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	f001 fef1 	bl	8008212 <__smakebuf_r>
 8006430:	89a0      	ldrh	r0, [r4, #12]
 8006432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006436:	f010 0301 	ands.w	r3, r0, #1
 800643a:	d00a      	beq.n	8006452 <__swsetup_r+0x9e>
 800643c:	2300      	movs	r3, #0
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	6963      	ldr	r3, [r4, #20]
 8006442:	425b      	negs	r3, r3
 8006444:	61a3      	str	r3, [r4, #24]
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	b943      	cbnz	r3, 800645c <__swsetup_r+0xa8>
 800644a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800644e:	d1c4      	bne.n	80063da <__swsetup_r+0x26>
 8006450:	bd38      	pop	{r3, r4, r5, pc}
 8006452:	0781      	lsls	r1, r0, #30
 8006454:	bf58      	it	pl
 8006456:	6963      	ldrpl	r3, [r4, #20]
 8006458:	60a3      	str	r3, [r4, #8]
 800645a:	e7f4      	b.n	8006446 <__swsetup_r+0x92>
 800645c:	2000      	movs	r0, #0
 800645e:	e7f7      	b.n	8006450 <__swsetup_r+0x9c>
 8006460:	20000068 	.word	0x20000068

08006464 <memset>:
 8006464:	4603      	mov	r3, r0
 8006466:	4402      	add	r2, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <_localeconv_r>:
 8006474:	4800      	ldr	r0, [pc, #0]	; (8006478 <_localeconv_r+0x4>)
 8006476:	4770      	bx	lr
 8006478:	2000015c 	.word	0x2000015c

0800647c <_close_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	2300      	movs	r3, #0
 8006480:	4d05      	ldr	r5, [pc, #20]	; (8006498 <_close_r+0x1c>)
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fc f83c 	bl	8002504 <_close>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_close_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_close_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000520 	.word	0x20000520

0800649c <_lseek_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	4d05      	ldr	r5, [pc, #20]	; (80064bc <_lseek_r+0x20>)
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fc f84e 	bl	800254c <_lseek>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_lseek_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_lseek_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20000520 	.word	0x20000520

080064c0 <_read_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	2200      	movs	r2, #0
 80064ca:	4d05      	ldr	r5, [pc, #20]	; (80064e0 <_read_r+0x20>)
 80064cc:	602a      	str	r2, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fb fffb 	bl	80024ca <_read>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d102      	bne.n	80064de <_read_r+0x1e>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b103      	cbz	r3, 80064de <_read_r+0x1e>
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	bd38      	pop	{r3, r4, r5, pc}
 80064e0:	20000520 	.word	0x20000520

080064e4 <_write_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	2200      	movs	r2, #0
 80064ee:	4d05      	ldr	r5, [pc, #20]	; (8006504 <_write_r+0x20>)
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fa fe18 	bl	8001128 <_write>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_write_r+0x1e>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_write_r+0x1e>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000520 	.word	0x20000520

08006508 <__errno>:
 8006508:	4b01      	ldr	r3, [pc, #4]	; (8006510 <__errno+0x8>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000068 	.word	0x20000068

08006514 <__libc_init_array>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	2600      	movs	r6, #0
 8006518:	4d0c      	ldr	r5, [pc, #48]	; (800654c <__libc_init_array+0x38>)
 800651a:	4c0d      	ldr	r4, [pc, #52]	; (8006550 <__libc_init_array+0x3c>)
 800651c:	1b64      	subs	r4, r4, r5
 800651e:	10a4      	asrs	r4, r4, #2
 8006520:	42a6      	cmp	r6, r4
 8006522:	d109      	bne.n	8006538 <__libc_init_array+0x24>
 8006524:	f001 fff2 	bl	800850c <_init>
 8006528:	2600      	movs	r6, #0
 800652a:	4d0a      	ldr	r5, [pc, #40]	; (8006554 <__libc_init_array+0x40>)
 800652c:	4c0a      	ldr	r4, [pc, #40]	; (8006558 <__libc_init_array+0x44>)
 800652e:	1b64      	subs	r4, r4, r5
 8006530:	10a4      	asrs	r4, r4, #2
 8006532:	42a6      	cmp	r6, r4
 8006534:	d105      	bne.n	8006542 <__libc_init_array+0x2e>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	f855 3b04 	ldr.w	r3, [r5], #4
 800653c:	4798      	blx	r3
 800653e:	3601      	adds	r6, #1
 8006540:	e7ee      	b.n	8006520 <__libc_init_array+0xc>
 8006542:	f855 3b04 	ldr.w	r3, [r5], #4
 8006546:	4798      	blx	r3
 8006548:	3601      	adds	r6, #1
 800654a:	e7f2      	b.n	8006532 <__libc_init_array+0x1e>
 800654c:	08008a1c 	.word	0x08008a1c
 8006550:	08008a1c 	.word	0x08008a1c
 8006554:	08008a1c 	.word	0x08008a1c
 8006558:	08008a20 	.word	0x08008a20

0800655c <__retarget_lock_init_recursive>:
 800655c:	4770      	bx	lr

0800655e <__retarget_lock_acquire_recursive>:
 800655e:	4770      	bx	lr

08006560 <__retarget_lock_release_recursive>:
 8006560:	4770      	bx	lr

08006562 <memchr>:
 8006562:	4603      	mov	r3, r0
 8006564:	b510      	push	{r4, lr}
 8006566:	b2c9      	uxtb	r1, r1
 8006568:	4402      	add	r2, r0
 800656a:	4293      	cmp	r3, r2
 800656c:	4618      	mov	r0, r3
 800656e:	d101      	bne.n	8006574 <memchr+0x12>
 8006570:	2000      	movs	r0, #0
 8006572:	e003      	b.n	800657c <memchr+0x1a>
 8006574:	7804      	ldrb	r4, [r0, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	428c      	cmp	r4, r1
 800657a:	d1f6      	bne.n	800656a <memchr+0x8>
 800657c:	bd10      	pop	{r4, pc}

0800657e <quorem>:
 800657e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006582:	6903      	ldr	r3, [r0, #16]
 8006584:	690c      	ldr	r4, [r1, #16]
 8006586:	4607      	mov	r7, r0
 8006588:	42a3      	cmp	r3, r4
 800658a:	db7f      	blt.n	800668c <quorem+0x10e>
 800658c:	3c01      	subs	r4, #1
 800658e:	f100 0514 	add.w	r5, r0, #20
 8006592:	f101 0814 	add.w	r8, r1, #20
 8006596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a4:	3301      	adds	r3, #1
 80065a6:	429a      	cmp	r2, r3
 80065a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80065ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065b4:	d331      	bcc.n	800661a <quorem+0x9c>
 80065b6:	f04f 0e00 	mov.w	lr, #0
 80065ba:	4640      	mov	r0, r8
 80065bc:	46ac      	mov	ip, r5
 80065be:	46f2      	mov	sl, lr
 80065c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80065c4:	b293      	uxth	r3, r2
 80065c6:	fb06 e303 	mla	r3, r6, r3, lr
 80065ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065ce:	0c1a      	lsrs	r2, r3, #16
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	fb06 220e 	mla	r2, r6, lr, r2
 80065d6:	ebaa 0303 	sub.w	r3, sl, r3
 80065da:	f8dc a000 	ldr.w	sl, [ip]
 80065de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065e2:	fa1f fa8a 	uxth.w	sl, sl
 80065e6:	4453      	add	r3, sl
 80065e8:	f8dc a000 	ldr.w	sl, [ip]
 80065ec:	b292      	uxth	r2, r2
 80065ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fc:	4581      	cmp	r9, r0
 80065fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006602:	f84c 3b04 	str.w	r3, [ip], #4
 8006606:	d2db      	bcs.n	80065c0 <quorem+0x42>
 8006608:	f855 300b 	ldr.w	r3, [r5, fp]
 800660c:	b92b      	cbnz	r3, 800661a <quorem+0x9c>
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	3b04      	subs	r3, #4
 8006612:	429d      	cmp	r5, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d32d      	bcc.n	8006674 <quorem+0xf6>
 8006618:	613c      	str	r4, [r7, #16]
 800661a:	4638      	mov	r0, r7
 800661c:	f001 f992 	bl	8007944 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	db23      	blt.n	800666c <quorem+0xee>
 8006624:	4629      	mov	r1, r5
 8006626:	2000      	movs	r0, #0
 8006628:	3601      	adds	r6, #1
 800662a:	f858 2b04 	ldr.w	r2, [r8], #4
 800662e:	f8d1 c000 	ldr.w	ip, [r1]
 8006632:	b293      	uxth	r3, r2
 8006634:	1ac3      	subs	r3, r0, r3
 8006636:	0c12      	lsrs	r2, r2, #16
 8006638:	fa1f f08c 	uxth.w	r0, ip
 800663c:	4403      	add	r3, r0
 800663e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006642:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800664c:	45c1      	cmp	r9, r8
 800664e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006652:	f841 3b04 	str.w	r3, [r1], #4
 8006656:	d2e8      	bcs.n	800662a <quorem+0xac>
 8006658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800665c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006660:	b922      	cbnz	r2, 800666c <quorem+0xee>
 8006662:	3b04      	subs	r3, #4
 8006664:	429d      	cmp	r5, r3
 8006666:	461a      	mov	r2, r3
 8006668:	d30a      	bcc.n	8006680 <quorem+0x102>
 800666a:	613c      	str	r4, [r7, #16]
 800666c:	4630      	mov	r0, r6
 800666e:	b003      	add	sp, #12
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	3b04      	subs	r3, #4
 8006678:	2a00      	cmp	r2, #0
 800667a:	d1cd      	bne.n	8006618 <quorem+0x9a>
 800667c:	3c01      	subs	r4, #1
 800667e:	e7c8      	b.n	8006612 <quorem+0x94>
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	3b04      	subs	r3, #4
 8006684:	2a00      	cmp	r2, #0
 8006686:	d1f0      	bne.n	800666a <quorem+0xec>
 8006688:	3c01      	subs	r4, #1
 800668a:	e7eb      	b.n	8006664 <quorem+0xe6>
 800668c:	2000      	movs	r0, #0
 800668e:	e7ee      	b.n	800666e <quorem+0xf0>

08006690 <_dtoa_r>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	4616      	mov	r6, r2
 8006696:	461f      	mov	r7, r3
 8006698:	69c4      	ldr	r4, [r0, #28]
 800669a:	b099      	sub	sp, #100	; 0x64
 800669c:	4605      	mov	r5, r0
 800669e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80066a6:	b974      	cbnz	r4, 80066c6 <_dtoa_r+0x36>
 80066a8:	2010      	movs	r0, #16
 80066aa:	f000 fe1d 	bl	80072e8 <malloc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	61e8      	str	r0, [r5, #28]
 80066b2:	b920      	cbnz	r0, 80066be <_dtoa_r+0x2e>
 80066b4:	21ef      	movs	r1, #239	; 0xef
 80066b6:	4bac      	ldr	r3, [pc, #688]	; (8006968 <_dtoa_r+0x2d8>)
 80066b8:	48ac      	ldr	r0, [pc, #688]	; (800696c <_dtoa_r+0x2dc>)
 80066ba:	f001 fe41 	bl	8008340 <__assert_func>
 80066be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066c2:	6004      	str	r4, [r0, #0]
 80066c4:	60c4      	str	r4, [r0, #12]
 80066c6:	69eb      	ldr	r3, [r5, #28]
 80066c8:	6819      	ldr	r1, [r3, #0]
 80066ca:	b151      	cbz	r1, 80066e2 <_dtoa_r+0x52>
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	2301      	movs	r3, #1
 80066d0:	4093      	lsls	r3, r2
 80066d2:	604a      	str	r2, [r1, #4]
 80066d4:	608b      	str	r3, [r1, #8]
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fefa 	bl	80074d0 <_Bfree>
 80066dc:	2200      	movs	r2, #0
 80066de:	69eb      	ldr	r3, [r5, #28]
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	1e3b      	subs	r3, r7, #0
 80066e4:	bfaf      	iteee	ge
 80066e6:	2300      	movge	r3, #0
 80066e8:	2201      	movlt	r2, #1
 80066ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066ee:	9305      	strlt	r3, [sp, #20]
 80066f0:	bfa8      	it	ge
 80066f2:	f8c8 3000 	strge.w	r3, [r8]
 80066f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066fa:	4b9d      	ldr	r3, [pc, #628]	; (8006970 <_dtoa_r+0x2e0>)
 80066fc:	bfb8      	it	lt
 80066fe:	f8c8 2000 	strlt.w	r2, [r8]
 8006702:	ea33 0309 	bics.w	r3, r3, r9
 8006706:	d119      	bne.n	800673c <_dtoa_r+0xac>
 8006708:	f242 730f 	movw	r3, #9999	; 0x270f
 800670c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006714:	4333      	orrs	r3, r6
 8006716:	f000 8589 	beq.w	800722c <_dtoa_r+0xb9c>
 800671a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800671c:	b953      	cbnz	r3, 8006734 <_dtoa_r+0xa4>
 800671e:	4b95      	ldr	r3, [pc, #596]	; (8006974 <_dtoa_r+0x2e4>)
 8006720:	e023      	b.n	800676a <_dtoa_r+0xda>
 8006722:	4b95      	ldr	r3, [pc, #596]	; (8006978 <_dtoa_r+0x2e8>)
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	3308      	adds	r3, #8
 8006728:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	9803      	ldr	r0, [sp, #12]
 800672e:	b019      	add	sp, #100	; 0x64
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4b8f      	ldr	r3, [pc, #572]	; (8006974 <_dtoa_r+0x2e4>)
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	3303      	adds	r3, #3
 800673a:	e7f5      	b.n	8006728 <_dtoa_r+0x98>
 800673c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006740:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006744:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	f7fa f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8006750:	4680      	mov	r8, r0
 8006752:	b160      	cbz	r0, 800676e <_dtoa_r+0xde>
 8006754:	2301      	movs	r3, #1
 8006756:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8562 	beq.w	8007226 <_dtoa_r+0xb96>
 8006762:	4b86      	ldr	r3, [pc, #536]	; (800697c <_dtoa_r+0x2ec>)
 8006764:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	e7de      	b.n	800672c <_dtoa_r+0x9c>
 800676e:	ab16      	add	r3, sp, #88	; 0x58
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	ab17      	add	r3, sp, #92	; 0x5c
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4628      	mov	r0, r5
 8006778:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800677c:	f001 f98a 	bl	8007a94 <__d2b>
 8006780:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006784:	4682      	mov	sl, r0
 8006786:	2c00      	cmp	r4, #0
 8006788:	d07e      	beq.n	8006888 <_dtoa_r+0x1f8>
 800678a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800678e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006790:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006798:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800679c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80067a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80067a4:	4619      	mov	r1, r3
 80067a6:	2200      	movs	r2, #0
 80067a8:	4b75      	ldr	r3, [pc, #468]	; (8006980 <_dtoa_r+0x2f0>)
 80067aa:	f7f9 fcdd 	bl	8000168 <__aeabi_dsub>
 80067ae:	a368      	add	r3, pc, #416	; (adr r3, 8006950 <_dtoa_r+0x2c0>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 fe90 	bl	80004d8 <__aeabi_dmul>
 80067b8:	a367      	add	r3, pc, #412	; (adr r3, 8006958 <_dtoa_r+0x2c8>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 fcd5 	bl	800016c <__adddf3>
 80067c2:	4606      	mov	r6, r0
 80067c4:	4620      	mov	r0, r4
 80067c6:	460f      	mov	r7, r1
 80067c8:	f7f9 fe1c 	bl	8000404 <__aeabi_i2d>
 80067cc:	a364      	add	r3, pc, #400	; (adr r3, 8006960 <_dtoa_r+0x2d0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 fcc5 	bl	800016c <__adddf3>
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	f7fa f927 	bl	8000a38 <__aeabi_d2iz>
 80067ea:	2200      	movs	r2, #0
 80067ec:	4683      	mov	fp, r0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f8e2 	bl	80009bc <__aeabi_dcmplt>
 80067f8:	b148      	cbz	r0, 800680e <_dtoa_r+0x17e>
 80067fa:	4658      	mov	r0, fp
 80067fc:	f7f9 fe02 	bl	8000404 <__aeabi_i2d>
 8006800:	4632      	mov	r2, r6
 8006802:	463b      	mov	r3, r7
 8006804:	f7fa f8d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006808:	b908      	cbnz	r0, 800680e <_dtoa_r+0x17e>
 800680a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800680e:	f1bb 0f16 	cmp.w	fp, #22
 8006812:	d857      	bhi.n	80068c4 <_dtoa_r+0x234>
 8006814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006818:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <_dtoa_r+0x2f4>)
 800681a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7fa f8cb 	bl	80009bc <__aeabi_dcmplt>
 8006826:	2800      	cmp	r0, #0
 8006828:	d04e      	beq.n	80068c8 <_dtoa_r+0x238>
 800682a:	2300      	movs	r3, #0
 800682c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006830:	930f      	str	r3, [sp, #60]	; 0x3c
 8006832:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006834:	1b1b      	subs	r3, r3, r4
 8006836:	1e5a      	subs	r2, r3, #1
 8006838:	bf46      	itte	mi
 800683a:	f1c3 0901 	rsbmi	r9, r3, #1
 800683e:	2300      	movmi	r3, #0
 8006840:	f04f 0900 	movpl.w	r9, #0
 8006844:	9209      	str	r2, [sp, #36]	; 0x24
 8006846:	bf48      	it	mi
 8006848:	9309      	strmi	r3, [sp, #36]	; 0x24
 800684a:	f1bb 0f00 	cmp.w	fp, #0
 800684e:	db3d      	blt.n	80068cc <_dtoa_r+0x23c>
 8006850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006852:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006856:	445b      	add	r3, fp
 8006858:	9309      	str	r3, [sp, #36]	; 0x24
 800685a:	2300      	movs	r3, #0
 800685c:	930a      	str	r3, [sp, #40]	; 0x28
 800685e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006860:	2b09      	cmp	r3, #9
 8006862:	d867      	bhi.n	8006934 <_dtoa_r+0x2a4>
 8006864:	2b05      	cmp	r3, #5
 8006866:	bfc4      	itt	gt
 8006868:	3b04      	subgt	r3, #4
 800686a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800686c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800686e:	bfc8      	it	gt
 8006870:	2400      	movgt	r4, #0
 8006872:	f1a3 0302 	sub.w	r3, r3, #2
 8006876:	bfd8      	it	le
 8006878:	2401      	movle	r4, #1
 800687a:	2b03      	cmp	r3, #3
 800687c:	f200 8086 	bhi.w	800698c <_dtoa_r+0x2fc>
 8006880:	e8df f003 	tbb	[pc, r3]
 8006884:	5637392c 	.word	0x5637392c
 8006888:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800688c:	441c      	add	r4, r3
 800688e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006892:	2b20      	cmp	r3, #32
 8006894:	bfc1      	itttt	gt
 8006896:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800689a:	fa09 f903 	lslgt.w	r9, r9, r3
 800689e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80068a2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80068a6:	bfd6      	itet	le
 80068a8:	f1c3 0320 	rsble	r3, r3, #32
 80068ac:	ea49 0003 	orrgt.w	r0, r9, r3
 80068b0:	fa06 f003 	lslle.w	r0, r6, r3
 80068b4:	f7f9 fd96 	bl	80003e4 <__aeabi_ui2d>
 80068b8:	2201      	movs	r2, #1
 80068ba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80068be:	3c01      	subs	r4, #1
 80068c0:	9213      	str	r2, [sp, #76]	; 0x4c
 80068c2:	e76f      	b.n	80067a4 <_dtoa_r+0x114>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e7b3      	b.n	8006830 <_dtoa_r+0x1a0>
 80068c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80068ca:	e7b2      	b.n	8006832 <_dtoa_r+0x1a2>
 80068cc:	f1cb 0300 	rsb	r3, fp, #0
 80068d0:	930a      	str	r3, [sp, #40]	; 0x28
 80068d2:	2300      	movs	r3, #0
 80068d4:	eba9 090b 	sub.w	r9, r9, fp
 80068d8:	930e      	str	r3, [sp, #56]	; 0x38
 80068da:	e7c0      	b.n	800685e <_dtoa_r+0x1ce>
 80068dc:	2300      	movs	r3, #0
 80068de:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dc55      	bgt.n	8006992 <_dtoa_r+0x302>
 80068e6:	2301      	movs	r3, #1
 80068e8:	461a      	mov	r2, r3
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	9308      	str	r3, [sp, #32]
 80068ee:	9223      	str	r2, [sp, #140]	; 0x8c
 80068f0:	e00b      	b.n	800690a <_dtoa_r+0x27a>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7f3      	b.n	80068de <_dtoa_r+0x24e>
 80068f6:	2300      	movs	r3, #0
 80068f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068fc:	445b      	add	r3, fp
 80068fe:	9306      	str	r3, [sp, #24]
 8006900:	3301      	adds	r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	bfb8      	it	lt
 8006908:	2301      	movlt	r3, #1
 800690a:	2100      	movs	r1, #0
 800690c:	2204      	movs	r2, #4
 800690e:	69e8      	ldr	r0, [r5, #28]
 8006910:	f102 0614 	add.w	r6, r2, #20
 8006914:	429e      	cmp	r6, r3
 8006916:	d940      	bls.n	800699a <_dtoa_r+0x30a>
 8006918:	6041      	str	r1, [r0, #4]
 800691a:	4628      	mov	r0, r5
 800691c:	f000 fd98 	bl	8007450 <_Balloc>
 8006920:	9003      	str	r0, [sp, #12]
 8006922:	2800      	cmp	r0, #0
 8006924:	d13c      	bne.n	80069a0 <_dtoa_r+0x310>
 8006926:	4602      	mov	r2, r0
 8006928:	f240 11af 	movw	r1, #431	; 0x1af
 800692c:	4b16      	ldr	r3, [pc, #88]	; (8006988 <_dtoa_r+0x2f8>)
 800692e:	e6c3      	b.n	80066b8 <_dtoa_r+0x28>
 8006930:	2301      	movs	r3, #1
 8006932:	e7e1      	b.n	80068f8 <_dtoa_r+0x268>
 8006934:	2401      	movs	r4, #1
 8006936:	2300      	movs	r3, #0
 8006938:	940b      	str	r4, [sp, #44]	; 0x2c
 800693a:	9322      	str	r3, [sp, #136]	; 0x88
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	2200      	movs	r2, #0
 8006942:	9306      	str	r3, [sp, #24]
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	2312      	movs	r3, #18
 8006948:	e7d1      	b.n	80068ee <_dtoa_r+0x25e>
 800694a:	bf00      	nop
 800694c:	f3af 8000 	nop.w
 8006950:	636f4361 	.word	0x636f4361
 8006954:	3fd287a7 	.word	0x3fd287a7
 8006958:	8b60c8b3 	.word	0x8b60c8b3
 800695c:	3fc68a28 	.word	0x3fc68a28
 8006960:	509f79fb 	.word	0x509f79fb
 8006964:	3fd34413 	.word	0x3fd34413
 8006968:	080086ef 	.word	0x080086ef
 800696c:	08008706 	.word	0x08008706
 8006970:	7ff00000 	.word	0x7ff00000
 8006974:	080086eb 	.word	0x080086eb
 8006978:	080086e2 	.word	0x080086e2
 800697c:	080086bf 	.word	0x080086bf
 8006980:	3ff80000 	.word	0x3ff80000
 8006984:	080087f0 	.word	0x080087f0
 8006988:	0800875e 	.word	0x0800875e
 800698c:	2301      	movs	r3, #1
 800698e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006990:	e7d4      	b.n	800693c <_dtoa_r+0x2ac>
 8006992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006994:	9306      	str	r3, [sp, #24]
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	e7b7      	b.n	800690a <_dtoa_r+0x27a>
 800699a:	3101      	adds	r1, #1
 800699c:	0052      	lsls	r2, r2, #1
 800699e:	e7b7      	b.n	8006910 <_dtoa_r+0x280>
 80069a0:	69eb      	ldr	r3, [r5, #28]
 80069a2:	9a03      	ldr	r2, [sp, #12]
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	2b0e      	cmp	r3, #14
 80069aa:	f200 80a8 	bhi.w	8006afe <_dtoa_r+0x46e>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	f000 80a5 	beq.w	8006afe <_dtoa_r+0x46e>
 80069b4:	f1bb 0f00 	cmp.w	fp, #0
 80069b8:	dd34      	ble.n	8006a24 <_dtoa_r+0x394>
 80069ba:	4b9a      	ldr	r3, [pc, #616]	; (8006c24 <_dtoa_r+0x594>)
 80069bc:	f00b 020f 	and.w	r2, fp, #15
 80069c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80069c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80069d0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80069d4:	d016      	beq.n	8006a04 <_dtoa_r+0x374>
 80069d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069da:	4b93      	ldr	r3, [pc, #588]	; (8006c28 <_dtoa_r+0x598>)
 80069dc:	2703      	movs	r7, #3
 80069de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069e2:	f7f9 fea3 	bl	800072c <__aeabi_ddiv>
 80069e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ea:	f004 040f 	and.w	r4, r4, #15
 80069ee:	4e8e      	ldr	r6, [pc, #568]	; (8006c28 <_dtoa_r+0x598>)
 80069f0:	b954      	cbnz	r4, 8006a08 <_dtoa_r+0x378>
 80069f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fa:	f7f9 fe97 	bl	800072c <__aeabi_ddiv>
 80069fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a02:	e029      	b.n	8006a58 <_dtoa_r+0x3c8>
 8006a04:	2702      	movs	r7, #2
 8006a06:	e7f2      	b.n	80069ee <_dtoa_r+0x35e>
 8006a08:	07e1      	lsls	r1, r4, #31
 8006a0a:	d508      	bpl.n	8006a1e <_dtoa_r+0x38e>
 8006a0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a14:	f7f9 fd60 	bl	80004d8 <__aeabi_dmul>
 8006a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a1c:	3701      	adds	r7, #1
 8006a1e:	1064      	asrs	r4, r4, #1
 8006a20:	3608      	adds	r6, #8
 8006a22:	e7e5      	b.n	80069f0 <_dtoa_r+0x360>
 8006a24:	f000 80a5 	beq.w	8006b72 <_dtoa_r+0x4e2>
 8006a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a2c:	f1cb 0400 	rsb	r4, fp, #0
 8006a30:	4b7c      	ldr	r3, [pc, #496]	; (8006c24 <_dtoa_r+0x594>)
 8006a32:	f004 020f 	and.w	r2, r4, #15
 8006a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fd4b 	bl	80004d8 <__aeabi_dmul>
 8006a42:	2702      	movs	r7, #2
 8006a44:	2300      	movs	r3, #0
 8006a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a4a:	4e77      	ldr	r6, [pc, #476]	; (8006c28 <_dtoa_r+0x598>)
 8006a4c:	1124      	asrs	r4, r4, #4
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	f040 8084 	bne.w	8006b5c <_dtoa_r+0x4cc>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1d2      	bne.n	80069fe <_dtoa_r+0x36e>
 8006a58:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8087 	beq.w	8006b76 <_dtoa_r+0x4e6>
 8006a68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4b6f      	ldr	r3, [pc, #444]	; (8006c2c <_dtoa_r+0x59c>)
 8006a70:	f7f9 ffa4 	bl	80009bc <__aeabi_dcmplt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d07e      	beq.n	8006b76 <_dtoa_r+0x4e6>
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d07b      	beq.n	8006b76 <_dtoa_r+0x4e6>
 8006a7e:	9b06      	ldr	r3, [sp, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dd38      	ble.n	8006af6 <_dtoa_r+0x466>
 8006a84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <_dtoa_r+0x5a0>)
 8006a8c:	f7f9 fd24 	bl	80004d8 <__aeabi_dmul>
 8006a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a94:	9c06      	ldr	r4, [sp, #24]
 8006a96:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7f9 fcb1 	bl	8000404 <__aeabi_i2d>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	f7f9 fd17 	bl	80004d8 <__aeabi_dmul>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <_dtoa_r+0x5a4>)
 8006aae:	f7f9 fb5d 	bl	800016c <__adddf3>
 8006ab2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006aba:	9611      	str	r6, [sp, #68]	; 0x44
 8006abc:	2c00      	cmp	r4, #0
 8006abe:	d15d      	bne.n	8006b7c <_dtoa_r+0x4ec>
 8006ac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4b5c      	ldr	r3, [pc, #368]	; (8006c38 <_dtoa_r+0x5a8>)
 8006ac8:	f7f9 fb4e 	bl	8000168 <__aeabi_dsub>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ad8:	f7f9 ff8e 	bl	80009f8 <__aeabi_dcmpgt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 8295 	bne.w	800700c <_dtoa_r+0x97c>
 8006ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ae8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006aec:	f7f9 ff66 	bl	80009bc <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 8289 	bne.w	8007008 <_dtoa_r+0x978>
 8006af6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006afa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006afe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f2c0 8151 	blt.w	8006da8 <_dtoa_r+0x718>
 8006b06:	f1bb 0f0e 	cmp.w	fp, #14
 8006b0a:	f300 814d 	bgt.w	8006da8 <_dtoa_r+0x718>
 8006b0e:	4b45      	ldr	r3, [pc, #276]	; (8006c24 <_dtoa_r+0x594>)
 8006b10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f280 80da 	bge.w	8006cd8 <_dtoa_r+0x648>
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f300 80d6 	bgt.w	8006cd8 <_dtoa_r+0x648>
 8006b2c:	f040 826b 	bne.w	8007006 <_dtoa_r+0x976>
 8006b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b34:	2200      	movs	r2, #0
 8006b36:	4b40      	ldr	r3, [pc, #256]	; (8006c38 <_dtoa_r+0x5a8>)
 8006b38:	f7f9 fcce 	bl	80004d8 <__aeabi_dmul>
 8006b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b40:	f7f9 ff50 	bl	80009e4 <__aeabi_dcmpge>
 8006b44:	9c08      	ldr	r4, [sp, #32]
 8006b46:	4626      	mov	r6, r4
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f040 8241 	bne.w	8006fd0 <_dtoa_r+0x940>
 8006b4e:	2331      	movs	r3, #49	; 0x31
 8006b50:	9f03      	ldr	r7, [sp, #12]
 8006b52:	f10b 0b01 	add.w	fp, fp, #1
 8006b56:	f807 3b01 	strb.w	r3, [r7], #1
 8006b5a:	e23d      	b.n	8006fd8 <_dtoa_r+0x948>
 8006b5c:	07e2      	lsls	r2, r4, #31
 8006b5e:	d505      	bpl.n	8006b6c <_dtoa_r+0x4dc>
 8006b60:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	3701      	adds	r7, #1
 8006b6c:	1064      	asrs	r4, r4, #1
 8006b6e:	3608      	adds	r6, #8
 8006b70:	e76d      	b.n	8006a4e <_dtoa_r+0x3be>
 8006b72:	2702      	movs	r7, #2
 8006b74:	e770      	b.n	8006a58 <_dtoa_r+0x3c8>
 8006b76:	46d8      	mov	r8, fp
 8006b78:	9c08      	ldr	r4, [sp, #32]
 8006b7a:	e78f      	b.n	8006a9c <_dtoa_r+0x40c>
 8006b7c:	9903      	ldr	r1, [sp, #12]
 8006b7e:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <_dtoa_r+0x594>)
 8006b80:	4421      	add	r1, r4
 8006b82:	9112      	str	r1, [sp, #72]	; 0x48
 8006b84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b8a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d054      	beq.n	8006c40 <_dtoa_r+0x5b0>
 8006b96:	2000      	movs	r0, #0
 8006b98:	4928      	ldr	r1, [pc, #160]	; (8006c3c <_dtoa_r+0x5ac>)
 8006b9a:	f7f9 fdc7 	bl	800072c <__aeabi_ddiv>
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	f7f9 fae1 	bl	8000168 <__aeabi_dsub>
 8006ba6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006baa:	9f03      	ldr	r7, [sp, #12]
 8006bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb0:	f7f9 ff42 	bl	8000a38 <__aeabi_d2iz>
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	f7f9 fc25 	bl	8000404 <__aeabi_i2d>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc2:	f7f9 fad1 	bl	8000168 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	3430      	adds	r4, #48	; 0x30
 8006bcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bd4:	f807 4b01 	strb.w	r4, [r7], #1
 8006bd8:	f7f9 fef0 	bl	80009bc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d173      	bne.n	8006cc8 <_dtoa_r+0x638>
 8006be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006be4:	2000      	movs	r0, #0
 8006be6:	4911      	ldr	r1, [pc, #68]	; (8006c2c <_dtoa_r+0x59c>)
 8006be8:	f7f9 fabe 	bl	8000168 <__aeabi_dsub>
 8006bec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bf0:	f7f9 fee4 	bl	80009bc <__aeabi_dcmplt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 80b6 	bne.w	8006d66 <_dtoa_r+0x6d6>
 8006bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bfc:	429f      	cmp	r7, r3
 8006bfe:	f43f af7a 	beq.w	8006af6 <_dtoa_r+0x466>
 8006c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c06:	2200      	movs	r2, #0
 8006c08:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <_dtoa_r+0x5a0>)
 8006c0a:	f7f9 fc65 	bl	80004d8 <__aeabi_dmul>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <_dtoa_r+0x5a0>)
 8006c1a:	f7f9 fc5d 	bl	80004d8 <__aeabi_dmul>
 8006c1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c22:	e7c3      	b.n	8006bac <_dtoa_r+0x51c>
 8006c24:	080087f0 	.word	0x080087f0
 8006c28:	080087c8 	.word	0x080087c8
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	40240000 	.word	0x40240000
 8006c34:	401c0000 	.word	0x401c0000
 8006c38:	40140000 	.word	0x40140000
 8006c3c:	3fe00000 	.word	0x3fe00000
 8006c40:	4630      	mov	r0, r6
 8006c42:	4639      	mov	r1, r7
 8006c44:	f7f9 fc48 	bl	80004d8 <__aeabi_dmul>
 8006c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c4e:	9c03      	ldr	r4, [sp, #12]
 8006c50:	9314      	str	r3, [sp, #80]	; 0x50
 8006c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c56:	f7f9 feef 	bl	8000a38 <__aeabi_d2iz>
 8006c5a:	9015      	str	r0, [sp, #84]	; 0x54
 8006c5c:	f7f9 fbd2 	bl	8000404 <__aeabi_i2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c68:	f7f9 fa7e 	bl	8000168 <__aeabi_dsub>
 8006c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c6e:	4606      	mov	r6, r0
 8006c70:	3330      	adds	r3, #48	; 0x30
 8006c72:	f804 3b01 	strb.w	r3, [r4], #1
 8006c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c78:	460f      	mov	r7, r1
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	d124      	bne.n	8006ccc <_dtoa_r+0x63c>
 8006c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c86:	4baf      	ldr	r3, [pc, #700]	; (8006f44 <_dtoa_r+0x8b4>)
 8006c88:	f7f9 fa70 	bl	800016c <__adddf3>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 feb0 	bl	80009f8 <__aeabi_dcmpgt>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d163      	bne.n	8006d64 <_dtoa_r+0x6d4>
 8006c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	49a8      	ldr	r1, [pc, #672]	; (8006f44 <_dtoa_r+0x8b4>)
 8006ca4:	f7f9 fa60 	bl	8000168 <__aeabi_dsub>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4630      	mov	r0, r6
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fe84 	bl	80009bc <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f43f af1e 	beq.w	8006af6 <_dtoa_r+0x466>
 8006cba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006cbc:	1e7b      	subs	r3, r7, #1
 8006cbe:	9314      	str	r3, [sp, #80]	; 0x50
 8006cc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d0f8      	beq.n	8006cba <_dtoa_r+0x62a>
 8006cc8:	46c3      	mov	fp, r8
 8006cca:	e03b      	b.n	8006d44 <_dtoa_r+0x6b4>
 8006ccc:	4b9e      	ldr	r3, [pc, #632]	; (8006f48 <_dtoa_r+0x8b8>)
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd6:	e7bc      	b.n	8006c52 <_dtoa_r+0x5c2>
 8006cd8:	9f03      	ldr	r7, [sp, #12]
 8006cda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	f7f9 fd21 	bl	800072c <__aeabi_ddiv>
 8006cea:	f7f9 fea5 	bl	8000a38 <__aeabi_d2iz>
 8006cee:	4604      	mov	r4, r0
 8006cf0:	f7f9 fb88 	bl	8000404 <__aeabi_i2d>
 8006cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cf8:	f7f9 fbee 	bl	80004d8 <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fa30 	bl	8000168 <__aeabi_dsub>
 8006d08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006d0c:	f807 6b01 	strb.w	r6, [r7], #1
 8006d10:	9e03      	ldr	r6, [sp, #12]
 8006d12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006d16:	1bbe      	subs	r6, r7, r6
 8006d18:	45b4      	cmp	ip, r6
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	d136      	bne.n	8006d8e <_dtoa_r+0x6fe>
 8006d20:	f7f9 fa24 	bl	800016c <__adddf3>
 8006d24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	f7f9 fe64 	bl	80009f8 <__aeabi_dcmpgt>
 8006d30:	bb58      	cbnz	r0, 8006d8a <_dtoa_r+0x6fa>
 8006d32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 fe35 	bl	80009a8 <__aeabi_dcmpeq>
 8006d3e:	b108      	cbz	r0, 8006d44 <_dtoa_r+0x6b4>
 8006d40:	07e3      	lsls	r3, r4, #31
 8006d42:	d422      	bmi.n	8006d8a <_dtoa_r+0x6fa>
 8006d44:	4651      	mov	r1, sl
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 fbc2 	bl	80074d0 <_Bfree>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d50:	703b      	strb	r3, [r7, #0]
 8006d52:	f10b 0301 	add.w	r3, fp, #1
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f43f ace6 	beq.w	800672c <_dtoa_r+0x9c>
 8006d60:	601f      	str	r7, [r3, #0]
 8006d62:	e4e3      	b.n	800672c <_dtoa_r+0x9c>
 8006d64:	4627      	mov	r7, r4
 8006d66:	463b      	mov	r3, r7
 8006d68:	461f      	mov	r7, r3
 8006d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d6e:	2a39      	cmp	r2, #57	; 0x39
 8006d70:	d107      	bne.n	8006d82 <_dtoa_r+0x6f2>
 8006d72:	9a03      	ldr	r2, [sp, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1f7      	bne.n	8006d68 <_dtoa_r+0x6d8>
 8006d78:	2230      	movs	r2, #48	; 0x30
 8006d7a:	9903      	ldr	r1, [sp, #12]
 8006d7c:	f108 0801 	add.w	r8, r8, #1
 8006d80:	700a      	strb	r2, [r1, #0]
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	3201      	adds	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e79e      	b.n	8006cc8 <_dtoa_r+0x638>
 8006d8a:	46d8      	mov	r8, fp
 8006d8c:	e7eb      	b.n	8006d66 <_dtoa_r+0x6d6>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4b6d      	ldr	r3, [pc, #436]	; (8006f48 <_dtoa_r+0x8b8>)
 8006d92:	f7f9 fba1 	bl	80004d8 <__aeabi_dmul>
 8006d96:	2200      	movs	r2, #0
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	f7f9 fe03 	bl	80009a8 <__aeabi_dcmpeq>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d09b      	beq.n	8006cde <_dtoa_r+0x64e>
 8006da6:	e7cd      	b.n	8006d44 <_dtoa_r+0x6b4>
 8006da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	f000 80c4 	beq.w	8006f38 <_dtoa_r+0x8a8>
 8006db0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006db2:	2a01      	cmp	r2, #1
 8006db4:	f300 80a8 	bgt.w	8006f08 <_dtoa_r+0x878>
 8006db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	f000 80a0 	beq.w	8006f00 <_dtoa_r+0x870>
 8006dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dc4:	464f      	mov	r7, r9
 8006dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dca:	2101      	movs	r1, #1
 8006dcc:	441a      	add	r2, r3
 8006dce:	4628      	mov	r0, r5
 8006dd0:	4499      	add	r9, r3
 8006dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd4:	f000 fc32 	bl	800763c <__i2b>
 8006dd8:	4606      	mov	r6, r0
 8006dda:	b15f      	cbz	r7, 8006df4 <_dtoa_r+0x764>
 8006ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd08      	ble.n	8006df4 <_dtoa_r+0x764>
 8006de2:	42bb      	cmp	r3, r7
 8006de4:	bfa8      	it	ge
 8006de6:	463b      	movge	r3, r7
 8006de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dea:	eba9 0903 	sub.w	r9, r9, r3
 8006dee:	1aff      	subs	r7, r7, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	9309      	str	r3, [sp, #36]	; 0x24
 8006df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df6:	b1f3      	cbz	r3, 8006e36 <_dtoa_r+0x7a6>
 8006df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80a0 	beq.w	8006f40 <_dtoa_r+0x8b0>
 8006e00:	2c00      	cmp	r4, #0
 8006e02:	dd10      	ble.n	8006e26 <_dtoa_r+0x796>
 8006e04:	4631      	mov	r1, r6
 8006e06:	4622      	mov	r2, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 fcd5 	bl	80077b8 <__pow5mult>
 8006e0e:	4652      	mov	r2, sl
 8006e10:	4601      	mov	r1, r0
 8006e12:	4606      	mov	r6, r0
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fc27 	bl	8007668 <__multiply>
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fb56 	bl	80074d0 <_Bfree>
 8006e24:	46c2      	mov	sl, r8
 8006e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e28:	1b1a      	subs	r2, r3, r4
 8006e2a:	d004      	beq.n	8006e36 <_dtoa_r+0x7a6>
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fcc2 	bl	80077b8 <__pow5mult>
 8006e34:	4682      	mov	sl, r0
 8006e36:	2101      	movs	r1, #1
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 fbff 	bl	800763c <__i2b>
 8006e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e40:	4604      	mov	r4, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f340 8082 	ble.w	8006f4c <_dtoa_r+0x8bc>
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f000 fcb3 	bl	80077b8 <__pow5mult>
 8006e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e54:	4604      	mov	r4, r0
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	dd7b      	ble.n	8006f52 <_dtoa_r+0x8c2>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e64:	6918      	ldr	r0, [r3, #16]
 8006e66:	f000 fb9b 	bl	80075a0 <__hi0bits>
 8006e6a:	f1c0 0020 	rsb	r0, r0, #32
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	4418      	add	r0, r3
 8006e72:	f010 001f 	ands.w	r0, r0, #31
 8006e76:	f000 8092 	beq.w	8006f9e <_dtoa_r+0x90e>
 8006e7a:	f1c0 0320 	rsb	r3, r0, #32
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	f340 8085 	ble.w	8006f8e <_dtoa_r+0x8fe>
 8006e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e86:	f1c0 001c 	rsb	r0, r0, #28
 8006e8a:	4403      	add	r3, r0
 8006e8c:	4481      	add	r9, r0
 8006e8e:	4407      	add	r7, r0
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	dd05      	ble.n	8006ea4 <_dtoa_r+0x814>
 8006e98:	4651      	mov	r1, sl
 8006e9a:	464a      	mov	r2, r9
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 fce5 	bl	800786c <__lshift>
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd05      	ble.n	8006eb6 <_dtoa_r+0x826>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	461a      	mov	r2, r3
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fcdc 	bl	800786c <__lshift>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d072      	beq.n	8006fa2 <_dtoa_r+0x912>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	f000 fd40 	bl	8007944 <__mcmp>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	da6c      	bge.n	8006fa2 <_dtoa_r+0x912>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4651      	mov	r1, sl
 8006ecc:	220a      	movs	r2, #10
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 fb20 	bl	8007514 <__multadd>
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed6:	4682      	mov	sl, r0
 8006ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 81ac 	beq.w	800723a <_dtoa_r+0xbaa>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 fb13 	bl	8007514 <__multadd>
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f300 8093 	bgt.w	800701e <_dtoa_r+0x98e>
 8006ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dc59      	bgt.n	8006fb2 <_dtoa_r+0x922>
 8006efe:	e08e      	b.n	800701e <_dtoa_r+0x98e>
 8006f00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f06:	e75d      	b.n	8006dc4 <_dtoa_r+0x734>
 8006f08:	9b08      	ldr	r3, [sp, #32]
 8006f0a:	1e5c      	subs	r4, r3, #1
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	bfbf      	itttt	lt
 8006f12:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f14:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006f16:	1ae3      	sublt	r3, r4, r3
 8006f18:	18d2      	addlt	r2, r2, r3
 8006f1a:	bfa8      	it	ge
 8006f1c:	1b1c      	subge	r4, r3, r4
 8006f1e:	9b08      	ldr	r3, [sp, #32]
 8006f20:	bfbe      	ittt	lt
 8006f22:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006f24:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006f26:	2400      	movlt	r4, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bfb5      	itete	lt
 8006f2c:	eba9 0703 	sublt.w	r7, r9, r3
 8006f30:	464f      	movge	r7, r9
 8006f32:	2300      	movlt	r3, #0
 8006f34:	9b08      	ldrge	r3, [sp, #32]
 8006f36:	e747      	b.n	8006dc8 <_dtoa_r+0x738>
 8006f38:	464f      	mov	r7, r9
 8006f3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f3e:	e74c      	b.n	8006dda <_dtoa_r+0x74a>
 8006f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f42:	e773      	b.n	8006e2c <_dtoa_r+0x79c>
 8006f44:	3fe00000 	.word	0x3fe00000
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	dc18      	bgt.n	8006f84 <_dtoa_r+0x8f4>
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	b9b3      	cbnz	r3, 8006f84 <_dtoa_r+0x8f4>
 8006f56:	9b05      	ldr	r3, [sp, #20]
 8006f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f5c:	b993      	cbnz	r3, 8006f84 <_dtoa_r+0x8f4>
 8006f5e:	9b05      	ldr	r3, [sp, #20]
 8006f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	0d1b      	lsrs	r3, r3, #20
 8006f66:	051b      	lsls	r3, r3, #20
 8006f68:	b17b      	cbz	r3, 8006f8a <_dtoa_r+0x8fa>
 8006f6a:	f04f 0801 	mov.w	r8, #1
 8006f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f70:	f109 0901 	add.w	r9, r9, #1
 8006f74:	3301      	adds	r3, #1
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
 8006f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f47f af6f 	bne.w	8006e5e <_dtoa_r+0x7ce>
 8006f80:	2001      	movs	r0, #1
 8006f82:	e774      	b.n	8006e6e <_dtoa_r+0x7de>
 8006f84:	f04f 0800 	mov.w	r8, #0
 8006f88:	e7f6      	b.n	8006f78 <_dtoa_r+0x8e8>
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	e7f4      	b.n	8006f78 <_dtoa_r+0x8e8>
 8006f8e:	d080      	beq.n	8006e92 <_dtoa_r+0x802>
 8006f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f92:	331c      	adds	r3, #28
 8006f94:	441a      	add	r2, r3
 8006f96:	4499      	add	r9, r3
 8006f98:	441f      	add	r7, r3
 8006f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f9c:	e779      	b.n	8006e92 <_dtoa_r+0x802>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	e7f6      	b.n	8006f90 <_dtoa_r+0x900>
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc34      	bgt.n	8007012 <_dtoa_r+0x982>
 8006fa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	dd31      	ble.n	8007012 <_dtoa_r+0x982>
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	9306      	str	r3, [sp, #24]
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	b963      	cbnz	r3, 8006fd0 <_dtoa_r+0x940>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	2205      	movs	r2, #5
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 faaa 	bl	8007514 <__multadd>
 8006fc0:	4601      	mov	r1, r0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	f000 fcbd 	bl	8007944 <__mcmp>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f73f adbf 	bgt.w	8006b4e <_dtoa_r+0x4be>
 8006fd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fd2:	9f03      	ldr	r7, [sp, #12]
 8006fd4:	ea6f 0b03 	mvn.w	fp, r3
 8006fd8:	f04f 0800 	mov.w	r8, #0
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fa76 	bl	80074d0 <_Bfree>
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	f43f aead 	beq.w	8006d44 <_dtoa_r+0x6b4>
 8006fea:	f1b8 0f00 	cmp.w	r8, #0
 8006fee:	d005      	beq.n	8006ffc <_dtoa_r+0x96c>
 8006ff0:	45b0      	cmp	r8, r6
 8006ff2:	d003      	beq.n	8006ffc <_dtoa_r+0x96c>
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fa6a 	bl	80074d0 <_Bfree>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fa66 	bl	80074d0 <_Bfree>
 8007004:	e69e      	b.n	8006d44 <_dtoa_r+0x6b4>
 8007006:	2400      	movs	r4, #0
 8007008:	4626      	mov	r6, r4
 800700a:	e7e1      	b.n	8006fd0 <_dtoa_r+0x940>
 800700c:	46c3      	mov	fp, r8
 800700e:	4626      	mov	r6, r4
 8007010:	e59d      	b.n	8006b4e <_dtoa_r+0x4be>
 8007012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80c8 	beq.w	80071aa <_dtoa_r+0xb1a>
 800701a:	9b08      	ldr	r3, [sp, #32]
 800701c:	9306      	str	r3, [sp, #24]
 800701e:	2f00      	cmp	r7, #0
 8007020:	dd05      	ble.n	800702e <_dtoa_r+0x99e>
 8007022:	4631      	mov	r1, r6
 8007024:	463a      	mov	r2, r7
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fc20 	bl	800786c <__lshift>
 800702c:	4606      	mov	r6, r0
 800702e:	f1b8 0f00 	cmp.w	r8, #0
 8007032:	d05b      	beq.n	80070ec <_dtoa_r+0xa5c>
 8007034:	4628      	mov	r0, r5
 8007036:	6871      	ldr	r1, [r6, #4]
 8007038:	f000 fa0a 	bl	8007450 <_Balloc>
 800703c:	4607      	mov	r7, r0
 800703e:	b928      	cbnz	r0, 800704c <_dtoa_r+0x9bc>
 8007040:	4602      	mov	r2, r0
 8007042:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007046:	4b81      	ldr	r3, [pc, #516]	; (800724c <_dtoa_r+0xbbc>)
 8007048:	f7ff bb36 	b.w	80066b8 <_dtoa_r+0x28>
 800704c:	6932      	ldr	r2, [r6, #16]
 800704e:	f106 010c 	add.w	r1, r6, #12
 8007052:	3202      	adds	r2, #2
 8007054:	0092      	lsls	r2, r2, #2
 8007056:	300c      	adds	r0, #12
 8007058:	f001 f964 	bl	8008324 <memcpy>
 800705c:	2201      	movs	r2, #1
 800705e:	4639      	mov	r1, r7
 8007060:	4628      	mov	r0, r5
 8007062:	f000 fc03 	bl	800786c <__lshift>
 8007066:	46b0      	mov	r8, r6
 8007068:	4606      	mov	r6, r0
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	9a03      	ldr	r2, [sp, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	9308      	str	r3, [sp, #32]
 8007072:	9b06      	ldr	r3, [sp, #24]
 8007074:	4413      	add	r3, r2
 8007076:	930b      	str	r3, [sp, #44]	; 0x2c
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	930a      	str	r3, [sp, #40]	; 0x28
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	4621      	mov	r1, r4
 8007084:	3b01      	subs	r3, #1
 8007086:	4650      	mov	r0, sl
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	f7ff fa78 	bl	800657e <quorem>
 800708e:	4641      	mov	r1, r8
 8007090:	9006      	str	r0, [sp, #24]
 8007092:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007096:	4650      	mov	r0, sl
 8007098:	f000 fc54 	bl	8007944 <__mcmp>
 800709c:	4632      	mov	r2, r6
 800709e:	9009      	str	r0, [sp, #36]	; 0x24
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 fc6a 	bl	800797c <__mdiff>
 80070a8:	68c2      	ldr	r2, [r0, #12]
 80070aa:	4607      	mov	r7, r0
 80070ac:	bb02      	cbnz	r2, 80070f0 <_dtoa_r+0xa60>
 80070ae:	4601      	mov	r1, r0
 80070b0:	4650      	mov	r0, sl
 80070b2:	f000 fc47 	bl	8007944 <__mcmp>
 80070b6:	4602      	mov	r2, r0
 80070b8:	4639      	mov	r1, r7
 80070ba:	4628      	mov	r0, r5
 80070bc:	920c      	str	r2, [sp, #48]	; 0x30
 80070be:	f000 fa07 	bl	80074d0 <_Bfree>
 80070c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c6:	9f08      	ldr	r7, [sp, #32]
 80070c8:	ea43 0102 	orr.w	r1, r3, r2
 80070cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ce:	4319      	orrs	r1, r3
 80070d0:	d110      	bne.n	80070f4 <_dtoa_r+0xa64>
 80070d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070d6:	d029      	beq.n	800712c <_dtoa_r+0xa9c>
 80070d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dd02      	ble.n	80070e4 <_dtoa_r+0xa54>
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	f883 9000 	strb.w	r9, [r3]
 80070ea:	e777      	b.n	8006fdc <_dtoa_r+0x94c>
 80070ec:	4630      	mov	r0, r6
 80070ee:	e7ba      	b.n	8007066 <_dtoa_r+0x9d6>
 80070f0:	2201      	movs	r2, #1
 80070f2:	e7e1      	b.n	80070b8 <_dtoa_r+0xa28>
 80070f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	db04      	blt.n	8007104 <_dtoa_r+0xa74>
 80070fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80070fc:	430b      	orrs	r3, r1
 80070fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007100:	430b      	orrs	r3, r1
 8007102:	d120      	bne.n	8007146 <_dtoa_r+0xab6>
 8007104:	2a00      	cmp	r2, #0
 8007106:	dded      	ble.n	80070e4 <_dtoa_r+0xa54>
 8007108:	4651      	mov	r1, sl
 800710a:	2201      	movs	r2, #1
 800710c:	4628      	mov	r0, r5
 800710e:	f000 fbad 	bl	800786c <__lshift>
 8007112:	4621      	mov	r1, r4
 8007114:	4682      	mov	sl, r0
 8007116:	f000 fc15 	bl	8007944 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dc03      	bgt.n	8007126 <_dtoa_r+0xa96>
 800711e:	d1e1      	bne.n	80070e4 <_dtoa_r+0xa54>
 8007120:	f019 0f01 	tst.w	r9, #1
 8007124:	d0de      	beq.n	80070e4 <_dtoa_r+0xa54>
 8007126:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800712a:	d1d8      	bne.n	80070de <_dtoa_r+0xa4e>
 800712c:	2339      	movs	r3, #57	; 0x39
 800712e:	9a04      	ldr	r2, [sp, #16]
 8007130:	7013      	strb	r3, [r2, #0]
 8007132:	463b      	mov	r3, r7
 8007134:	461f      	mov	r7, r3
 8007136:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800713a:	3b01      	subs	r3, #1
 800713c:	2a39      	cmp	r2, #57	; 0x39
 800713e:	d06b      	beq.n	8007218 <_dtoa_r+0xb88>
 8007140:	3201      	adds	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e74a      	b.n	8006fdc <_dtoa_r+0x94c>
 8007146:	2a00      	cmp	r2, #0
 8007148:	dd07      	ble.n	800715a <_dtoa_r+0xaca>
 800714a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800714e:	d0ed      	beq.n	800712c <_dtoa_r+0xa9c>
 8007150:	9a04      	ldr	r2, [sp, #16]
 8007152:	f109 0301 	add.w	r3, r9, #1
 8007156:	7013      	strb	r3, [r2, #0]
 8007158:	e740      	b.n	8006fdc <_dtoa_r+0x94c>
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800715e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007162:	4293      	cmp	r3, r2
 8007164:	d042      	beq.n	80071ec <_dtoa_r+0xb5c>
 8007166:	4651      	mov	r1, sl
 8007168:	2300      	movs	r3, #0
 800716a:	220a      	movs	r2, #10
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f9d1 	bl	8007514 <__multadd>
 8007172:	45b0      	cmp	r8, r6
 8007174:	4682      	mov	sl, r0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	f04f 020a 	mov.w	r2, #10
 800717e:	4641      	mov	r1, r8
 8007180:	4628      	mov	r0, r5
 8007182:	d107      	bne.n	8007194 <_dtoa_r+0xb04>
 8007184:	f000 f9c6 	bl	8007514 <__multadd>
 8007188:	4680      	mov	r8, r0
 800718a:	4606      	mov	r6, r0
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	3301      	adds	r3, #1
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	e775      	b.n	8007080 <_dtoa_r+0x9f0>
 8007194:	f000 f9be 	bl	8007514 <__multadd>
 8007198:	4631      	mov	r1, r6
 800719a:	4680      	mov	r8, r0
 800719c:	2300      	movs	r3, #0
 800719e:	220a      	movs	r2, #10
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f9b7 	bl	8007514 <__multadd>
 80071a6:	4606      	mov	r6, r0
 80071a8:	e7f0      	b.n	800718c <_dtoa_r+0xafc>
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	9306      	str	r3, [sp, #24]
 80071ae:	9f03      	ldr	r7, [sp, #12]
 80071b0:	4621      	mov	r1, r4
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7ff f9e3 	bl	800657e <quorem>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071be:	f807 9b01 	strb.w	r9, [r7], #1
 80071c2:	1afa      	subs	r2, r7, r3
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	4293      	cmp	r3, r2
 80071c8:	dd07      	ble.n	80071da <_dtoa_r+0xb4a>
 80071ca:	4651      	mov	r1, sl
 80071cc:	2300      	movs	r3, #0
 80071ce:	220a      	movs	r2, #10
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 f99f 	bl	8007514 <__multadd>
 80071d6:	4682      	mov	sl, r0
 80071d8:	e7ea      	b.n	80071b0 <_dtoa_r+0xb20>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	f04f 0800 	mov.w	r8, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfcc      	ite	gt
 80071e4:	461f      	movgt	r7, r3
 80071e6:	2701      	movle	r7, #1
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	441f      	add	r7, r3
 80071ec:	4651      	mov	r1, sl
 80071ee:	2201      	movs	r2, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 fb3b 	bl	800786c <__lshift>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4682      	mov	sl, r0
 80071fa:	f000 fba3 	bl	8007944 <__mcmp>
 80071fe:	2800      	cmp	r0, #0
 8007200:	dc97      	bgt.n	8007132 <_dtoa_r+0xaa2>
 8007202:	d102      	bne.n	800720a <_dtoa_r+0xb7a>
 8007204:	f019 0f01 	tst.w	r9, #1
 8007208:	d193      	bne.n	8007132 <_dtoa_r+0xaa2>
 800720a:	463b      	mov	r3, r7
 800720c:	461f      	mov	r7, r3
 800720e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007212:	2a30      	cmp	r2, #48	; 0x30
 8007214:	d0fa      	beq.n	800720c <_dtoa_r+0xb7c>
 8007216:	e6e1      	b.n	8006fdc <_dtoa_r+0x94c>
 8007218:	9a03      	ldr	r2, [sp, #12]
 800721a:	429a      	cmp	r2, r3
 800721c:	d18a      	bne.n	8007134 <_dtoa_r+0xaa4>
 800721e:	2331      	movs	r3, #49	; 0x31
 8007220:	f10b 0b01 	add.w	fp, fp, #1
 8007224:	e797      	b.n	8007156 <_dtoa_r+0xac6>
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <_dtoa_r+0xbc0>)
 8007228:	f7ff ba9f 	b.w	800676a <_dtoa_r+0xda>
 800722c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f aa77 	bne.w	8006722 <_dtoa_r+0x92>
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <_dtoa_r+0xbc4>)
 8007236:	f7ff ba98 	b.w	800676a <_dtoa_r+0xda>
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dcb6      	bgt.n	80071ae <_dtoa_r+0xb1e>
 8007240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007242:	2b02      	cmp	r3, #2
 8007244:	f73f aeb5 	bgt.w	8006fb2 <_dtoa_r+0x922>
 8007248:	e7b1      	b.n	80071ae <_dtoa_r+0xb1e>
 800724a:	bf00      	nop
 800724c:	0800875e 	.word	0x0800875e
 8007250:	080086be 	.word	0x080086be
 8007254:	080086e2 	.word	0x080086e2

08007258 <_free_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4605      	mov	r5, r0
 800725c:	2900      	cmp	r1, #0
 800725e:	d040      	beq.n	80072e2 <_free_r+0x8a>
 8007260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007264:	1f0c      	subs	r4, r1, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfb8      	it	lt
 800726a:	18e4      	addlt	r4, r4, r3
 800726c:	f000 f8e4 	bl	8007438 <__malloc_lock>
 8007270:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <_free_r+0x8c>)
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	b933      	cbnz	r3, 8007284 <_free_r+0x2c>
 8007276:	6063      	str	r3, [r4, #4]
 8007278:	6014      	str	r4, [r2, #0]
 800727a:	4628      	mov	r0, r5
 800727c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007280:	f000 b8e0 	b.w	8007444 <__malloc_unlock>
 8007284:	42a3      	cmp	r3, r4
 8007286:	d908      	bls.n	800729a <_free_r+0x42>
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	1821      	adds	r1, r4, r0
 800728c:	428b      	cmp	r3, r1
 800728e:	bf01      	itttt	eq
 8007290:	6819      	ldreq	r1, [r3, #0]
 8007292:	685b      	ldreq	r3, [r3, #4]
 8007294:	1809      	addeq	r1, r1, r0
 8007296:	6021      	streq	r1, [r4, #0]
 8007298:	e7ed      	b.n	8007276 <_free_r+0x1e>
 800729a:	461a      	mov	r2, r3
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b10b      	cbz	r3, 80072a4 <_free_r+0x4c>
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d9fa      	bls.n	800729a <_free_r+0x42>
 80072a4:	6811      	ldr	r1, [r2, #0]
 80072a6:	1850      	adds	r0, r2, r1
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d10b      	bne.n	80072c4 <_free_r+0x6c>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	4401      	add	r1, r0
 80072b0:	1850      	adds	r0, r2, r1
 80072b2:	4283      	cmp	r3, r0
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	d1e0      	bne.n	800727a <_free_r+0x22>
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	4408      	add	r0, r1
 80072be:	6010      	str	r0, [r2, #0]
 80072c0:	6053      	str	r3, [r2, #4]
 80072c2:	e7da      	b.n	800727a <_free_r+0x22>
 80072c4:	d902      	bls.n	80072cc <_free_r+0x74>
 80072c6:	230c      	movs	r3, #12
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	e7d6      	b.n	800727a <_free_r+0x22>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	1821      	adds	r1, r4, r0
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf01      	itttt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	1809      	addeq	r1, r1, r0
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	6063      	str	r3, [r4, #4]
 80072de:	6054      	str	r4, [r2, #4]
 80072e0:	e7cb      	b.n	800727a <_free_r+0x22>
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000528 	.word	0x20000528

080072e8 <malloc>:
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <malloc+0xc>)
 80072ea:	4601      	mov	r1, r0
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f000 b823 	b.w	8007338 <_malloc_r>
 80072f2:	bf00      	nop
 80072f4:	20000068 	.word	0x20000068

080072f8 <sbrk_aligned>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4e0e      	ldr	r6, [pc, #56]	; (8007334 <sbrk_aligned+0x3c>)
 80072fc:	460c      	mov	r4, r1
 80072fe:	6831      	ldr	r1, [r6, #0]
 8007300:	4605      	mov	r5, r0
 8007302:	b911      	cbnz	r1, 800730a <sbrk_aligned+0x12>
 8007304:	f000 fffe 	bl	8008304 <_sbrk_r>
 8007308:	6030      	str	r0, [r6, #0]
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f000 fff9 	bl	8008304 <_sbrk_r>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d00a      	beq.n	800732c <sbrk_aligned+0x34>
 8007316:	1cc4      	adds	r4, r0, #3
 8007318:	f024 0403 	bic.w	r4, r4, #3
 800731c:	42a0      	cmp	r0, r4
 800731e:	d007      	beq.n	8007330 <sbrk_aligned+0x38>
 8007320:	1a21      	subs	r1, r4, r0
 8007322:	4628      	mov	r0, r5
 8007324:	f000 ffee 	bl	8008304 <_sbrk_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d101      	bne.n	8007330 <sbrk_aligned+0x38>
 800732c:	f04f 34ff 	mov.w	r4, #4294967295
 8007330:	4620      	mov	r0, r4
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	2000052c 	.word	0x2000052c

08007338 <_malloc_r>:
 8007338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800733c:	1ccd      	adds	r5, r1, #3
 800733e:	f025 0503 	bic.w	r5, r5, #3
 8007342:	3508      	adds	r5, #8
 8007344:	2d0c      	cmp	r5, #12
 8007346:	bf38      	it	cc
 8007348:	250c      	movcc	r5, #12
 800734a:	2d00      	cmp	r5, #0
 800734c:	4607      	mov	r7, r0
 800734e:	db01      	blt.n	8007354 <_malloc_r+0x1c>
 8007350:	42a9      	cmp	r1, r5
 8007352:	d905      	bls.n	8007360 <_malloc_r+0x28>
 8007354:	230c      	movs	r3, #12
 8007356:	2600      	movs	r6, #0
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4630      	mov	r0, r6
 800735c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007360:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007434 <_malloc_r+0xfc>
 8007364:	f000 f868 	bl	8007438 <__malloc_lock>
 8007368:	f8d8 3000 	ldr.w	r3, [r8]
 800736c:	461c      	mov	r4, r3
 800736e:	bb5c      	cbnz	r4, 80073c8 <_malloc_r+0x90>
 8007370:	4629      	mov	r1, r5
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff ffc0 	bl	80072f8 <sbrk_aligned>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	4604      	mov	r4, r0
 800737c:	d155      	bne.n	800742a <_malloc_r+0xf2>
 800737e:	f8d8 4000 	ldr.w	r4, [r8]
 8007382:	4626      	mov	r6, r4
 8007384:	2e00      	cmp	r6, #0
 8007386:	d145      	bne.n	8007414 <_malloc_r+0xdc>
 8007388:	2c00      	cmp	r4, #0
 800738a:	d048      	beq.n	800741e <_malloc_r+0xe6>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	4631      	mov	r1, r6
 8007390:	4638      	mov	r0, r7
 8007392:	eb04 0903 	add.w	r9, r4, r3
 8007396:	f000 ffb5 	bl	8008304 <_sbrk_r>
 800739a:	4581      	cmp	r9, r0
 800739c:	d13f      	bne.n	800741e <_malloc_r+0xe6>
 800739e:	6821      	ldr	r1, [r4, #0]
 80073a0:	4638      	mov	r0, r7
 80073a2:	1a6d      	subs	r5, r5, r1
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7ff ffa7 	bl	80072f8 <sbrk_aligned>
 80073aa:	3001      	adds	r0, #1
 80073ac:	d037      	beq.n	800741e <_malloc_r+0xe6>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	442b      	add	r3, r5
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	f8d8 3000 	ldr.w	r3, [r8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d038      	beq.n	800742e <_malloc_r+0xf6>
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	42a2      	cmp	r2, r4
 80073c0:	d12b      	bne.n	800741a <_malloc_r+0xe2>
 80073c2:	2200      	movs	r2, #0
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	e00f      	b.n	80073e8 <_malloc_r+0xb0>
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	1b52      	subs	r2, r2, r5
 80073cc:	d41f      	bmi.n	800740e <_malloc_r+0xd6>
 80073ce:	2a0b      	cmp	r2, #11
 80073d0:	d917      	bls.n	8007402 <_malloc_r+0xca>
 80073d2:	1961      	adds	r1, r4, r5
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	6025      	str	r5, [r4, #0]
 80073d8:	bf18      	it	ne
 80073da:	6059      	strne	r1, [r3, #4]
 80073dc:	6863      	ldr	r3, [r4, #4]
 80073de:	bf08      	it	eq
 80073e0:	f8c8 1000 	streq.w	r1, [r8]
 80073e4:	5162      	str	r2, [r4, r5]
 80073e6:	604b      	str	r3, [r1, #4]
 80073e8:	4638      	mov	r0, r7
 80073ea:	f104 060b 	add.w	r6, r4, #11
 80073ee:	f000 f829 	bl	8007444 <__malloc_unlock>
 80073f2:	f026 0607 	bic.w	r6, r6, #7
 80073f6:	1d23      	adds	r3, r4, #4
 80073f8:	1af2      	subs	r2, r6, r3
 80073fa:	d0ae      	beq.n	800735a <_malloc_r+0x22>
 80073fc:	1b9b      	subs	r3, r3, r6
 80073fe:	50a3      	str	r3, [r4, r2]
 8007400:	e7ab      	b.n	800735a <_malloc_r+0x22>
 8007402:	42a3      	cmp	r3, r4
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	d1dd      	bne.n	80073c4 <_malloc_r+0x8c>
 8007408:	f8c8 2000 	str.w	r2, [r8]
 800740c:	e7ec      	b.n	80073e8 <_malloc_r+0xb0>
 800740e:	4623      	mov	r3, r4
 8007410:	6864      	ldr	r4, [r4, #4]
 8007412:	e7ac      	b.n	800736e <_malloc_r+0x36>
 8007414:	4634      	mov	r4, r6
 8007416:	6876      	ldr	r6, [r6, #4]
 8007418:	e7b4      	b.n	8007384 <_malloc_r+0x4c>
 800741a:	4613      	mov	r3, r2
 800741c:	e7cc      	b.n	80073b8 <_malloc_r+0x80>
 800741e:	230c      	movs	r3, #12
 8007420:	4638      	mov	r0, r7
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	f000 f80e 	bl	8007444 <__malloc_unlock>
 8007428:	e797      	b.n	800735a <_malloc_r+0x22>
 800742a:	6025      	str	r5, [r4, #0]
 800742c:	e7dc      	b.n	80073e8 <_malloc_r+0xb0>
 800742e:	605b      	str	r3, [r3, #4]
 8007430:	deff      	udf	#255	; 0xff
 8007432:	bf00      	nop
 8007434:	20000528 	.word	0x20000528

08007438 <__malloc_lock>:
 8007438:	4801      	ldr	r0, [pc, #4]	; (8007440 <__malloc_lock+0x8>)
 800743a:	f7ff b890 	b.w	800655e <__retarget_lock_acquire_recursive>
 800743e:	bf00      	nop
 8007440:	20000524 	.word	0x20000524

08007444 <__malloc_unlock>:
 8007444:	4801      	ldr	r0, [pc, #4]	; (800744c <__malloc_unlock+0x8>)
 8007446:	f7ff b88b 	b.w	8006560 <__retarget_lock_release_recursive>
 800744a:	bf00      	nop
 800744c:	20000524 	.word	0x20000524

08007450 <_Balloc>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	69c6      	ldr	r6, [r0, #28]
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	b976      	cbnz	r6, 8007478 <_Balloc+0x28>
 800745a:	2010      	movs	r0, #16
 800745c:	f7ff ff44 	bl	80072e8 <malloc>
 8007460:	4602      	mov	r2, r0
 8007462:	61e0      	str	r0, [r4, #28]
 8007464:	b920      	cbnz	r0, 8007470 <_Balloc+0x20>
 8007466:	216b      	movs	r1, #107	; 0x6b
 8007468:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <_Balloc+0x78>)
 800746a:	4818      	ldr	r0, [pc, #96]	; (80074cc <_Balloc+0x7c>)
 800746c:	f000 ff68 	bl	8008340 <__assert_func>
 8007470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007474:	6006      	str	r6, [r0, #0]
 8007476:	60c6      	str	r6, [r0, #12]
 8007478:	69e6      	ldr	r6, [r4, #28]
 800747a:	68f3      	ldr	r3, [r6, #12]
 800747c:	b183      	cbz	r3, 80074a0 <_Balloc+0x50>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007486:	b9b8      	cbnz	r0, 80074b8 <_Balloc+0x68>
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f605 	lsl.w	r6, r1, r5
 800748e:	1d72      	adds	r2, r6, #5
 8007490:	4620      	mov	r0, r4
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	f000 ff72 	bl	800837c <_calloc_r>
 8007498:	b160      	cbz	r0, 80074b4 <_Balloc+0x64>
 800749a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800749e:	e00e      	b.n	80074be <_Balloc+0x6e>
 80074a0:	2221      	movs	r2, #33	; 0x21
 80074a2:	2104      	movs	r1, #4
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 ff69 	bl	800837c <_calloc_r>
 80074aa:	69e3      	ldr	r3, [r4, #28]
 80074ac:	60f0      	str	r0, [r6, #12]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e4      	bne.n	800747e <_Balloc+0x2e>
 80074b4:	2000      	movs	r0, #0
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	6802      	ldr	r2, [r0, #0]
 80074ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074be:	2300      	movs	r3, #0
 80074c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074c4:	e7f7      	b.n	80074b6 <_Balloc+0x66>
 80074c6:	bf00      	nop
 80074c8:	080086ef 	.word	0x080086ef
 80074cc:	0800876f 	.word	0x0800876f

080074d0 <_Bfree>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	69c6      	ldr	r6, [r0, #28]
 80074d4:	4605      	mov	r5, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	b976      	cbnz	r6, 80074f8 <_Bfree+0x28>
 80074da:	2010      	movs	r0, #16
 80074dc:	f7ff ff04 	bl	80072e8 <malloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	61e8      	str	r0, [r5, #28]
 80074e4:	b920      	cbnz	r0, 80074f0 <_Bfree+0x20>
 80074e6:	218f      	movs	r1, #143	; 0x8f
 80074e8:	4b08      	ldr	r3, [pc, #32]	; (800750c <_Bfree+0x3c>)
 80074ea:	4809      	ldr	r0, [pc, #36]	; (8007510 <_Bfree+0x40>)
 80074ec:	f000 ff28 	bl	8008340 <__assert_func>
 80074f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074f4:	6006      	str	r6, [r0, #0]
 80074f6:	60c6      	str	r6, [r0, #12]
 80074f8:	b13c      	cbz	r4, 800750a <_Bfree+0x3a>
 80074fa:	69eb      	ldr	r3, [r5, #28]
 80074fc:	6862      	ldr	r2, [r4, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007504:	6021      	str	r1, [r4, #0]
 8007506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	080086ef 	.word	0x080086ef
 8007510:	0800876f 	.word	0x0800876f

08007514 <__multadd>:
 8007514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007518:	4607      	mov	r7, r0
 800751a:	460c      	mov	r4, r1
 800751c:	461e      	mov	r6, r3
 800751e:	2000      	movs	r0, #0
 8007520:	690d      	ldr	r5, [r1, #16]
 8007522:	f101 0c14 	add.w	ip, r1, #20
 8007526:	f8dc 3000 	ldr.w	r3, [ip]
 800752a:	3001      	adds	r0, #1
 800752c:	b299      	uxth	r1, r3
 800752e:	fb02 6101 	mla	r1, r2, r1, r6
 8007532:	0c1e      	lsrs	r6, r3, #16
 8007534:	0c0b      	lsrs	r3, r1, #16
 8007536:	fb02 3306 	mla	r3, r2, r6, r3
 800753a:	b289      	uxth	r1, r1
 800753c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007540:	4285      	cmp	r5, r0
 8007542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007546:	f84c 1b04 	str.w	r1, [ip], #4
 800754a:	dcec      	bgt.n	8007526 <__multadd+0x12>
 800754c:	b30e      	cbz	r6, 8007592 <__multadd+0x7e>
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	42ab      	cmp	r3, r5
 8007552:	dc19      	bgt.n	8007588 <__multadd+0x74>
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	4638      	mov	r0, r7
 8007558:	3101      	adds	r1, #1
 800755a:	f7ff ff79 	bl	8007450 <_Balloc>
 800755e:	4680      	mov	r8, r0
 8007560:	b928      	cbnz	r0, 800756e <__multadd+0x5a>
 8007562:	4602      	mov	r2, r0
 8007564:	21ba      	movs	r1, #186	; 0xba
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <__multadd+0x84>)
 8007568:	480c      	ldr	r0, [pc, #48]	; (800759c <__multadd+0x88>)
 800756a:	f000 fee9 	bl	8008340 <__assert_func>
 800756e:	6922      	ldr	r2, [r4, #16]
 8007570:	f104 010c 	add.w	r1, r4, #12
 8007574:	3202      	adds	r2, #2
 8007576:	0092      	lsls	r2, r2, #2
 8007578:	300c      	adds	r0, #12
 800757a:	f000 fed3 	bl	8008324 <memcpy>
 800757e:	4621      	mov	r1, r4
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ffa5 	bl	80074d0 <_Bfree>
 8007586:	4644      	mov	r4, r8
 8007588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800758c:	3501      	adds	r5, #1
 800758e:	615e      	str	r6, [r3, #20]
 8007590:	6125      	str	r5, [r4, #16]
 8007592:	4620      	mov	r0, r4
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	0800875e 	.word	0x0800875e
 800759c:	0800876f 	.word	0x0800876f

080075a0 <__hi0bits>:
 80075a0:	0c02      	lsrs	r2, r0, #16
 80075a2:	0412      	lsls	r2, r2, #16
 80075a4:	4603      	mov	r3, r0
 80075a6:	b9ca      	cbnz	r2, 80075dc <__hi0bits+0x3c>
 80075a8:	0403      	lsls	r3, r0, #16
 80075aa:	2010      	movs	r0, #16
 80075ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075b0:	bf04      	itt	eq
 80075b2:	021b      	lsleq	r3, r3, #8
 80075b4:	3008      	addeq	r0, #8
 80075b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075ba:	bf04      	itt	eq
 80075bc:	011b      	lsleq	r3, r3, #4
 80075be:	3004      	addeq	r0, #4
 80075c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075c4:	bf04      	itt	eq
 80075c6:	009b      	lsleq	r3, r3, #2
 80075c8:	3002      	addeq	r0, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db05      	blt.n	80075da <__hi0bits+0x3a>
 80075ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80075d2:	f100 0001 	add.w	r0, r0, #1
 80075d6:	bf08      	it	eq
 80075d8:	2020      	moveq	r0, #32
 80075da:	4770      	bx	lr
 80075dc:	2000      	movs	r0, #0
 80075de:	e7e5      	b.n	80075ac <__hi0bits+0xc>

080075e0 <__lo0bits>:
 80075e0:	6803      	ldr	r3, [r0, #0]
 80075e2:	4602      	mov	r2, r0
 80075e4:	f013 0007 	ands.w	r0, r3, #7
 80075e8:	d00b      	beq.n	8007602 <__lo0bits+0x22>
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	d421      	bmi.n	8007632 <__lo0bits+0x52>
 80075ee:	0798      	lsls	r0, r3, #30
 80075f0:	bf49      	itett	mi
 80075f2:	085b      	lsrmi	r3, r3, #1
 80075f4:	089b      	lsrpl	r3, r3, #2
 80075f6:	2001      	movmi	r0, #1
 80075f8:	6013      	strmi	r3, [r2, #0]
 80075fa:	bf5c      	itt	pl
 80075fc:	2002      	movpl	r0, #2
 80075fe:	6013      	strpl	r3, [r2, #0]
 8007600:	4770      	bx	lr
 8007602:	b299      	uxth	r1, r3
 8007604:	b909      	cbnz	r1, 800760a <__lo0bits+0x2a>
 8007606:	2010      	movs	r0, #16
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	b2d9      	uxtb	r1, r3
 800760c:	b909      	cbnz	r1, 8007612 <__lo0bits+0x32>
 800760e:	3008      	adds	r0, #8
 8007610:	0a1b      	lsrs	r3, r3, #8
 8007612:	0719      	lsls	r1, r3, #28
 8007614:	bf04      	itt	eq
 8007616:	091b      	lsreq	r3, r3, #4
 8007618:	3004      	addeq	r0, #4
 800761a:	0799      	lsls	r1, r3, #30
 800761c:	bf04      	itt	eq
 800761e:	089b      	lsreq	r3, r3, #2
 8007620:	3002      	addeq	r0, #2
 8007622:	07d9      	lsls	r1, r3, #31
 8007624:	d403      	bmi.n	800762e <__lo0bits+0x4e>
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	f100 0001 	add.w	r0, r0, #1
 800762c:	d003      	beq.n	8007636 <__lo0bits+0x56>
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	4770      	bx	lr
 8007632:	2000      	movs	r0, #0
 8007634:	4770      	bx	lr
 8007636:	2020      	movs	r0, #32
 8007638:	4770      	bx	lr
	...

0800763c <__i2b>:
 800763c:	b510      	push	{r4, lr}
 800763e:	460c      	mov	r4, r1
 8007640:	2101      	movs	r1, #1
 8007642:	f7ff ff05 	bl	8007450 <_Balloc>
 8007646:	4602      	mov	r2, r0
 8007648:	b928      	cbnz	r0, 8007656 <__i2b+0x1a>
 800764a:	f240 1145 	movw	r1, #325	; 0x145
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <__i2b+0x24>)
 8007650:	4804      	ldr	r0, [pc, #16]	; (8007664 <__i2b+0x28>)
 8007652:	f000 fe75 	bl	8008340 <__assert_func>
 8007656:	2301      	movs	r3, #1
 8007658:	6144      	str	r4, [r0, #20]
 800765a:	6103      	str	r3, [r0, #16]
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	0800875e 	.word	0x0800875e
 8007664:	0800876f 	.word	0x0800876f

08007668 <__multiply>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	4691      	mov	r9, r2
 800766e:	690a      	ldr	r2, [r1, #16]
 8007670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007674:	460c      	mov	r4, r1
 8007676:	429a      	cmp	r2, r3
 8007678:	bfbe      	ittt	lt
 800767a:	460b      	movlt	r3, r1
 800767c:	464c      	movlt	r4, r9
 800767e:	4699      	movlt	r9, r3
 8007680:	6927      	ldr	r7, [r4, #16]
 8007682:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	eb07 060a 	add.w	r6, r7, sl
 800768e:	42b3      	cmp	r3, r6
 8007690:	b085      	sub	sp, #20
 8007692:	bfb8      	it	lt
 8007694:	3101      	addlt	r1, #1
 8007696:	f7ff fedb 	bl	8007450 <_Balloc>
 800769a:	b930      	cbnz	r0, 80076aa <__multiply+0x42>
 800769c:	4602      	mov	r2, r0
 800769e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80076a2:	4b43      	ldr	r3, [pc, #268]	; (80077b0 <__multiply+0x148>)
 80076a4:	4843      	ldr	r0, [pc, #268]	; (80077b4 <__multiply+0x14c>)
 80076a6:	f000 fe4b 	bl	8008340 <__assert_func>
 80076aa:	f100 0514 	add.w	r5, r0, #20
 80076ae:	462b      	mov	r3, r5
 80076b0:	2200      	movs	r2, #0
 80076b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076b6:	4543      	cmp	r3, r8
 80076b8:	d321      	bcc.n	80076fe <__multiply+0x96>
 80076ba:	f104 0314 	add.w	r3, r4, #20
 80076be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076c2:	f109 0314 	add.w	r3, r9, #20
 80076c6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076ca:	9202      	str	r2, [sp, #8]
 80076cc:	1b3a      	subs	r2, r7, r4
 80076ce:	3a15      	subs	r2, #21
 80076d0:	f022 0203 	bic.w	r2, r2, #3
 80076d4:	3204      	adds	r2, #4
 80076d6:	f104 0115 	add.w	r1, r4, #21
 80076da:	428f      	cmp	r7, r1
 80076dc:	bf38      	it	cc
 80076de:	2204      	movcc	r2, #4
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	9a02      	ldr	r2, [sp, #8]
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d80c      	bhi.n	8007704 <__multiply+0x9c>
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	dd03      	ble.n	80076f6 <__multiply+0x8e>
 80076ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d05a      	beq.n	80077ac <__multiply+0x144>
 80076f6:	6106      	str	r6, [r0, #16]
 80076f8:	b005      	add	sp, #20
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	f843 2b04 	str.w	r2, [r3], #4
 8007702:	e7d8      	b.n	80076b6 <__multiply+0x4e>
 8007704:	f8b3 a000 	ldrh.w	sl, [r3]
 8007708:	f1ba 0f00 	cmp.w	sl, #0
 800770c:	d023      	beq.n	8007756 <__multiply+0xee>
 800770e:	46a9      	mov	r9, r5
 8007710:	f04f 0c00 	mov.w	ip, #0
 8007714:	f104 0e14 	add.w	lr, r4, #20
 8007718:	f85e 2b04 	ldr.w	r2, [lr], #4
 800771c:	f8d9 1000 	ldr.w	r1, [r9]
 8007720:	fa1f fb82 	uxth.w	fp, r2
 8007724:	b289      	uxth	r1, r1
 8007726:	fb0a 110b 	mla	r1, sl, fp, r1
 800772a:	4461      	add	r1, ip
 800772c:	f8d9 c000 	ldr.w	ip, [r9]
 8007730:	0c12      	lsrs	r2, r2, #16
 8007732:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007736:	fb0a c202 	mla	r2, sl, r2, ip
 800773a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800773e:	b289      	uxth	r1, r1
 8007740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007744:	4577      	cmp	r7, lr
 8007746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800774a:	f849 1b04 	str.w	r1, [r9], #4
 800774e:	d8e3      	bhi.n	8007718 <__multiply+0xb0>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	f845 c002 	str.w	ip, [r5, r2]
 8007756:	9a03      	ldr	r2, [sp, #12]
 8007758:	3304      	adds	r3, #4
 800775a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	d021      	beq.n	80077a8 <__multiply+0x140>
 8007764:	46ae      	mov	lr, r5
 8007766:	f04f 0a00 	mov.w	sl, #0
 800776a:	6829      	ldr	r1, [r5, #0]
 800776c:	f104 0c14 	add.w	ip, r4, #20
 8007770:	f8bc b000 	ldrh.w	fp, [ip]
 8007774:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007778:	b289      	uxth	r1, r1
 800777a:	fb09 220b 	mla	r2, r9, fp, r2
 800777e:	4452      	add	r2, sl
 8007780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007784:	f84e 1b04 	str.w	r1, [lr], #4
 8007788:	f85c 1b04 	ldr.w	r1, [ip], #4
 800778c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007790:	f8be 1000 	ldrh.w	r1, [lr]
 8007794:	4567      	cmp	r7, ip
 8007796:	fb09 110a 	mla	r1, r9, sl, r1
 800779a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800779e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077a2:	d8e5      	bhi.n	8007770 <__multiply+0x108>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	50a9      	str	r1, [r5, r2]
 80077a8:	3504      	adds	r5, #4
 80077aa:	e79a      	b.n	80076e2 <__multiply+0x7a>
 80077ac:	3e01      	subs	r6, #1
 80077ae:	e79c      	b.n	80076ea <__multiply+0x82>
 80077b0:	0800875e 	.word	0x0800875e
 80077b4:	0800876f 	.word	0x0800876f

080077b8 <__pow5mult>:
 80077b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077bc:	4615      	mov	r5, r2
 80077be:	f012 0203 	ands.w	r2, r2, #3
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	d007      	beq.n	80077d8 <__pow5mult+0x20>
 80077c8:	4c25      	ldr	r4, [pc, #148]	; (8007860 <__pow5mult+0xa8>)
 80077ca:	3a01      	subs	r2, #1
 80077cc:	2300      	movs	r3, #0
 80077ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077d2:	f7ff fe9f 	bl	8007514 <__multadd>
 80077d6:	4607      	mov	r7, r0
 80077d8:	10ad      	asrs	r5, r5, #2
 80077da:	d03d      	beq.n	8007858 <__pow5mult+0xa0>
 80077dc:	69f4      	ldr	r4, [r6, #28]
 80077de:	b97c      	cbnz	r4, 8007800 <__pow5mult+0x48>
 80077e0:	2010      	movs	r0, #16
 80077e2:	f7ff fd81 	bl	80072e8 <malloc>
 80077e6:	4602      	mov	r2, r0
 80077e8:	61f0      	str	r0, [r6, #28]
 80077ea:	b928      	cbnz	r0, 80077f8 <__pow5mult+0x40>
 80077ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077f0:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <__pow5mult+0xac>)
 80077f2:	481d      	ldr	r0, [pc, #116]	; (8007868 <__pow5mult+0xb0>)
 80077f4:	f000 fda4 	bl	8008340 <__assert_func>
 80077f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077fc:	6004      	str	r4, [r0, #0]
 80077fe:	60c4      	str	r4, [r0, #12]
 8007800:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007808:	b94c      	cbnz	r4, 800781e <__pow5mult+0x66>
 800780a:	f240 2171 	movw	r1, #625	; 0x271
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff ff14 	bl	800763c <__i2b>
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	f8c8 0008 	str.w	r0, [r8, #8]
 800781c:	6003      	str	r3, [r0, #0]
 800781e:	f04f 0900 	mov.w	r9, #0
 8007822:	07eb      	lsls	r3, r5, #31
 8007824:	d50a      	bpl.n	800783c <__pow5mult+0x84>
 8007826:	4639      	mov	r1, r7
 8007828:	4622      	mov	r2, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ff1c 	bl	8007668 <__multiply>
 8007830:	4680      	mov	r8, r0
 8007832:	4639      	mov	r1, r7
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff fe4b 	bl	80074d0 <_Bfree>
 800783a:	4647      	mov	r7, r8
 800783c:	106d      	asrs	r5, r5, #1
 800783e:	d00b      	beq.n	8007858 <__pow5mult+0xa0>
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	b938      	cbnz	r0, 8007854 <__pow5mult+0x9c>
 8007844:	4622      	mov	r2, r4
 8007846:	4621      	mov	r1, r4
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff ff0d 	bl	8007668 <__multiply>
 800784e:	6020      	str	r0, [r4, #0]
 8007850:	f8c0 9000 	str.w	r9, [r0]
 8007854:	4604      	mov	r4, r0
 8007856:	e7e4      	b.n	8007822 <__pow5mult+0x6a>
 8007858:	4638      	mov	r0, r7
 800785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785e:	bf00      	nop
 8007860:	080088b8 	.word	0x080088b8
 8007864:	080086ef 	.word	0x080086ef
 8007868:	0800876f 	.word	0x0800876f

0800786c <__lshift>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	460c      	mov	r4, r1
 8007872:	4607      	mov	r7, r0
 8007874:	4691      	mov	r9, r2
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	6849      	ldr	r1, [r1, #4]
 800787a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007884:	f108 0601 	add.w	r6, r8, #1
 8007888:	42b3      	cmp	r3, r6
 800788a:	db0b      	blt.n	80078a4 <__lshift+0x38>
 800788c:	4638      	mov	r0, r7
 800788e:	f7ff fddf 	bl	8007450 <_Balloc>
 8007892:	4605      	mov	r5, r0
 8007894:	b948      	cbnz	r0, 80078aa <__lshift+0x3e>
 8007896:	4602      	mov	r2, r0
 8007898:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800789c:	4b27      	ldr	r3, [pc, #156]	; (800793c <__lshift+0xd0>)
 800789e:	4828      	ldr	r0, [pc, #160]	; (8007940 <__lshift+0xd4>)
 80078a0:	f000 fd4e 	bl	8008340 <__assert_func>
 80078a4:	3101      	adds	r1, #1
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	e7ee      	b.n	8007888 <__lshift+0x1c>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f100 0114 	add.w	r1, r0, #20
 80078b0:	f100 0210 	add.w	r2, r0, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	4553      	cmp	r3, sl
 80078b8:	db33      	blt.n	8007922 <__lshift+0xb6>
 80078ba:	6920      	ldr	r0, [r4, #16]
 80078bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078c0:	f104 0314 	add.w	r3, r4, #20
 80078c4:	f019 091f 	ands.w	r9, r9, #31
 80078c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078d0:	d02b      	beq.n	800792a <__lshift+0xbe>
 80078d2:	468a      	mov	sl, r1
 80078d4:	2200      	movs	r2, #0
 80078d6:	f1c9 0e20 	rsb	lr, r9, #32
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	fa00 f009 	lsl.w	r0, r0, r9
 80078e0:	4310      	orrs	r0, r2
 80078e2:	f84a 0b04 	str.w	r0, [sl], #4
 80078e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ea:	459c      	cmp	ip, r3
 80078ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80078f0:	d8f3      	bhi.n	80078da <__lshift+0x6e>
 80078f2:	ebac 0304 	sub.w	r3, ip, r4
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3304      	adds	r3, #4
 80078fe:	f104 0015 	add.w	r0, r4, #21
 8007902:	4584      	cmp	ip, r0
 8007904:	bf38      	it	cc
 8007906:	2304      	movcc	r3, #4
 8007908:	50ca      	str	r2, [r1, r3]
 800790a:	b10a      	cbz	r2, 8007910 <__lshift+0xa4>
 800790c:	f108 0602 	add.w	r6, r8, #2
 8007910:	3e01      	subs	r6, #1
 8007912:	4638      	mov	r0, r7
 8007914:	4621      	mov	r1, r4
 8007916:	612e      	str	r6, [r5, #16]
 8007918:	f7ff fdda 	bl	80074d0 <_Bfree>
 800791c:	4628      	mov	r0, r5
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	f842 0f04 	str.w	r0, [r2, #4]!
 8007926:	3301      	adds	r3, #1
 8007928:	e7c5      	b.n	80078b6 <__lshift+0x4a>
 800792a:	3904      	subs	r1, #4
 800792c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007930:	459c      	cmp	ip, r3
 8007932:	f841 2f04 	str.w	r2, [r1, #4]!
 8007936:	d8f9      	bhi.n	800792c <__lshift+0xc0>
 8007938:	e7ea      	b.n	8007910 <__lshift+0xa4>
 800793a:	bf00      	nop
 800793c:	0800875e 	.word	0x0800875e
 8007940:	0800876f 	.word	0x0800876f

08007944 <__mcmp>:
 8007944:	4603      	mov	r3, r0
 8007946:	690a      	ldr	r2, [r1, #16]
 8007948:	6900      	ldr	r0, [r0, #16]
 800794a:	b530      	push	{r4, r5, lr}
 800794c:	1a80      	subs	r0, r0, r2
 800794e:	d10d      	bne.n	800796c <__mcmp+0x28>
 8007950:	3314      	adds	r3, #20
 8007952:	3114      	adds	r1, #20
 8007954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800795c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007964:	4295      	cmp	r5, r2
 8007966:	d002      	beq.n	800796e <__mcmp+0x2a>
 8007968:	d304      	bcc.n	8007974 <__mcmp+0x30>
 800796a:	2001      	movs	r0, #1
 800796c:	bd30      	pop	{r4, r5, pc}
 800796e:	42a3      	cmp	r3, r4
 8007970:	d3f4      	bcc.n	800795c <__mcmp+0x18>
 8007972:	e7fb      	b.n	800796c <__mcmp+0x28>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e7f8      	b.n	800796c <__mcmp+0x28>
	...

0800797c <__mdiff>:
 800797c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	460d      	mov	r5, r1
 8007982:	4607      	mov	r7, r0
 8007984:	4611      	mov	r1, r2
 8007986:	4628      	mov	r0, r5
 8007988:	4614      	mov	r4, r2
 800798a:	f7ff ffdb 	bl	8007944 <__mcmp>
 800798e:	1e06      	subs	r6, r0, #0
 8007990:	d111      	bne.n	80079b6 <__mdiff+0x3a>
 8007992:	4631      	mov	r1, r6
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff fd5b 	bl	8007450 <_Balloc>
 800799a:	4602      	mov	r2, r0
 800799c:	b928      	cbnz	r0, 80079aa <__mdiff+0x2e>
 800799e:	f240 2137 	movw	r1, #567	; 0x237
 80079a2:	4b3a      	ldr	r3, [pc, #232]	; (8007a8c <__mdiff+0x110>)
 80079a4:	483a      	ldr	r0, [pc, #232]	; (8007a90 <__mdiff+0x114>)
 80079a6:	f000 fccb 	bl	8008340 <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80079b0:	4610      	mov	r0, r2
 80079b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	bfa4      	itt	ge
 80079b8:	4623      	movge	r3, r4
 80079ba:	462c      	movge	r4, r5
 80079bc:	4638      	mov	r0, r7
 80079be:	6861      	ldr	r1, [r4, #4]
 80079c0:	bfa6      	itte	ge
 80079c2:	461d      	movge	r5, r3
 80079c4:	2600      	movge	r6, #0
 80079c6:	2601      	movlt	r6, #1
 80079c8:	f7ff fd42 	bl	8007450 <_Balloc>
 80079cc:	4602      	mov	r2, r0
 80079ce:	b918      	cbnz	r0, 80079d8 <__mdiff+0x5c>
 80079d0:	f240 2145 	movw	r1, #581	; 0x245
 80079d4:	4b2d      	ldr	r3, [pc, #180]	; (8007a8c <__mdiff+0x110>)
 80079d6:	e7e5      	b.n	80079a4 <__mdiff+0x28>
 80079d8:	f102 0814 	add.w	r8, r2, #20
 80079dc:	46c2      	mov	sl, r8
 80079de:	f04f 0c00 	mov.w	ip, #0
 80079e2:	6927      	ldr	r7, [r4, #16]
 80079e4:	60c6      	str	r6, [r0, #12]
 80079e6:	692e      	ldr	r6, [r5, #16]
 80079e8:	f104 0014 	add.w	r0, r4, #20
 80079ec:	f105 0914 	add.w	r9, r5, #20
 80079f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80079f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079f8:	3410      	adds	r4, #16
 80079fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a02:	fa1f f18b 	uxth.w	r1, fp
 8007a06:	4461      	add	r1, ip
 8007a08:	fa1f fc83 	uxth.w	ip, r3
 8007a0c:	0c1b      	lsrs	r3, r3, #16
 8007a0e:	eba1 010c 	sub.w	r1, r1, ip
 8007a12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a1a:	b289      	uxth	r1, r1
 8007a1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a20:	454e      	cmp	r6, r9
 8007a22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a26:	f84a 1b04 	str.w	r1, [sl], #4
 8007a2a:	d8e6      	bhi.n	80079fa <__mdiff+0x7e>
 8007a2c:	1b73      	subs	r3, r6, r5
 8007a2e:	3b15      	subs	r3, #21
 8007a30:	f023 0303 	bic.w	r3, r3, #3
 8007a34:	3515      	adds	r5, #21
 8007a36:	3304      	adds	r3, #4
 8007a38:	42ae      	cmp	r6, r5
 8007a3a:	bf38      	it	cc
 8007a3c:	2304      	movcc	r3, #4
 8007a3e:	4418      	add	r0, r3
 8007a40:	4443      	add	r3, r8
 8007a42:	461e      	mov	r6, r3
 8007a44:	4605      	mov	r5, r0
 8007a46:	4575      	cmp	r5, lr
 8007a48:	d30e      	bcc.n	8007a68 <__mdiff+0xec>
 8007a4a:	f10e 0103 	add.w	r1, lr, #3
 8007a4e:	1a09      	subs	r1, r1, r0
 8007a50:	f021 0103 	bic.w	r1, r1, #3
 8007a54:	3803      	subs	r0, #3
 8007a56:	4586      	cmp	lr, r0
 8007a58:	bf38      	it	cc
 8007a5a:	2100      	movcc	r1, #0
 8007a5c:	440b      	add	r3, r1
 8007a5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a62:	b189      	cbz	r1, 8007a88 <__mdiff+0x10c>
 8007a64:	6117      	str	r7, [r2, #16]
 8007a66:	e7a3      	b.n	80079b0 <__mdiff+0x34>
 8007a68:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a6c:	fa1f f188 	uxth.w	r1, r8
 8007a70:	4461      	add	r1, ip
 8007a72:	140c      	asrs	r4, r1, #16
 8007a74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a78:	b289      	uxth	r1, r1
 8007a7a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a7e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a82:	f846 1b04 	str.w	r1, [r6], #4
 8007a86:	e7de      	b.n	8007a46 <__mdiff+0xca>
 8007a88:	3f01      	subs	r7, #1
 8007a8a:	e7e8      	b.n	8007a5e <__mdiff+0xe2>
 8007a8c:	0800875e 	.word	0x0800875e
 8007a90:	0800876f 	.word	0x0800876f

08007a94 <__d2b>:
 8007a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a96:	2101      	movs	r1, #1
 8007a98:	4617      	mov	r7, r2
 8007a9a:	461c      	mov	r4, r3
 8007a9c:	9e08      	ldr	r6, [sp, #32]
 8007a9e:	f7ff fcd7 	bl	8007450 <_Balloc>
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b930      	cbnz	r0, 8007ab4 <__d2b+0x20>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	f240 310f 	movw	r1, #783	; 0x30f
 8007aac:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <__d2b+0xa4>)
 8007aae:	4823      	ldr	r0, [pc, #140]	; (8007b3c <__d2b+0xa8>)
 8007ab0:	f000 fc46 	bl	8008340 <__assert_func>
 8007ab4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ab8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007abc:	bb24      	cbnz	r4, 8007b08 <__d2b+0x74>
 8007abe:	2f00      	cmp	r7, #0
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	d026      	beq.n	8007b12 <__d2b+0x7e>
 8007ac4:	4668      	mov	r0, sp
 8007ac6:	9700      	str	r7, [sp, #0]
 8007ac8:	f7ff fd8a 	bl	80075e0 <__lo0bits>
 8007acc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ad0:	b1e8      	cbz	r0, 8007b0e <__d2b+0x7a>
 8007ad2:	f1c0 0320 	rsb	r3, r0, #32
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	430b      	orrs	r3, r1
 8007adc:	40c2      	lsrs	r2, r0
 8007ade:	616b      	str	r3, [r5, #20]
 8007ae0:	9201      	str	r2, [sp, #4]
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf14      	ite	ne
 8007ae8:	2102      	movne	r1, #2
 8007aea:	2101      	moveq	r1, #1
 8007aec:	61ab      	str	r3, [r5, #24]
 8007aee:	6129      	str	r1, [r5, #16]
 8007af0:	b1bc      	cbz	r4, 8007b22 <__d2b+0x8e>
 8007af2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007af6:	4404      	add	r4, r0
 8007af8:	6034      	str	r4, [r6, #0]
 8007afa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	6018      	str	r0, [r3, #0]
 8007b02:	4628      	mov	r0, r5
 8007b04:	b003      	add	sp, #12
 8007b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b0c:	e7d7      	b.n	8007abe <__d2b+0x2a>
 8007b0e:	6169      	str	r1, [r5, #20]
 8007b10:	e7e7      	b.n	8007ae2 <__d2b+0x4e>
 8007b12:	a801      	add	r0, sp, #4
 8007b14:	f7ff fd64 	bl	80075e0 <__lo0bits>
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	616b      	str	r3, [r5, #20]
 8007b1e:	3020      	adds	r0, #32
 8007b20:	e7e5      	b.n	8007aee <__d2b+0x5a>
 8007b22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b26:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007b2a:	6030      	str	r0, [r6, #0]
 8007b2c:	6918      	ldr	r0, [r3, #16]
 8007b2e:	f7ff fd37 	bl	80075a0 <__hi0bits>
 8007b32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b36:	e7e2      	b.n	8007afe <__d2b+0x6a>
 8007b38:	0800875e 	.word	0x0800875e
 8007b3c:	0800876f 	.word	0x0800876f

08007b40 <__ssputs_r>:
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	461f      	mov	r7, r3
 8007b46:	688e      	ldr	r6, [r1, #8]
 8007b48:	4682      	mov	sl, r0
 8007b4a:	42be      	cmp	r6, r7
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	4690      	mov	r8, r2
 8007b50:	680b      	ldr	r3, [r1, #0]
 8007b52:	d82c      	bhi.n	8007bae <__ssputs_r+0x6e>
 8007b54:	898a      	ldrh	r2, [r1, #12]
 8007b56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b5a:	d026      	beq.n	8007baa <__ssputs_r+0x6a>
 8007b5c:	6965      	ldr	r5, [r4, #20]
 8007b5e:	6909      	ldr	r1, [r1, #16]
 8007b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b64:	eba3 0901 	sub.w	r9, r3, r1
 8007b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b6c:	1c7b      	adds	r3, r7, #1
 8007b6e:	444b      	add	r3, r9
 8007b70:	106d      	asrs	r5, r5, #1
 8007b72:	429d      	cmp	r5, r3
 8007b74:	bf38      	it	cc
 8007b76:	461d      	movcc	r5, r3
 8007b78:	0553      	lsls	r3, r2, #21
 8007b7a:	d527      	bpl.n	8007bcc <__ssputs_r+0x8c>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7ff fbdb 	bl	8007338 <_malloc_r>
 8007b82:	4606      	mov	r6, r0
 8007b84:	b360      	cbz	r0, 8007be0 <__ssputs_r+0xa0>
 8007b86:	464a      	mov	r2, r9
 8007b88:	6921      	ldr	r1, [r4, #16]
 8007b8a:	f000 fbcb 	bl	8008324 <memcpy>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	6126      	str	r6, [r4, #16]
 8007b9c:	444e      	add	r6, r9
 8007b9e:	6026      	str	r6, [r4, #0]
 8007ba0:	463e      	mov	r6, r7
 8007ba2:	6165      	str	r5, [r4, #20]
 8007ba4:	eba5 0509 	sub.w	r5, r5, r9
 8007ba8:	60a5      	str	r5, [r4, #8]
 8007baa:	42be      	cmp	r6, r7
 8007bac:	d900      	bls.n	8007bb0 <__ssputs_r+0x70>
 8007bae:	463e      	mov	r6, r7
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	4641      	mov	r1, r8
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	f000 fb68 	bl	800828a <memmove>
 8007bba:	2000      	movs	r0, #0
 8007bbc:	68a3      	ldr	r3, [r4, #8]
 8007bbe:	1b9b      	subs	r3, r3, r6
 8007bc0:	60a3      	str	r3, [r4, #8]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	4433      	add	r3, r6
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bcc:	462a      	mov	r2, r5
 8007bce:	f000 fbfb 	bl	80083c8 <_realloc_r>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d1e0      	bne.n	8007b9a <__ssputs_r+0x5a>
 8007bd8:	4650      	mov	r0, sl
 8007bda:	6921      	ldr	r1, [r4, #16]
 8007bdc:	f7ff fb3c 	bl	8007258 <_free_r>
 8007be0:	230c      	movs	r3, #12
 8007be2:	f8ca 3000 	str.w	r3, [sl]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	e7e9      	b.n	8007bc8 <__ssputs_r+0x88>

08007bf4 <_svfiprintf_r>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	898b      	ldrh	r3, [r1, #12]
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	061b      	lsls	r3, r3, #24
 8007c00:	460d      	mov	r5, r1
 8007c02:	4614      	mov	r4, r2
 8007c04:	b09d      	sub	sp, #116	; 0x74
 8007c06:	d50e      	bpl.n	8007c26 <_svfiprintf_r+0x32>
 8007c08:	690b      	ldr	r3, [r1, #16]
 8007c0a:	b963      	cbnz	r3, 8007c26 <_svfiprintf_r+0x32>
 8007c0c:	2140      	movs	r1, #64	; 0x40
 8007c0e:	f7ff fb93 	bl	8007338 <_malloc_r>
 8007c12:	6028      	str	r0, [r5, #0]
 8007c14:	6128      	str	r0, [r5, #16]
 8007c16:	b920      	cbnz	r0, 8007c22 <_svfiprintf_r+0x2e>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	e0d0      	b.n	8007dc4 <_svfiprintf_r+0x1d0>
 8007c22:	2340      	movs	r3, #64	; 0x40
 8007c24:	616b      	str	r3, [r5, #20]
 8007c26:	2300      	movs	r3, #0
 8007c28:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2a:	2320      	movs	r3, #32
 8007c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c30:	2330      	movs	r3, #48	; 0x30
 8007c32:	f04f 0901 	mov.w	r9, #1
 8007c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c3a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ddc <_svfiprintf_r+0x1e8>
 8007c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c42:	4623      	mov	r3, r4
 8007c44:	469a      	mov	sl, r3
 8007c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c4a:	b10a      	cbz	r2, 8007c50 <_svfiprintf_r+0x5c>
 8007c4c:	2a25      	cmp	r2, #37	; 0x25
 8007c4e:	d1f9      	bne.n	8007c44 <_svfiprintf_r+0x50>
 8007c50:	ebba 0b04 	subs.w	fp, sl, r4
 8007c54:	d00b      	beq.n	8007c6e <_svfiprintf_r+0x7a>
 8007c56:	465b      	mov	r3, fp
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff ff6f 	bl	8007b40 <__ssputs_r>
 8007c62:	3001      	adds	r0, #1
 8007c64:	f000 80a9 	beq.w	8007dba <_svfiprintf_r+0x1c6>
 8007c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6a:	445a      	add	r2, fp
 8007c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 80a1 	beq.w	8007dba <_svfiprintf_r+0x1c6>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c82:	f10a 0a01 	add.w	sl, sl, #1
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	9307      	str	r3, [sp, #28]
 8007c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c90:	4654      	mov	r4, sl
 8007c92:	2205      	movs	r2, #5
 8007c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c98:	4850      	ldr	r0, [pc, #320]	; (8007ddc <_svfiprintf_r+0x1e8>)
 8007c9a:	f7fe fc62 	bl	8006562 <memchr>
 8007c9e:	9a04      	ldr	r2, [sp, #16]
 8007ca0:	b9d8      	cbnz	r0, 8007cda <_svfiprintf_r+0xe6>
 8007ca2:	06d0      	lsls	r0, r2, #27
 8007ca4:	bf44      	itt	mi
 8007ca6:	2320      	movmi	r3, #32
 8007ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cac:	0711      	lsls	r1, r2, #28
 8007cae:	bf44      	itt	mi
 8007cb0:	232b      	movmi	r3, #43	; 0x2b
 8007cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cba:	2b2a      	cmp	r3, #42	; 0x2a
 8007cbc:	d015      	beq.n	8007cea <_svfiprintf_r+0xf6>
 8007cbe:	4654      	mov	r4, sl
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	f04f 0c0a 	mov.w	ip, #10
 8007cc6:	9a07      	ldr	r2, [sp, #28]
 8007cc8:	4621      	mov	r1, r4
 8007cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cce:	3b30      	subs	r3, #48	; 0x30
 8007cd0:	2b09      	cmp	r3, #9
 8007cd2:	d94d      	bls.n	8007d70 <_svfiprintf_r+0x17c>
 8007cd4:	b1b0      	cbz	r0, 8007d04 <_svfiprintf_r+0x110>
 8007cd6:	9207      	str	r2, [sp, #28]
 8007cd8:	e014      	b.n	8007d04 <_svfiprintf_r+0x110>
 8007cda:	eba0 0308 	sub.w	r3, r0, r8
 8007cde:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	46a2      	mov	sl, r4
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	e7d2      	b.n	8007c90 <_svfiprintf_r+0x9c>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	1d19      	adds	r1, r3, #4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	9103      	str	r1, [sp, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfbb      	ittet	lt
 8007cf6:	425b      	neglt	r3, r3
 8007cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cfc:	9307      	strge	r3, [sp, #28]
 8007cfe:	9307      	strlt	r3, [sp, #28]
 8007d00:	bfb8      	it	lt
 8007d02:	9204      	strlt	r2, [sp, #16]
 8007d04:	7823      	ldrb	r3, [r4, #0]
 8007d06:	2b2e      	cmp	r3, #46	; 0x2e
 8007d08:	d10c      	bne.n	8007d24 <_svfiprintf_r+0x130>
 8007d0a:	7863      	ldrb	r3, [r4, #1]
 8007d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0e:	d134      	bne.n	8007d7a <_svfiprintf_r+0x186>
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	3402      	adds	r4, #2
 8007d14:	1d1a      	adds	r2, r3, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	9203      	str	r2, [sp, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfb8      	it	lt
 8007d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007de0 <_svfiprintf_r+0x1ec>
 8007d28:	2203      	movs	r2, #3
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	7821      	ldrb	r1, [r4, #0]
 8007d2e:	f7fe fc18 	bl	8006562 <memchr>
 8007d32:	b138      	cbz	r0, 8007d44 <_svfiprintf_r+0x150>
 8007d34:	2240      	movs	r2, #64	; 0x40
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	eba0 000a 	sub.w	r0, r0, sl
 8007d3c:	4082      	lsls	r2, r0
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	3401      	adds	r4, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	2206      	movs	r2, #6
 8007d4a:	4826      	ldr	r0, [pc, #152]	; (8007de4 <_svfiprintf_r+0x1f0>)
 8007d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d50:	f7fe fc07 	bl	8006562 <memchr>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d038      	beq.n	8007dca <_svfiprintf_r+0x1d6>
 8007d58:	4b23      	ldr	r3, [pc, #140]	; (8007de8 <_svfiprintf_r+0x1f4>)
 8007d5a:	bb1b      	cbnz	r3, 8007da4 <_svfiprintf_r+0x1b0>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	3308      	adds	r3, #8
 8007d66:	9303      	str	r3, [sp, #12]
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	4433      	add	r3, r6
 8007d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6e:	e768      	b.n	8007c42 <_svfiprintf_r+0x4e>
 8007d70:	460c      	mov	r4, r1
 8007d72:	2001      	movs	r0, #1
 8007d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d78:	e7a6      	b.n	8007cc8 <_svfiprintf_r+0xd4>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f04f 0c0a 	mov.w	ip, #10
 8007d80:	4619      	mov	r1, r3
 8007d82:	3401      	adds	r4, #1
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	4620      	mov	r0, r4
 8007d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d8c:	3a30      	subs	r2, #48	; 0x30
 8007d8e:	2a09      	cmp	r2, #9
 8007d90:	d903      	bls.n	8007d9a <_svfiprintf_r+0x1a6>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0c6      	beq.n	8007d24 <_svfiprintf_r+0x130>
 8007d96:	9105      	str	r1, [sp, #20]
 8007d98:	e7c4      	b.n	8007d24 <_svfiprintf_r+0x130>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da2:	e7f0      	b.n	8007d86 <_svfiprintf_r+0x192>
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <_svfiprintf_r+0x1f8>)
 8007dae:	a904      	add	r1, sp, #16
 8007db0:	f7fd fd00 	bl	80057b4 <_printf_float>
 8007db4:	1c42      	adds	r2, r0, #1
 8007db6:	4606      	mov	r6, r0
 8007db8:	d1d6      	bne.n	8007d68 <_svfiprintf_r+0x174>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	065b      	lsls	r3, r3, #25
 8007dbe:	f53f af2d 	bmi.w	8007c1c <_svfiprintf_r+0x28>
 8007dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dc4:	b01d      	add	sp, #116	; 0x74
 8007dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	ab03      	add	r3, sp, #12
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <_svfiprintf_r+0x1f8>)
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	f7fd ff8d 	bl	8005cf4 <_printf_i>
 8007dda:	e7eb      	b.n	8007db4 <_svfiprintf_r+0x1c0>
 8007ddc:	080088c4 	.word	0x080088c4
 8007de0:	080088ca 	.word	0x080088ca
 8007de4:	080088ce 	.word	0x080088ce
 8007de8:	080057b5 	.word	0x080057b5
 8007dec:	08007b41 	.word	0x08007b41

08007df0 <__sfputc_r>:
 8007df0:	6893      	ldr	r3, [r2, #8]
 8007df2:	b410      	push	{r4}
 8007df4:	3b01      	subs	r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	6093      	str	r3, [r2, #8]
 8007dfa:	da07      	bge.n	8007e0c <__sfputc_r+0x1c>
 8007dfc:	6994      	ldr	r4, [r2, #24]
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	db01      	blt.n	8007e06 <__sfputc_r+0x16>
 8007e02:	290a      	cmp	r1, #10
 8007e04:	d102      	bne.n	8007e0c <__sfputc_r+0x1c>
 8007e06:	bc10      	pop	{r4}
 8007e08:	f7fe ba96 	b.w	8006338 <__swbuf_r>
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	1c58      	adds	r0, r3, #1
 8007e10:	6010      	str	r0, [r2, #0]
 8007e12:	7019      	strb	r1, [r3, #0]
 8007e14:	4608      	mov	r0, r1
 8007e16:	bc10      	pop	{r4}
 8007e18:	4770      	bx	lr

08007e1a <__sfputs_r>:
 8007e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	18d5      	adds	r5, r2, r3
 8007e24:	42ac      	cmp	r4, r5
 8007e26:	d101      	bne.n	8007e2c <__sfputs_r+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e007      	b.n	8007e3c <__sfputs_r+0x22>
 8007e2c:	463a      	mov	r2, r7
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	f7ff ffdc 	bl	8007df0 <__sfputc_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d1f3      	bne.n	8007e24 <__sfputs_r+0xa>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	4614      	mov	r4, r2
 8007e48:	4698      	mov	r8, r3
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	b09d      	sub	sp, #116	; 0x74
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7fe f8fc 	bl	8006050 <__sinit>
 8007e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e5a:	07d9      	lsls	r1, r3, #31
 8007e5c:	d405      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e5e:	89ab      	ldrh	r3, [r5, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e66:	f7fe fb7a 	bl	800655e <__retarget_lock_acquire_recursive>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	071b      	lsls	r3, r3, #28
 8007e6e:	d501      	bpl.n	8007e74 <_vfiprintf_r+0x34>
 8007e70:	692b      	ldr	r3, [r5, #16]
 8007e72:	b99b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x5c>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7fe fa9c 	bl	80063b4 <__swsetup_r>
 8007e7c:	b170      	cbz	r0, 8007e9c <_vfiprintf_r+0x5c>
 8007e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e80:	07dc      	lsls	r4, r3, #31
 8007e82:	d504      	bpl.n	8007e8e <_vfiprintf_r+0x4e>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	b01d      	add	sp, #116	; 0x74
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4f7      	bmi.n	8007e84 <_vfiprintf_r+0x44>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f7fe fb63 	bl	8006560 <__retarget_lock_release_recursive>
 8007e9a:	e7f3      	b.n	8007e84 <_vfiprintf_r+0x44>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea6:	2330      	movs	r3, #48	; 0x30
 8007ea8:	f04f 0901 	mov.w	r9, #1
 8007eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008060 <_vfiprintf_r+0x220>
 8007eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0x86>
 8007ec2:	2a25      	cmp	r2, #37	; 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x7a>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xa4>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa1 	bl	8007e1a <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80a9 	beq.w	8008030 <_vfiprintf_r+0x1f0>
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a1 	beq.w	8008030 <_vfiprintf_r+0x1f0>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4854      	ldr	r0, [pc, #336]	; (8008060 <_vfiprintf_r+0x220>)
 8007f10:	f7fe fb27 	bl	8006562 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x110>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	; 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	; 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x120>
 8007f34:	4654      	mov	r4, sl
 8007f36:	2000      	movs	r0, #0
 8007f38:	f04f 0c0a 	mov.w	ip, #10
 8007f3c:	9a07      	ldr	r2, [sp, #28]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	; 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94d      	bls.n	8007fe6 <_vfiprintf_r+0x1a6>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x13a>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x13a>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	46a2      	mov	sl, r4
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xc6>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7e:	d10c      	bne.n	8007f9a <_vfiprintf_r+0x15a>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d134      	bne.n	8007ff0 <_vfiprintf_r+0x1b0>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	3402      	adds	r4, #2
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	9203      	str	r2, [sp, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bfb8      	it	lt
 8007f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008064 <_vfiprintf_r+0x224>
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	7821      	ldrb	r1, [r4, #0]
 8007fa4:	f7fe fadd 	bl	8006562 <memchr>
 8007fa8:	b138      	cbz	r0, 8007fba <_vfiprintf_r+0x17a>
 8007faa:	2240      	movs	r2, #64	; 0x40
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	eba0 000a 	sub.w	r0, r0, sl
 8007fb2:	4082      	lsls	r2, r0
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	3401      	adds	r4, #1
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	2206      	movs	r2, #6
 8007fc0:	4829      	ldr	r0, [pc, #164]	; (8008068 <_vfiprintf_r+0x228>)
 8007fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc6:	f7fe facc 	bl	8006562 <memchr>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d03f      	beq.n	800804e <_vfiprintf_r+0x20e>
 8007fce:	4b27      	ldr	r3, [pc, #156]	; (800806c <_vfiprintf_r+0x22c>)
 8007fd0:	bb1b      	cbnz	r3, 800801a <_vfiprintf_r+0x1da>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	3307      	adds	r3, #7
 8007fd6:	f023 0307 	bic.w	r3, r3, #7
 8007fda:	3308      	adds	r3, #8
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	443b      	add	r3, r7
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	e768      	b.n	8007eb8 <_vfiprintf_r+0x78>
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	2001      	movs	r0, #1
 8007fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fee:	e7a6      	b.n	8007f3e <_vfiprintf_r+0xfe>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f04f 0c0a 	mov.w	ip, #10
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	3401      	adds	r4, #1
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008002:	3a30      	subs	r2, #48	; 0x30
 8008004:	2a09      	cmp	r2, #9
 8008006:	d903      	bls.n	8008010 <_vfiprintf_r+0x1d0>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0c6      	beq.n	8007f9a <_vfiprintf_r+0x15a>
 800800c:	9105      	str	r1, [sp, #20]
 800800e:	e7c4      	b.n	8007f9a <_vfiprintf_r+0x15a>
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	fb0c 2101 	mla	r1, ip, r1, r2
 8008018:	e7f0      	b.n	8007ffc <_vfiprintf_r+0x1bc>
 800801a:	ab03      	add	r3, sp, #12
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	462a      	mov	r2, r5
 8008020:	4630      	mov	r0, r6
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <_vfiprintf_r+0x230>)
 8008024:	a904      	add	r1, sp, #16
 8008026:	f7fd fbc5 	bl	80057b4 <_printf_float>
 800802a:	4607      	mov	r7, r0
 800802c:	1c78      	adds	r0, r7, #1
 800802e:	d1d6      	bne.n	8007fde <_vfiprintf_r+0x19e>
 8008030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d405      	bmi.n	8008042 <_vfiprintf_r+0x202>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d402      	bmi.n	8008042 <_vfiprintf_r+0x202>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f7fe fa8f 	bl	8006560 <__retarget_lock_release_recursive>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	065b      	lsls	r3, r3, #25
 8008046:	f53f af1d 	bmi.w	8007e84 <_vfiprintf_r+0x44>
 800804a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804c:	e71c      	b.n	8007e88 <_vfiprintf_r+0x48>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4630      	mov	r0, r6
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <_vfiprintf_r+0x230>)
 8008058:	a904      	add	r1, sp, #16
 800805a:	f7fd fe4b 	bl	8005cf4 <_printf_i>
 800805e:	e7e4      	b.n	800802a <_vfiprintf_r+0x1ea>
 8008060:	080088c4 	.word	0x080088c4
 8008064:	080088ca 	.word	0x080088ca
 8008068:	080088ce 	.word	0x080088ce
 800806c:	080057b5 	.word	0x080057b5
 8008070:	08007e1b 	.word	0x08007e1b

08008074 <__sflush_r>:
 8008074:	898a      	ldrh	r2, [r1, #12]
 8008076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008078:	4605      	mov	r5, r0
 800807a:	0710      	lsls	r0, r2, #28
 800807c:	460c      	mov	r4, r1
 800807e:	d457      	bmi.n	8008130 <__sflush_r+0xbc>
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc04      	bgt.n	8008090 <__sflush_r+0x1c>
 8008086:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc01      	bgt.n	8008090 <__sflush_r+0x1c>
 800808c:	2000      	movs	r0, #0
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d0fa      	beq.n	800808c <__sflush_r+0x18>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	d032      	beq.n	800810a <__sflush_r+0x96>
 80080a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	075a      	lsls	r2, r3, #29
 80080aa:	d505      	bpl.n	80080b8 <__sflush_r+0x44>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b2:	b10b      	cbz	r3, 80080b8 <__sflush_r+0x44>
 80080b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b6:	1ac0      	subs	r0, r0, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	4628      	mov	r0, r5
 80080c0:	6a21      	ldr	r1, [r4, #32]
 80080c2:	47b0      	blx	r6
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	d106      	bne.n	80080d8 <__sflush_r+0x64>
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	291d      	cmp	r1, #29
 80080ce:	d82b      	bhi.n	8008128 <__sflush_r+0xb4>
 80080d0:	4a28      	ldr	r2, [pc, #160]	; (8008174 <__sflush_r+0x100>)
 80080d2:	410a      	asrs	r2, r1
 80080d4:	07d6      	lsls	r6, r2, #31
 80080d6:	d427      	bmi.n	8008128 <__sflush_r+0xb4>
 80080d8:	2200      	movs	r2, #0
 80080da:	6062      	str	r2, [r4, #4]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	04d9      	lsls	r1, r3, #19
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	d504      	bpl.n	80080ee <__sflush_r+0x7a>
 80080e4:	1c42      	adds	r2, r0, #1
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0x78>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b903      	cbnz	r3, 80080ee <__sflush_r+0x7a>
 80080ec:	6560      	str	r0, [r4, #84]	; 0x54
 80080ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f0:	602f      	str	r7, [r5, #0]
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d0ca      	beq.n	800808c <__sflush_r+0x18>
 80080f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d002      	beq.n	8008104 <__sflush_r+0x90>
 80080fe:	4628      	mov	r0, r5
 8008100:	f7ff f8aa 	bl	8007258 <_free_r>
 8008104:	2000      	movs	r0, #0
 8008106:	6360      	str	r0, [r4, #52]	; 0x34
 8008108:	e7c1      	b.n	800808e <__sflush_r+0x1a>
 800810a:	2301      	movs	r3, #1
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c41      	adds	r1, r0, #1
 8008112:	d1c8      	bne.n	80080a6 <__sflush_r+0x32>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c5      	beq.n	80080a6 <__sflush_r+0x32>
 800811a:	2b1d      	cmp	r3, #29
 800811c:	d001      	beq.n	8008122 <__sflush_r+0xae>
 800811e:	2b16      	cmp	r3, #22
 8008120:	d101      	bne.n	8008126 <__sflush_r+0xb2>
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	e7b2      	b.n	800808c <__sflush_r+0x18>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7ae      	b.n	800808e <__sflush_r+0x1a>
 8008130:	690f      	ldr	r7, [r1, #16]
 8008132:	2f00      	cmp	r7, #0
 8008134:	d0aa      	beq.n	800808c <__sflush_r+0x18>
 8008136:	0793      	lsls	r3, r2, #30
 8008138:	bf18      	it	ne
 800813a:	2300      	movne	r3, #0
 800813c:	680e      	ldr	r6, [r1, #0]
 800813e:	bf08      	it	eq
 8008140:	694b      	ldreq	r3, [r1, #20]
 8008142:	1bf6      	subs	r6, r6, r7
 8008144:	600f      	str	r7, [r1, #0]
 8008146:	608b      	str	r3, [r1, #8]
 8008148:	2e00      	cmp	r6, #0
 800814a:	dd9f      	ble.n	800808c <__sflush_r+0x18>
 800814c:	4633      	mov	r3, r6
 800814e:	463a      	mov	r2, r7
 8008150:	4628      	mov	r0, r5
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008158:	47e0      	blx	ip
 800815a:	2800      	cmp	r0, #0
 800815c:	dc06      	bgt.n	800816c <__sflush_r+0xf8>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e790      	b.n	800808e <__sflush_r+0x1a>
 800816c:	4407      	add	r7, r0
 800816e:	1a36      	subs	r6, r6, r0
 8008170:	e7ea      	b.n	8008148 <__sflush_r+0xd4>
 8008172:	bf00      	nop
 8008174:	dfbffffe 	.word	0xdfbffffe

08008178 <_fflush_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	4605      	mov	r5, r0
 800817e:	460c      	mov	r4, r1
 8008180:	b913      	cbnz	r3, 8008188 <_fflush_r+0x10>
 8008182:	2500      	movs	r5, #0
 8008184:	4628      	mov	r0, r5
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	b118      	cbz	r0, 8008192 <_fflush_r+0x1a>
 800818a:	6a03      	ldr	r3, [r0, #32]
 800818c:	b90b      	cbnz	r3, 8008192 <_fflush_r+0x1a>
 800818e:	f7fd ff5f 	bl	8006050 <__sinit>
 8008192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f3      	beq.n	8008182 <_fflush_r+0xa>
 800819a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800819c:	07d0      	lsls	r0, r2, #31
 800819e:	d404      	bmi.n	80081aa <_fflush_r+0x32>
 80081a0:	0599      	lsls	r1, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_fflush_r+0x32>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f7fe f9da 	bl	800655e <__retarget_lock_acquire_recursive>
 80081aa:	4628      	mov	r0, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7ff ff61 	bl	8008074 <__sflush_r>
 80081b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b4:	4605      	mov	r5, r0
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d4e4      	bmi.n	8008184 <_fflush_r+0xc>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	d4e1      	bmi.n	8008184 <_fflush_r+0xc>
 80081c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c2:	f7fe f9cd 	bl	8006560 <__retarget_lock_release_recursive>
 80081c6:	e7dd      	b.n	8008184 <_fflush_r+0xc>

080081c8 <__swhatbuf_r>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d0:	4615      	mov	r5, r2
 80081d2:	2900      	cmp	r1, #0
 80081d4:	461e      	mov	r6, r3
 80081d6:	b096      	sub	sp, #88	; 0x58
 80081d8:	da0c      	bge.n	80081f4 <__swhatbuf_r+0x2c>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	2100      	movs	r1, #0
 80081de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081e2:	bf0c      	ite	eq
 80081e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081e8:	2340      	movne	r3, #64	; 0x40
 80081ea:	2000      	movs	r0, #0
 80081ec:	6031      	str	r1, [r6, #0]
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	b016      	add	sp, #88	; 0x58
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	466a      	mov	r2, sp
 80081f6:	f000 f863 	bl	80082c0 <_fstat_r>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	dbed      	blt.n	80081da <__swhatbuf_r+0x12>
 80081fe:	9901      	ldr	r1, [sp, #4]
 8008200:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008204:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008208:	4259      	negs	r1, r3
 800820a:	4159      	adcs	r1, r3
 800820c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008210:	e7eb      	b.n	80081ea <__swhatbuf_r+0x22>

08008212 <__smakebuf_r>:
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008216:	079d      	lsls	r5, r3, #30
 8008218:	4606      	mov	r6, r0
 800821a:	460c      	mov	r4, r1
 800821c:	d507      	bpl.n	800822e <__smakebuf_r+0x1c>
 800821e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	2301      	movs	r3, #1
 8008228:	6163      	str	r3, [r4, #20]
 800822a:	b002      	add	sp, #8
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	466a      	mov	r2, sp
 8008230:	ab01      	add	r3, sp, #4
 8008232:	f7ff ffc9 	bl	80081c8 <__swhatbuf_r>
 8008236:	9900      	ldr	r1, [sp, #0]
 8008238:	4605      	mov	r5, r0
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff f87c 	bl	8007338 <_malloc_r>
 8008240:	b948      	cbnz	r0, 8008256 <__smakebuf_r+0x44>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	059a      	lsls	r2, r3, #22
 8008248:	d4ef      	bmi.n	800822a <__smakebuf_r+0x18>
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	f043 0302 	orr.w	r3, r3, #2
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	e7e3      	b.n	800821e <__smakebuf_r+0xc>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	6020      	str	r0, [r4, #0]
 800825a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	6120      	str	r0, [r4, #16]
 8008264:	6163      	str	r3, [r4, #20]
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	b15b      	cbz	r3, 8008282 <__smakebuf_r+0x70>
 800826a:	4630      	mov	r0, r6
 800826c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008270:	f000 f838 	bl	80082e4 <_isatty_r>
 8008274:	b128      	cbz	r0, 8008282 <__smakebuf_r+0x70>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f023 0303 	bic.w	r3, r3, #3
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	431d      	orrs	r5, r3
 8008286:	81a5      	strh	r5, [r4, #12]
 8008288:	e7cf      	b.n	800822a <__smakebuf_r+0x18>

0800828a <memmove>:
 800828a:	4288      	cmp	r0, r1
 800828c:	b510      	push	{r4, lr}
 800828e:	eb01 0402 	add.w	r4, r1, r2
 8008292:	d902      	bls.n	800829a <memmove+0x10>
 8008294:	4284      	cmp	r4, r0
 8008296:	4623      	mov	r3, r4
 8008298:	d807      	bhi.n	80082aa <memmove+0x20>
 800829a:	1e43      	subs	r3, r0, #1
 800829c:	42a1      	cmp	r1, r4
 800829e:	d008      	beq.n	80082b2 <memmove+0x28>
 80082a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082a8:	e7f8      	b.n	800829c <memmove+0x12>
 80082aa:	4601      	mov	r1, r0
 80082ac:	4402      	add	r2, r0
 80082ae:	428a      	cmp	r2, r1
 80082b0:	d100      	bne.n	80082b4 <memmove+0x2a>
 80082b2:	bd10      	pop	{r4, pc}
 80082b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082bc:	e7f7      	b.n	80082ae <memmove+0x24>
	...

080082c0 <_fstat_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	2300      	movs	r3, #0
 80082c4:	4d06      	ldr	r5, [pc, #24]	; (80082e0 <_fstat_r+0x20>)
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	f7fa f924 	bl	800251a <_fstat>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	d102      	bne.n	80082dc <_fstat_r+0x1c>
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	b103      	cbz	r3, 80082dc <_fstat_r+0x1c>
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	bf00      	nop
 80082e0:	20000520 	.word	0x20000520

080082e4 <_isatty_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	2300      	movs	r3, #0
 80082e8:	4d05      	ldr	r5, [pc, #20]	; (8008300 <_isatty_r+0x1c>)
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7fa f922 	bl	8002538 <_isatty>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_isatty_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_isatty_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20000520 	.word	0x20000520

08008304 <_sbrk_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	2300      	movs	r3, #0
 8008308:	4d05      	ldr	r5, [pc, #20]	; (8008320 <_sbrk_r+0x1c>)
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	602b      	str	r3, [r5, #0]
 8008310:	f7fa f928 	bl	8002564 <_sbrk>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d102      	bne.n	800831e <_sbrk_r+0x1a>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	b103      	cbz	r3, 800831e <_sbrk_r+0x1a>
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	bd38      	pop	{r3, r4, r5, pc}
 8008320:	20000520 	.word	0x20000520

08008324 <memcpy>:
 8008324:	440a      	add	r2, r1
 8008326:	4291      	cmp	r1, r2
 8008328:	f100 33ff 	add.w	r3, r0, #4294967295
 800832c:	d100      	bne.n	8008330 <memcpy+0xc>
 800832e:	4770      	bx	lr
 8008330:	b510      	push	{r4, lr}
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	4291      	cmp	r1, r2
 8008338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800833c:	d1f9      	bne.n	8008332 <memcpy+0xe>
 800833e:	bd10      	pop	{r4, pc}

08008340 <__assert_func>:
 8008340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008342:	4614      	mov	r4, r2
 8008344:	461a      	mov	r2, r3
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <__assert_func+0x2c>)
 8008348:	4605      	mov	r5, r0
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68d8      	ldr	r0, [r3, #12]
 800834e:	b14c      	cbz	r4, 8008364 <__assert_func+0x24>
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <__assert_func+0x30>)
 8008352:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008356:	9100      	str	r1, [sp, #0]
 8008358:	462b      	mov	r3, r5
 800835a:	4906      	ldr	r1, [pc, #24]	; (8008374 <__assert_func+0x34>)
 800835c:	f000 f870 	bl	8008440 <fiprintf>
 8008360:	f000 f880 	bl	8008464 <abort>
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <__assert_func+0x38>)
 8008366:	461c      	mov	r4, r3
 8008368:	e7f3      	b.n	8008352 <__assert_func+0x12>
 800836a:	bf00      	nop
 800836c:	20000068 	.word	0x20000068
 8008370:	080088df 	.word	0x080088df
 8008374:	080088ec 	.word	0x080088ec
 8008378:	0800891a 	.word	0x0800891a

0800837c <_calloc_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	fba1 5402 	umull	r5, r4, r1, r2
 8008382:	b934      	cbnz	r4, 8008392 <_calloc_r+0x16>
 8008384:	4629      	mov	r1, r5
 8008386:	f7fe ffd7 	bl	8007338 <_malloc_r>
 800838a:	4606      	mov	r6, r0
 800838c:	b928      	cbnz	r0, 800839a <_calloc_r+0x1e>
 800838e:	4630      	mov	r0, r6
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	220c      	movs	r2, #12
 8008394:	2600      	movs	r6, #0
 8008396:	6002      	str	r2, [r0, #0]
 8008398:	e7f9      	b.n	800838e <_calloc_r+0x12>
 800839a:	462a      	mov	r2, r5
 800839c:	4621      	mov	r1, r4
 800839e:	f7fe f861 	bl	8006464 <memset>
 80083a2:	e7f4      	b.n	800838e <_calloc_r+0x12>

080083a4 <__ascii_mbtowc>:
 80083a4:	b082      	sub	sp, #8
 80083a6:	b901      	cbnz	r1, 80083aa <__ascii_mbtowc+0x6>
 80083a8:	a901      	add	r1, sp, #4
 80083aa:	b142      	cbz	r2, 80083be <__ascii_mbtowc+0x1a>
 80083ac:	b14b      	cbz	r3, 80083c2 <__ascii_mbtowc+0x1e>
 80083ae:	7813      	ldrb	r3, [r2, #0]
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	1e10      	subs	r0, r2, #0
 80083b6:	bf18      	it	ne
 80083b8:	2001      	movne	r0, #1
 80083ba:	b002      	add	sp, #8
 80083bc:	4770      	bx	lr
 80083be:	4610      	mov	r0, r2
 80083c0:	e7fb      	b.n	80083ba <__ascii_mbtowc+0x16>
 80083c2:	f06f 0001 	mvn.w	r0, #1
 80083c6:	e7f8      	b.n	80083ba <__ascii_mbtowc+0x16>

080083c8 <_realloc_r>:
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083cc:	4680      	mov	r8, r0
 80083ce:	4614      	mov	r4, r2
 80083d0:	460e      	mov	r6, r1
 80083d2:	b921      	cbnz	r1, 80083de <_realloc_r+0x16>
 80083d4:	4611      	mov	r1, r2
 80083d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083da:	f7fe bfad 	b.w	8007338 <_malloc_r>
 80083de:	b92a      	cbnz	r2, 80083ec <_realloc_r+0x24>
 80083e0:	f7fe ff3a 	bl	8007258 <_free_r>
 80083e4:	4625      	mov	r5, r4
 80083e6:	4628      	mov	r0, r5
 80083e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ec:	f000 f841 	bl	8008472 <_malloc_usable_size_r>
 80083f0:	4284      	cmp	r4, r0
 80083f2:	4607      	mov	r7, r0
 80083f4:	d802      	bhi.n	80083fc <_realloc_r+0x34>
 80083f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083fa:	d812      	bhi.n	8008422 <_realloc_r+0x5a>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4640      	mov	r0, r8
 8008400:	f7fe ff9a 	bl	8007338 <_malloc_r>
 8008404:	4605      	mov	r5, r0
 8008406:	2800      	cmp	r0, #0
 8008408:	d0ed      	beq.n	80083e6 <_realloc_r+0x1e>
 800840a:	42bc      	cmp	r4, r7
 800840c:	4622      	mov	r2, r4
 800840e:	4631      	mov	r1, r6
 8008410:	bf28      	it	cs
 8008412:	463a      	movcs	r2, r7
 8008414:	f7ff ff86 	bl	8008324 <memcpy>
 8008418:	4631      	mov	r1, r6
 800841a:	4640      	mov	r0, r8
 800841c:	f7fe ff1c 	bl	8007258 <_free_r>
 8008420:	e7e1      	b.n	80083e6 <_realloc_r+0x1e>
 8008422:	4635      	mov	r5, r6
 8008424:	e7df      	b.n	80083e6 <_realloc_r+0x1e>

08008426 <__ascii_wctomb>:
 8008426:	4603      	mov	r3, r0
 8008428:	4608      	mov	r0, r1
 800842a:	b141      	cbz	r1, 800843e <__ascii_wctomb+0x18>
 800842c:	2aff      	cmp	r2, #255	; 0xff
 800842e:	d904      	bls.n	800843a <__ascii_wctomb+0x14>
 8008430:	228a      	movs	r2, #138	; 0x8a
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	4770      	bx	lr
 800843a:	2001      	movs	r0, #1
 800843c:	700a      	strb	r2, [r1, #0]
 800843e:	4770      	bx	lr

08008440 <fiprintf>:
 8008440:	b40e      	push	{r1, r2, r3}
 8008442:	b503      	push	{r0, r1, lr}
 8008444:	4601      	mov	r1, r0
 8008446:	ab03      	add	r3, sp, #12
 8008448:	4805      	ldr	r0, [pc, #20]	; (8008460 <fiprintf+0x20>)
 800844a:	f853 2b04 	ldr.w	r2, [r3], #4
 800844e:	6800      	ldr	r0, [r0, #0]
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	f7ff fcf5 	bl	8007e40 <_vfiprintf_r>
 8008456:	b002      	add	sp, #8
 8008458:	f85d eb04 	ldr.w	lr, [sp], #4
 800845c:	b003      	add	sp, #12
 800845e:	4770      	bx	lr
 8008460:	20000068 	.word	0x20000068

08008464 <abort>:
 8008464:	2006      	movs	r0, #6
 8008466:	b508      	push	{r3, lr}
 8008468:	f000 f834 	bl	80084d4 <raise>
 800846c:	2001      	movs	r0, #1
 800846e:	f7fa f822 	bl	80024b6 <_exit>

08008472 <_malloc_usable_size_r>:
 8008472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008476:	1f18      	subs	r0, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfbc      	itt	lt
 800847c:	580b      	ldrlt	r3, [r1, r0]
 800847e:	18c0      	addlt	r0, r0, r3
 8008480:	4770      	bx	lr

08008482 <_raise_r>:
 8008482:	291f      	cmp	r1, #31
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4604      	mov	r4, r0
 8008488:	460d      	mov	r5, r1
 800848a:	d904      	bls.n	8008496 <_raise_r+0x14>
 800848c:	2316      	movs	r3, #22
 800848e:	6003      	str	r3, [r0, #0]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008498:	b112      	cbz	r2, 80084a0 <_raise_r+0x1e>
 800849a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800849e:	b94b      	cbnz	r3, 80084b4 <_raise_r+0x32>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 f831 	bl	8008508 <_getpid_r>
 80084a6:	462a      	mov	r2, r5
 80084a8:	4601      	mov	r1, r0
 80084aa:	4620      	mov	r0, r4
 80084ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b0:	f000 b818 	b.w	80084e4 <_kill_r>
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d00a      	beq.n	80084ce <_raise_r+0x4c>
 80084b8:	1c59      	adds	r1, r3, #1
 80084ba:	d103      	bne.n	80084c4 <_raise_r+0x42>
 80084bc:	2316      	movs	r3, #22
 80084be:	6003      	str	r3, [r0, #0]
 80084c0:	2001      	movs	r0, #1
 80084c2:	e7e7      	b.n	8008494 <_raise_r+0x12>
 80084c4:	2400      	movs	r4, #0
 80084c6:	4628      	mov	r0, r5
 80084c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084cc:	4798      	blx	r3
 80084ce:	2000      	movs	r0, #0
 80084d0:	e7e0      	b.n	8008494 <_raise_r+0x12>
	...

080084d4 <raise>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <raise+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f7ff bfd2 	b.w	8008482 <_raise_r>
 80084de:	bf00      	nop
 80084e0:	20000068 	.word	0x20000068

080084e4 <_kill_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	2300      	movs	r3, #0
 80084e8:	4d06      	ldr	r5, [pc, #24]	; (8008504 <_kill_r+0x20>)
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7f9 ffd0 	bl	8002496 <_kill>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_kill_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_kill_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	20000520 	.word	0x20000520

08008508 <_getpid_r>:
 8008508:	f7f9 bfbe 	b.w	8002488 <_getpid>

0800850c <_init>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr

08008518 <_fini>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr
